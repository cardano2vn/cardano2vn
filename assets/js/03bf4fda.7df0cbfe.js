"use strict";(self.webpackChunkbringscdocs=self.webpackChunkbringscdocs||[]).push([[3650],{3905:function(n,t,e){e.d(t,{Zo:function(){return p},kt:function(){return s}});var a=e(7294);function c(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function l(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?l(Object(e),!0).forEach((function(t){c(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function r(n,t){if(null==n)return{};var e,a,c=function(n,t){if(null==n)return{};var e,a,c={},l=Object.keys(n);for(a=0;a<l.length;a++)e=l[a],t.indexOf(e)>=0||(c[e]=n[e]);return c}(n,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(a=0;a<l.length;a++)e=l[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(c[e]=n[e])}return c}var h=a.createContext({}),o=function(n){var t=a.useContext(h),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},p=function(n){var t=o(n.components);return a.createElement(h.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(n,t){var e=n.components,c=n.mdxType,l=n.originalType,h=n.parentName,p=r(n,["components","mdxType","originalType","parentName"]),g=o(e),s=c,m=g["".concat(h,".").concat(s)]||g[s]||u[s]||l;return e?a.createElement(m,i(i({ref:t},p),{},{components:e})):a.createElement(m,i({ref:t},p))}));function s(n,t){var e=arguments,c=t&&t.mdxType;if("string"==typeof n||c){var l=e.length,i=new Array(l);i[0]=g;var r={};for(var h in t)hasOwnProperty.call(t,h)&&(r[h]=t[h]);r.originalType=n,r.mdxType="string"==typeof n?n:c,i[1]=r;for(var o=2;o<l;o++)i[o]=e[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}g.displayName="MDXCreateElement"},656:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return r},metadata:function(){return h},toc:function(){return o},default:function(){return u}});var a=e(7462),c=e(3366),l=(e(7294),e(3905)),i=["components"],r={},h={unversionedId:"dr-lars-lession/week6",id:"dr-lars-lession/week6",isDocsHomePage:!1,title:"Week 06 - Oracles",description:"Ghi ch\xfa",source:"@site/docs/dr-lars-lession/week6.md",sourceDirName:"dr-lars-lession",slug:"/dr-lars-lession/week6",permalink:"/docs/dr-lars-lession/week6",editUrl:"https://github.com/cardano2vn/cardanovn-portal/edit/main/docs/dr-lars-lession/week6.md",version:"current",frontMatter:{}},o=[{value:"T\u1ed5ng quat",id:"t\u1ed5ng-quat",children:[{value:"B\u1ea3n t\xf3m t\u1eaft",id:"b\u1ea3n-t\xf3m-t\u1eaft",children:[]}]},{value:"Oracle Core",id:"oracle-core",children:[{value:"On-chain",id:"on-chain",children:[]}]},{value:"Ch\xfa \xfd",id:"ch\xfa-\xfd",children:[{value:"Off-chain",id:"off-chain",children:[]}]},{value:"X\xe1c th\u1ef1c ho\xe1n \u0111\u1ed5i(Swap Validation)",id:"x\xe1c-th\u1ef1c-ho\xe1n-\u0111\u1ed5iswap-validation",children:[{value:"Ch\xe0o h\xe0ng (offerSwap)",id:"ch\xe0o-h\xe0ng-offerswap",children:[]},{value:"findSwaps",id:"findswaps",children:[]},{value:"l\u1ea5y l\u1ea1i Ho\xe1n \u0111\u1ed5i (retrieveSwaps)",id:"l\u1ea5y-l\u1ea1i-ho\xe1n-\u0111\u1ed5i-retrieveswaps",children:[]},{value:"useSwaps",id:"useswaps",children:[]},{value:"G\xf3i h\u1ee3p \u0111\u1ed3ng (Contract bundle)",id:"g\xf3i-h\u1ee3p-\u0111\u1ed3ng-contract-bundle",children:[]}]},{value:"Funds Module",id:"funds-module",children:[]},{value:"Testing",id:"testing",children:[{value:"Test in the REPL",id:"test-in-the-repl",children:[]}]},{value:"Plutus Application Backend (PAB)",id:"plutus-application-backend-pab",children:[{value:"Oracle PAB",id:"oracle-pab",children:[]},{value:"Oracle Client",id:"oracle-client",children:[]},{value:"Swap Client",id:"swap-client",children:[]}]}],p={toc:o};function u(n){var t=n.components,r=(0,c.Z)(n,i);return(0,l.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Ghi ch\xfa"),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 phi\xean b\u1ea3n vi\u1ebft c\u1ee7a ",(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=X9fOkkpj-aU"},"B\xe0i gi\u1ea3ng s\u1ed1 6"),"."),(0,l.kt)("p",null,"Trong b\xe0i gi\u1ea3ng n\xe0y, ch\xfang ta h\u1ecdc v\u1ec1 oracles v\xe0 s\u1eed d\u1ee5ng PAB (Plutus Application Backend)."),(0,l.kt)("p",null,"Nh\u1eefng ghi ch\xfa n\xe0y s\u1eed d\u1ee5ng Plutus cam k\u1ebft: 476409eaee94141e2fe076a7821fc2fcdec5dfcb"),(0,l.kt)("h2",{id:"t\u1ed5ng-quat"},"T\u1ed5ng quat"),(0,l.kt)("p",null,"Trong b\xe0i gi\u1ea3ng n\xe0y, ch\xfang ta s\u1ebd xem x\xe9t m\u1ed9t nghi\xean c\u1ee9u \u0111i\u1ec3n h\xecnh, \u0111\u1ec3 xem l\xe0m th\u1ebf n\xe0o nh\u1eefng g\xec ch\xfang ta \u0111\xe3 h\u1ecdc \u0111\u01b0\u1ee3c cho \u0111\u1ebfn nay c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ebfn th\xe0nh m\u1ed9t \u1ee9ng d\u1ee5ng th\u1ef1c t\u1ebf. M\u1ed9t b\u1ed9 s\u01b0u t\u1eadp c\xe1c t\u1ec7p th\u1ef1c thi th\u1eadm ch\xed \u0111i k\xe8m v\u1edbi m\u1ed9t giao di\u1ec7n ng\u01b0\u1eddi d\xf9ng nh\u1ecf."),(0,l.kt)("p",null,"N\xf3 s\u1ebd l\xe0 m\u1ed9t dApp th\u1ef1c s\u1ef1, ngo\xe0i vi\u1ec7c ch\xfang ta ch\u01b0a c\xf3 s\u1eb5n m\u1ed9t blockchain th\u1ef1c s\u1ef1. \u0110i\u1ec1u n\xe0y s\u1ebd ch\u1ea1y tr\xean m\u1ed9t chu\u1ed7i kh\u1ed1i m\xf4 ph\u1ecfng - m\u1ed9t chu\u1ed7i m\xf4 h\xecnh."),(0,l.kt)("p",null,"V\xed d\u1ee5 ch\xfang ta s\u1ebd s\u1eed d\u1ee5ng cho vi\u1ec7c n\xe0y l\xe0 tri\u1ec3n khai m\u1ed9t ti\xean tri r\u1ea5t \u0111\u01a1n gi\u1ea3n."),(0,l.kt)("p",null,"Ghi ch\xfa"),(0,l.kt)("p",null,"Trong th\u1ebf gi\u1edbi blockchain, ti\xean tri l\xe0 m\u1ed9t c\xe1ch \u0111\u1ec3 \u0111\u01b0a th\xf4ng tin th\u1ebf gi\u1edbi th\u1ef1c v\xe0o blockchain, \u0111\u1ec3 l\xe0m cho n\xf3 c\xf3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c trong c\xe1c h\u1ee3p \u0111\u1ed3ng th\xf4ng minh."),(0,l.kt)("p",null,"C\xf3 r\u1ea5t nhi\u1ec1u v\xed d\u1ee5 v\u1ec1 c\xe1c tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng cho oracles. Ch\xfang ta c\xf3 th\u1ec3 ngh\u0129 \u0111\u1ebfn c\xe1c ngu\u1ed3n d\u1eef li\u1ec7u b\xean ngo\xe0i nh\u01b0 d\u1eef li\u1ec7u th\u1eddi ti\u1ebft, k\u1ebft qu\u1ea3 b\u1ea7u c\u1eed, d\u1eef li\u1ec7u trao \u0111\u1ed5i ch\u1ee9ng kho\xe1n ho\u1eb7c s\u1ef1 ng\u1eabu nhi\xean. V\xed d\u1ee5, b\u1ea1n c\xf3 th\u1ec3 c\xf3 m\u1ed9t h\u1ee3p \u0111\u1ed3ng c\xe1 c\u01b0\u1ee3c ph\u1ee5 thu\u1ed9c v\xe0o k\u1ebft qu\u1ea3 c\u1ee7a m\u1ed9t tr\xf2 ch\u01a1i th\u1ec3 thao c\u1ee5 th\u1ec3."),(0,l.kt)("p",null,"C\xf3 nhi\u1ec1u c\xe1ch kh\xe1c nhau \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\xe1c c\xe2u chuy\u1ec7n th\u1ea7n tho\u1ea1i, v\u1edbi m\u1ee9c \u0111\u1ed9 ph\u1ee9c t\u1ea1p kh\xe1c nhau."),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t c\xe1ch ti\u1ebfp c\u1eadn r\u1ea5t \u0111\u01a1n gi\u1ea3n, n\u01a1i ch\xfang t\xf4i c\xf3 m\u1ed9t nh\xe0 cung c\u1ea5p d\u1eef li\u1ec7u \u0111\xe1ng tin c\u1eady. V\xe0, \u0111\u1ec3 l\xe0m v\xed d\u1ee5 v\u1ec1 d\u1eef li\u1ec7u, ch\xfang t\xf4i s\u1ebd s\u1eed d\u1ee5ng t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i ADA / USD."),(0,l.kt)("p",null,"C\xf3 r\u1ea5t nhi\u1ec1u v\u1ea5n \u0111\u1ec1 v\u1edbi c\xe1ch ti\u1ebfp c\u1eadn n\xe0y, v\xec ch\xfang ta ph\u1ea3i tin t\u01b0\u1edfng v\xe0o ngu\u1ed3n d\u1eef li\u1ec7u. C\xf3 nhi\u1ec1u c\xe1ch \u0111\u1ec3 gi\u1ea3m thi\u1ec3u r\u1ee7i ro ngu\u1ed3n d\u1eef li\u1ec7u kh\xf4ng \u0111\xe1ng tin c\u1eady ho\u1eb7c kh\xf4ng \u0111\xe1ng tin c\u1eady. V\xed d\u1ee5: ch\xfang t\xf4i c\xf3 th\u1ec3 y\xeau c\u1ea7u nh\xe0 cung c\u1ea5p \u0111\u01b0a ra m\u1ed9t s\u1ed1 t\xe0i s\u1ea3n th\u1ebf ch\u1ea5p b\u1ecb m\u1ea5t n\u1ebfu d\u1eef li\u1ec7u kh\xf4ng \u0111\u01b0\u1ee3c cung c\u1ea5p ho\u1eb7c kh\xf4ng ch\xednh x\xe1c. Ho\u1eb7c, b\u1ea1n c\xf3 th\u1ec3 k\u1ebft h\u1ee3p nhi\u1ec1u c\xe2u th\u1ea7n ch\xfa th\xe0nh m\u1ed9t v\xe0 ch\u1ec9 ch\u1ea5p nh\u1eadn k\u1ebft qu\u1ea3 n\u1ebfu t\u1ea5t c\u1ea3 ch\xfang \u0111\u1ec1u \u0111\u1ed3ng \xfd ho\u1eb7c l\u1ea5y gi\xe1 tr\u1ecb trung b\xecnh ho\u1eb7c gi\xe1 tr\u1ecb trung b\xecnh c\u1ee7a c\xe1c ngu\u1ed3n kh\xe1c nhau. B\u1ea1n c\u0169ng c\xf3 th\u1ec3 ngh\u0129 ra c\xe1c c\u01a1 ch\u1ebf ph\u1ee9c t\u1ea1p h\u01a1n."),(0,l.kt)("p",null,"Nh\u01b0 ch\xfang ta \u0111\xe3 bi\u1ebft, \u0111\u1ed1i v\u1edbi b\u1ea5t k\u1ef3 \u0111i\u1ec1u g\xec x\u1ea3y ra tr\xean blockchain, ph\u1ea3i c\xf3 UTxO, v\xec v\u1eady \u0111i\u1ec1u hi\u1ec3n nhi\xean c\u1ea7n l\xe0m l\xe0 bi\u1ec3u th\u1ecb ngu\u1ed3n c\u1ea5p d\u1eef li\u1ec7u d\u01b0\u1edbi d\u1ea1ng UTxO. UTxO n\u1eb1m \u1edf \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh c\u1ee7a oracle v\xe0 tr\u01b0\u1eddng d\u1eef li\u1ec7u c\u1ee7a n\xf3 mang gi\xe1 tr\u1ecb hi\u1ec7n t\u1ea1i c\u1ee7a d\u1eef li\u1ec7u oracle."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(4543).Z})),(0,l.kt)("p",null,"V\xe0 \u0111\xe2y l\xe0 n\u01a1i ch\xfang t\xf4i t\xecm ra v\u1ea5n \u0111\u1ec1 \u0111\u1ea7u ti\xean c\u1ee7a m\xecnh. Nh\u01b0 ch\xfang ta \u0111\xe3 l\u01b0u \xfd tr\u01b0\u1edbc \u0111\xe2y, x\xe1c th\u1ef1c ch\u1ec9 x\u1ea3y ra khi b\u1ea1n mu\u1ed1n s\u1eed d\u1ee5ng th\u1ee9 g\xec \u0111\xf3 t\u1eeb \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh, ch\u1ee9 kh\xf4ng ph\u1ea3i khi b\u1ea1n t\u1ea1o \u0111\u1ea7u ra t\u1ea1i \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh. \u0110i\u1ec1u n\xe0y c\xf3 ngh\u0129a l\xe0 ch\xfang t\xf4i kh\xf4ng th\u1ec3 ng\u0103n c\u1ea3n b\u1ea5t k\u1ef3 ai t\u1ea1o ra k\u1ebft qu\u1ea3 \u0111\u1ea7u ra t\xf9y \xfd t\u1ea1i \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(2499).Z})),(0,l.kt)("p",null,"B\u1eb1ng c\xe1ch n\xe0o \u0111\xf3, ch\xfang ta c\u1ea7n ph\xe2n bi\u1ec7t \u0111\u1ea7u ra oracle th\u1ef1c s\u1ef1 v\u1edbi c\xe1c \u0111\u1ea7u ra kh\xe1c c\xf3 th\u1ec3 \u1edf c\xf9ng m\u1ed9t \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh. V\xe0 c\xe1ch ch\xfang t\xf4i l\xe0m \u0111i\u1ec1u n\xe0y l\xe0 \u0111\u1eb7t m\u1ed9t NFT tr\xean \u0111\u1ea7u ra. V\xec m\u1ed9t NFT ch\u1ec9 c\xf3 th\u1ec3 t\u1ed3n t\u1ea1i m\u1ed9t l\u1ea7n n\xean ch\u1ec9 c\xf3 th\u1ec3 c\xf3 m\u1ed9t UTxO t\u1ea1i \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh ch\u1ee9a NFT."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(3123).Z})),(0,l.kt)("p",null,"L\xe0m th\u1ebf n\xe0o m\u1ed9t l\u1eddi ti\xean tri nh\u01b0 v\u1eady c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng?"),(0,l.kt)("p",null,"\u1ede \u0111\xe2y ch\xfang ta \u0111\u1ebfn v\u1edbi m\u1ed9t c\xe1i g\xec \u0111\xf3 m\xe0 ch\xfang ta ch\u01b0a t\u1eebng th\u1ea5y tr\u01b0\u1edbc \u0111\xe2y. Trong t\u1ea5t c\u1ea3 c\xe1c h\u1ee3p \u0111\u1ed3ng v\xe0 tr\xecnh x\xe1c th\u1ef1c vi\u1ebft m\xe3 c\u1ee7a ch\xfang t\xf4i, ch\xfang t\xf4i lu\xf4n bi\u1ebft tr\u01b0\u1edbc to\xe0n b\u1ed9 API. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a m\u1ed9t nh\xe0 ti\xean tri, \u0111i\u1ec1u n\xe0y l\xe0 kh\xe1c nhau. T\u1ea1i th\u1eddi \u0111i\u1ec3m m\xe0 m\u1ed9t ti\xean tri \u0111\u01b0\u1ee3c t\u1ea1o ra, b\u1ea1n kh\xf4ng bi\u1ebft m\u1ecdi ng\u01b0\u1eddi c\xf3 th\u1ec3 mu\u1ed1n s\u1eed d\u1ee5ng n\xf3 nh\u01b0 th\u1ebf n\xe0o. N\xf3 ph\u1ea3i gi\u1ed1ng nh\u01b0 m\u1ed9t API m\u1edf, c\xf3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng v\u1edbi c\xe1c h\u1ee3p \u0111\u1ed3ng th\xf4ng minh ch\u01b0a \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf."),(0,l.kt)("p",null,"V\xed d\u1ee5 v\u1ec1 tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng c\xf3 th\u1ec3 s\u1eed d\u1ee5ng oracle c\u1ee5 th\u1ec3 n\xe0y, ch\xfang ta h\xe3y xem x\xe9t m\u1ed9t h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i trong \u0111\xf3, t\u1ea1i \u0111\u1ecba ch\u1ec9 ho\xe1n \u0111\u1ed5i, ai \u0111\xf3 c\xf3 th\u1ec3 g\u1eedi ADA v\xe0 sau \u0111\xf3 ng\u01b0\u1eddi kh\xe1c c\xf3 th\u1ec3 l\u1ea5y nh\u1eefng ADA \u0111\xf3 \u0111\u1ec3 \u0111\u1ed5i l\u1ea5y USD."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(2198).Z})),(0,l.kt)("p",null,"T\u1ea5t nhi\xean, ch\xfang ta kh\xf4ng c\xf3 USD tr\u1ef1c ti\u1ebfp tr\xean blockchain, nh\u01b0ng ch\xfang ta c\xf3 th\u1ec3 t\u01b0\u1edfng t\u01b0\u1ee3ng r\u1eb1ng ch\xfang \u0111\u01b0\u1ee3c \u0111\u1ea1i di\u1ec7n b\u1edfi m\u1ed9t s\u1ed1 m\xe3 th\xf4ng b\xe1o g\u1ed1c."),(0,l.kt)("p",null,"Trong v\xed d\u1ee5 n\xe0y, v\xec gi\xe1 tr\u1ecb c\u1ee7a oracle l\xe0 1,75, th\xec n\u1ebfu ai \u0111\xf3 cung c\u1ea5p 100 ADA, gi\xe1 cho \u0111i\u1ec1u \u0111\xf3 s\u1ebd l\xe0 175 USD."),(0,l.kt)("p",null,"Ngo\xe0i ra, ch\xfang t\xf4i c\u1ea7n m\u1ed9t \u0111\u1ed9ng l\u1ef1c \u0111\u1ec3 ti\xean tri cung c\u1ea5p d\u1eef li\u1ec7u, b\u1edfi v\xec ngo\xe0i c\xe1c chi ph\xed kh\xe1c \u0111\u1ec3 cung c\u1ea5p d\u1eef li\u1ec7u, th\xec \u1edf m\u1ee9c t\u1ed1i thi\u1ec3u h\u1ecd s\u1ebd ph\u1ea3i tr\u1ea3 ph\xed \u0111\u1ec3 t\u1ea1o UTxO."),(0,l.kt)("p",null,"V\xec v\u1eady, gi\u1ea3 s\u1eed r\u1eb1ng nh\xe0 cung c\u1ea5p oracle x\xe1c \u0111\u1ecbnh m\u1ed9t kho\u1ea3n ph\xed 1 ADA ph\u1ea3i tr\u1ea3 m\u1ed7i khi oracle \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng."),(0,l.kt)("p",null,"Trong v\xed d\u1ee5 n\xe0y, \u0111i\u1ec1u \u0111\xf3 c\xf3 ngh\u0129a l\xe0 ng\u01b0\u1eddi mu\u1ed1n ADA s\u1ebd ph\u1ea3i tr\u1ea3 175 USD cho ng\u01b0\u1eddi b\xe1n ADA v\xe0 1 ADA cho nh\xe0 ti\xean tri."),(0,l.kt)("p",null,"Giao d\u1ecbch s\u1ebd nh\u01b0 th\u1ebf n\xe0o?"),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(1286).Z})),(0,l.kt)("p",null,"Tr\u01b0\u1edbc h\u1ebft, logic x\xe1c th\u1ef1c ho\xe1n \u0111\u1ed5i s\u1ebd c\u1ea7n quy\u1ec1n truy c\u1eadp v\xe0o gi\xe1 tr\u1ecb oracle hi\u1ec7n t\u1ea1i, c\xf3 ngh\u0129a l\xe0 UTxO oracle ph\u1ea3i l\xe0 \u0111\u1ea7u v\xe0o cho giao d\u1ecbch."),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang ta c\xf3 logic x\xe1c th\u1ef1c ti\xean tri. Trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, ch\xfang t\xf4i mu\u1ed1n s\u1eed d\u1ee5ng ti\xean tri. V\xec v\u1eady, gi\u1ea3 s\u1eed ch\xfang ta c\xf3 m\u1ed9t c\xf4ng c\u1ee5 \u0111\u1ed5i qu\xe0 \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 s\u1eed d\u1ee5ng . B\xe2y gi\u1edd, tr\xecnh x\xe1c th\u1ef1c ti\xean tri ph\u1ea3i ki\u1ec3m tra m\u1ed9t s\u1ed1 th\u1ee9."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"NFT c\xf3 trong \u0111\u1ea7u v\xe0o \u0111\u01b0\u1ee3c ti\xeau th\u1ee5 kh\xf4ng?"),(0,l.kt)("li",{parentName:"ol"},"C\xf3 \u0111\u1ea7u ra t\u1eeb giao d\u1ecbch t\u1ea1i c\xf9ng m\u1ed9t \u0111\u1ecba ch\u1ec9 c\xf3 ch\u1ee9a c\xf9ng m\u1ed9t NFT kh\xf4ng?"),(0,l.kt)("li",{parentName:"ol"},"IGi\xe1 tr\u1ecb trong UTxO \u0111\u1ea7u ra c\xf3 gi\u1ed1ng v\u1edbi gi\xe1 tr\u1ecb \u0111\u1ea7u v\xe0o kh\xf4ng?"),(0,l.kt)("li",{parentName:"ol"},"Ph\xed c\xf3 ph\u1ea3i kh\xf4ng?")),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta c\xf3 th\u1ec3 ho\xe0n th\xe0nh giao d\u1ecbch."),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1eed d\u1ee5ng hai \u0111\u1ea7u v\xe0o b\u1ed5 sung - ph\xed do ng\u01b0\u1eddi mua tr\u1ea3 v\xe0 100 ADA do ng\u01b0\u1eddi b\xe1n \u0111\u1eb7t c\u1ecdc. Sau \u0111\xf3, ch\xfang t\xf4i c\xf3 hai \u0111\u1ea7u ra b\u1ed5 sung - 175 USD cho ng\u01b0\u1eddi b\xe1n v\xe0 100 ADA cho ng\u01b0\u1eddi mua. V\xe0 \u0111\u1ed1i v\u1edbi nh\u1eefng \u0111\u1ea7u v\xe0o v\xe0 \u0111\u1ea7u ra m\u1edbi n\xe0y, ng\u01b0\u1eddi x\xe1c nh\u1eadn ho\xe1n \u0111\u1ed5i c\xf3 tr\xe1ch nhi\u1ec7m \u0111\u1ea3m b\u1ea3o r\u1eb1ng n\xf3 ch\xednh x\xe1c. Trong khi \u0111\xf3, tr\xecnh x\xe1c nh\u1eadn ti\xean tri ch\u1ec9 quan t\xe2m \u0111\u1ebfn vi\u1ec7c \u0111\u1ea3m b\u1ea3o r\u1eb1ng m\u1ecdi th\u1ee9 li\xean quan \u0111\u1ebfn ti\xean tri l\xe0 ch\xednh x\xe1c."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(7700).Z})),(0,l.kt)("p",null,"Ch\u1ec9 c\u1ea7n nh\u1ea5n m\u1ea1nh, h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i n\xe0y ch\u1ec9 l\xe0 m\u1ed9t v\xed d\u1ee5. Nh\xe0 ti\xean tri ph\u1ea3i c\xf3 kh\u1ea3 n\u0103ng l\xe0m vi\u1ec7c v\u1edbi nhi\u1ec1u h\u1ee3p \u0111\u1ed3ng th\xf4ng minh kh\xe1c nhau mu\u1ed1n s\u1eed d\u1ee5ng d\u1eef li\u1ec7u c\u1ee7a n\xf3."),(0,l.kt)("p",null,"N\u1ebfu \u0111\xe2y l\xe0 t\u1ea5t c\u1ea3, th\xec ch\xfang ta s\u1ebd kh\xf4ng c\u1ea7n m\u1ed9t l\u1eddi ti\xean tri. N\u1ebfu gi\xe1 tr\u1ecb \u0111\xe3 \u0111\u01b0\u1ee3c c\u1ed1 \u0111\u1ecbnh, \u0111\u1ec3 n\xf3 lu\xf4n l\xe0 1,75 th\xec ch\xfang t\xf4i c\xf3 th\u1ec3 ch\u1ec9 c\u1ea7n m\xe3 h\xf3a gi\xe1 tr\u1ecb n\xe0y v\xe0o h\u1ee3p \u0111\u1ed3ng c\u1ee7a m\xecnh. V\xec v\u1eady, gi\xe1 tr\u1ecb ph\u1ea3i c\xf3 th\u1ec3 thay \u0111\u1ed5i. \xcdt nh\u1ea5t, trong m\u1ed9t v\xed d\u1ee5 ch\u1eb3ng h\u1ea1n nh\u01b0 v\xed d\u1ee5 n\xe0y, n\u01a1i ch\xfang ta c\xf3 m\u1ed9t t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i, t\u1ea5t nhi\xean, c\xf3 th\u1ec3 thay \u0111\u1ed5i theo th\u1eddi gian. C\xf3 th\u1ec3 c\xf3 c\xe1c v\xed d\u1ee5 kh\xe1c nh\u01b0 k\u1ebft qu\u1ea3 c\u1ee7a m\u1ed9t tr\u1eadn \u0111\u1ea5u th\u1ec3 thao, trong \u0111\xf3 n\xf3 l\xe0 m\u1ed9t s\u1ef1 ki\u1ec7n k\u1ef3 \u200b\u200bl\u1ea1 trong l\u1ecbch s\u1eed, nh\u01b0ng trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, \u0111i\u1ec1u quan tr\u1ecdng l\xe0 n\xf3 c\xf3 th\u1ec3 thay \u0111\u1ed5i."),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y c\xf3 ngh\u0129a l\xe0 tr\xecnh x\xe1c th\u1ef1c oracle, ngo\xe0i vi\u1ec7c s\u1eed d\u1ee5ng Redeemer, ph\u1ea3i c\xf3 kh\u1ea3 n\u0103ng h\u1ed7 tr\u1ee3 m\u1ed9t ho\u1ea1t \u0111\u1ed9ng kh\xe1c m\xe0 nh\xe0 cung c\u1ea5p oracle th\u1ef1c s\u1ef1 c\xf3 th\u1ec3 thay \u0111\u1ed5i d\u1eef li\u1ec7u."),(0,l.kt)("p",null,"V\xec v\u1eady, gi\u1ea3 s\u1eed gi\xe1 tr\u1ecb thay \u0111\u1ed5i t\u1eeb 1,75 th\xe0nh 1,77."),(0,l.kt)("p",null,"Ch\xfang t\xf4i bi\u1ebft r\u1eb1ng tr\xean blockchain UTxO (E), kh\xf4ng c\xf3 g\xec thay \u0111\u1ed5i, v\xec v\u1eady b\u1ea1n kh\xf4ng th\u1ec3 thay \u0111\u1ed5i d\u1eef li\u1ec7u c\u1ee7a UTxO hi\u1ec7n c\xf3. T\u1ea5t c\u1ea3 nh\u1eefng g\xec b\u1ea1n c\xf3 th\u1ec3 l\xe0m l\xe0 s\u1eed d\u1ee5ng UTxO v\xe0 s\u1ea3n xu\u1ea5t UTxO m\u1edbi."),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1ebd c\xf3 m\u1ed9t giao d\u1ecbch s\u1eed d\u1ee5ng Redeemer b\u1ea3n c\u1eadp nh\u1eadt . Logic x\xe1c nh\u1eadn h\u01a1i kh\xe1c. N\xf3 gi\u1ed1ng nh\u01b0 tr\u01b0\u1edbc \u0111\xe2y \u1edf ch\u1ed7 NFT c\u1ea7n ph\u1ea3i c\xf3 m\u1eb7t trong \u0111\u1ea7u v\xe0o oracle \u0111\xe3 ti\xeau th\u1ee5, v\xe0 c\u0169ng c\u1ea7n c\xf3 m\u1eb7t trong \u0111\u1ea7u ra m\u1edbi. Ngo\xe0i ra, giao d\u1ecbch ph\u1ea3i \u0111\u01b0\u1ee3c k\xfd b\u1edfi nh\xe0 cung c\u1ea5p oracle. V\xe0, ch\xfang t\xf4i c\xf3 th\u1ec3 s\u1eed d\u1ee5ng giao d\u1ecbch c\u1eadp nh\u1eadt n\xe0y nh\u01b0 m\u1ed9t c\u01a1 h\u1ed9i \u0111\u1ec3 nh\xe0 cung c\u1ea5p oracle thu ph\xed."),(0,l.kt)("p",null,"Ch\xfang t\xf4i nh\u1ea5n m\u1ea1nh r\u1eb1ng NFT c\xf3 trong \u0111\u1ea7u ra, nh\u01b0ng ch\xfang t\xf4i kh\xf4ng n\xf3i g\xec v\u1ec1 c\xe1c gi\xe1 tr\u1ecb kh\xe1c. T\u1ea5t c\u1ea3 c\xe1c kho\u1ea3n ph\xed do c\xe1c giao d\u1ecbch kh\xe1c s\u1eed d\u1ee5ng d\u1eef li\u1ec7u oracle n\xe0y c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c thu trong qu\xe1 tr\xecnh c\u1eadp nh\u1eadt giao d\u1ecbch."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(1586).Z})),(0,l.kt)("h3",{id:"b\u1ea3n-t\xf3m-t\u1eaft"},"B\u1ea3n t\xf3m t\u1eaft"),(0,l.kt)("p",null,"T\xf3m l\u1ea1i, ch\xfang t\xf4i \u0111\u1ea1i di\u1ec7n cho ti\xean tri b\u1edfi m\u1ed9t UTxO v\xe0 x\xe1c \u0111\u1ecbnh UTxO ch\xednh x\xe1c b\u1eb1ng m\u1ed9t NFT. Gi\xe1 tr\u1ecb oracle l\xe0 d\u1eef li\u1ec7u c\u1ee7a UTxO. Ch\xfang t\xf4i h\u1ed7 tr\u1ee3 hai ho\u1ea1t \u0111\u1ed9ng."),(0,l.kt)("p",null,"M\u1ed9t l\xe0 s\u1eed d\u1ee5ng s\u1eed d\u1ee5ng ti\xean tri trong m\u1ed9t s\u1ed1 giao d\u1ecbch t\xf9y \xfd. C\xe1c s\u1eed d\u1ee5ng validator s\u1ebd \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\xe1c \u0111\u1ea7u v\xe0o oracle ti\xeau th\u1ee5 mang NFT, r\u1eb1ng c\xf3 m\u1ed9t \u0111\u1ea7u ra m\xe0 l\u1ea1i mang NFT, kh\xf4ng l\xe0m thay \u0111\u1ed5i d\u1eef ki\u1ec7n, v\xe0 mang ph\xed b\u1ed5 sung."),(0,l.kt)("p",null,"Thao t\xe1c th\u1ee9 hai l\xe0 c\u1eadp nh\u1eadt ch\u1ec9 c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi nh\xe0 cung c\u1ea5p oracle. \u0110\u1ed1i v\u1edbi m\u1ed9t giao d\u1ecbch c\u1eadp nh\u1eadt , \u0111\u1ea7u v\xe0o oracle l\u1ea1i ph\u1ea3i mang NFT, ph\u1ea3i c\xf3 \u0111\u1ea7u ra oracle c\u0169ng mang NFT. Kh\xf4ng c\xf3 h\u1ea1n ch\u1ebf n\xe0o n\u1eefa. S\u1ed1 li\u1ec7u c\xf3 th\u1ec3 thay \u0111\u1ed5i v\xe0 ph\xed t\xedch l\u0169y c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c l\u1ea5y ra."),(0,l.kt)("h2",{id:"oracle-core"},"Oracle Core"),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta bi\u1ebft n\xf3 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 th\u1ebf n\xe0o, h\xe3y xem m\u1ed9t s\u1ed1 \u0111o\u1ea1n m\xe3."),(0,l.kt)("h3",{id:"on-chain"},"On-chain"),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, h\xe3y xem m\xe3 Plutus t\u1ef1 th\u1ef1c thi oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"module Week06.Oracle.Core\n")),(0,l.kt)("p",null,"The oracle s\u1ebd l\xe0 m\u1ed9t h\u1ee3p \u0111\u1ed3ng \u0111\u01b0\u1ee3c tham s\u1ed1 h\xf3a v\xe0 n\xf3 s\u1ebd ph\u1ee5 thu\u1ed9c v\xe0o b\u1ed1n tr\u01b0\u1eddng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"data Oracle = Oracle\n    { oSymbol   :: !CurrencySymbol\n    , oOperator :: !PubKeyHash\n    , oFee      :: !Integer\n    , oAsset    :: !AssetClass\n    } deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)    \n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"oSymbol"),"  l\xe0 bi\u1ec3u t\u01b0\u1ee3ng ti\u1ec1n t\u1ec7 c\u1ee7a NFT \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\xe1c \u0111\u1ecbnh giao d\u1ecbch. Ch\xfang t\xf4i kh\xf4ng c\u1ea7n t\xean m\xe3 th\xf4ng b\xe1o v\xec ch\xfang t\xf4i s\u1ebd ch\u1ec9 s\u1eed d\u1ee5ng chu\u1ed7i tr\u1ed1ng l\xe0m t\xean m\xe3 th\xf4ng b\xe1o."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"oOperator"),"  l\xe0 ch\u1ee7 s\u1edf h\u1eefu c\u1ee7a oracle - h\xe0m b\u0103m c\u1ee7a ch\u1ee7 s\u1edf h\u1eefu kh\xf3a c\xf4ng khai c\xf3 th\u1ec3 th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"oFee"),"  l\xe0 kho\u1ea3n ph\xed trong t\xecnh y\xeau ph\u1ea3i tr\u1ea3 m\u1ed7i khi s\u1eed d\u1ee5ng oracle"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"oAsset"),"  \u0111\u1ea1i di\u1ec7n cho lo\u1ea1i t\xe0i s\u1ea3n m\xe0 ch\xfang t\xf4i mu\u1ed1n trao \u0111\u1ed5i t\u1ef7 gi\xe1 so v\u1edbi Ada, trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a ch\xfang t\xf4i s\u1ebd l\xe0 m\u1ed9t s\u1ed1 lo\u1ea1i m\xe3 th\xf4ng b\xe1o USD")),(0,l.kt)("p",null,"Redeemer s\u1ebd h\u1ed7 tr\u1ee3 hai ho\u1ea1t \u0111\u1ed9ng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"data OracleRedeemer = Update | Use\n    deriving Show\n\nPlutusTx.unstableMakeIsData ''OracleRedeemer\n")),(0,l.kt)("p",null,"Ch\xfang ta c\u1ea7n x\xe1c \u0111\u1ecbnh l\u1edbp t\xe0i s\u1ea3n NFT. Nh\u01b0 \u0111\xe3 \u0111\u1ec1 c\u1eadp, ch\xfang ta s\u1ebd s\u1eed d\u1ee5ng chu\u1ed7i tr\u1ed1ng cho t\xean m\xe3 th\xf4ng b\xe1o."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"{-# INLINABLE oracleTokenName #-}\noracleTokenName :: TokenName\noracleTokenName = TokenName emptyByteString\n")),(0,l.kt)("p",null,"C\xe1c ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleAsset")," s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\xe1c \u0111\u1ecbnh c\xe1c NFT - \u0111\xe2y kh\xf4ng ph\u1ea3i l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"oAsset")," \u0111\u1ecbnh ngh\u0129a \u1edf tr\xean."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"{-# INLINABLE oracleAsset #-}\noracleAsset :: Oracle -> AssetClass\noracleAsset oracle = AssetClass (oSymbol oracle, oracleTokenName)\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i t\u1ea1o m\u1ed9t h\xe0m tr\u1ee3 gi\xfap nh\u1ecf g\u1ecdi l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleValue")," . \u0110i\u1ec1u n\xe0y nh\u1eadn m\u1ed9t giao d\u1ecbch \u0111\u1ea7u ra v\xe0 m\u1ed9t h\xe0m t\xecm ki\u1ebfm d\u1eef li\u1ec7u, sau \u0111\xf3 tr\u1ea3 v\u1ec1 m\u1ed9t S\u1ed1 nguy\xean . C\xe1c Integer \u0111\u1ea1i di\u1ec7n cho t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i (v\xed d\u1ee5 1,75) nh\xe2n v\u1edbi m\u1ed9t tri\u1ec7u. \u0110i\u1ec1u n\xe0y tr\xe1nh nh\u1eefng ph\u1ee9c t\u1ea1p c\xf3 th\u1ec3 x\u1ea3y ra khi s\u1eed d\u1ee5ng s\u1ed1 th\u1ef1c."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"{-# INLINABLE oracleValue #-}\noracleValue :: TxOut -> (DatumHash -> Maybe Datum) -> Maybe Integer\noracleValue o f = do\n    dh      <- txOutDatum o\n    Datum d <- f dh\n    PlutusTx.fromData d\n")),(0,l.kt)("p",null,"H\xe0m n\xe0y l\xe0 m\u1ed9t v\xed d\u1ee5 v\u1ec1 t\xednh to\xe1n monadic trong monad. n\xf3 kh\xf4ng ph\u1ea3i l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),"  ho\u1eb7c ",(0,l.kt)("inlineCode",{parentName:"p"},"Contract monad"),". \u0110\u1ea7u ti\xean chung ta g\u1ecdi ",(0,l.kt)("inlineCode",{parentName:"p"},"txOutDatum"),", N\xf3 kh\xf4ng th\xe0nh c\xf4ng n\u1ebfu \u0111\xe2u ra kh\xf4ng c\xf3 datum. N\u1ebfu n\xf3 th\xe0nh c\xf4ng, ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c m\u1ed9t b\u0103m datum m\xe0 ch\xfang t\xf4i c\xf3 th\u1ec3 tham chi\u1ebfu trong \u0111\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"dh"),".  Ti\u1ebfp theo, ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m  ",(0,l.kt)("inlineCode",{parentName:"p"},"f"),"  \u0111\u01b0\u1ee3c cung c\u1ea5p l\xe0m \u0111\u1ed1i s\u1ed1 th\u1ee9 hai \u0111\u1ec3 c\xf3 th\u1ec3 bi\u1ebfn b\u0103m d\u1eef li\u1ec7u n\xe0y th\xe0nh m\u1ed9t d\u1eef li\u1ec7u. \u0110i\u1ec1u n\xe0y c\u0169ng c\xf3 th\u1ec3 th\u1ea5t b\u1ea1i. N\u1ebfu n\xf3 th\xe0nh c\xf4ng, ch\xfang t\xf4i c\xf3 th\u1ec3 tham kh\u1ea3o k\u1ebft qu\u1ea3 trong ",(0,l.kt)("inlineCode",{parentName:"p"},"d"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"Datum"),"  ch\u1ec9 l\xe0 m\u1ed9t tr\xecnh bao b\u1ecdc ki\u1ec3u m\u1edbi xung quanh ",(0,l.kt)("inlineCode",{parentName:"p"},"Data"),",v\xec v\u1eady sau \u0111\xf3 ch\xfang ta c\xf3 th\u1ec3 s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"PlutusTx.fromData"),"  \u0111\u1ec3 c\xf3 th\u1ec3 bi\u1ebfn ",(0,l.kt)("inlineCode",{parentName:"p"},"d"),"  th\xe0nh ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer"),".M\u1ed9t l\u1ea7n n\u1eefa, \u0111i\u1ec1u n\xe0y c\xf3 th\u1ec3 kh\xf4ng th\xe0nh c\xf4ng, b\u1edfi v\xec ngay c\u1ea3 khi d\u1eef li\u1ec7u \u1edf \u0111\xf3, n\xf3 c\xf3 th\u1ec3 kh\xf4ng \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i th\xe0nh gi\xe1 tr\u1ecb s\u1ed1 nguy\xean."),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd th\u1ea5y ch\xfang ta s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleValue"),"  \u1edf \u0111\xe2y trong gi\xe2y l\xe1t."),(0,l.kt)("p",null,"Ch\u1ee9c n\u0103ng quan tr\u1ecdng nh\u1ea5t l\xe0  ",(0,l.kt)("inlineCode",{parentName:"p"},"mkOracleValidator"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'{-# INLINABLE mkOracleValidator #-}\nmkOracleValidator :: Oracle -> Integer -> OracleRedeemer -> ScriptContext -> Bool\nmkOracleValidator oracle x r ctx =\n    traceIfFalse "token missing from input"  inputHasToken  &&\n    traceIfFalse "token missing from output" outputHasToken &&\n    case r of\n        Update -> traceIfFalse "operator signature missing" (txSignedBy info $ oOperator oracle) &&\n                  traceIfFalse "invalid output datum"       validOutputDatum\n        Use    -> traceIfFalse "oracle value changed"       (outputDatum == Just x)              &&\n                  traceIfFalse "fees not paid"              feesPaid\n  where\n    info :: TxInfo\n    info = scriptContextTxInfo ctx\n\n    ownInput :: TxOut\n    ownInput = case findOwnInput ctx of\n        Nothing -> traceError "oracle input missing"\n        Just i  -> txInInfoResolved i\n\n    inputHasToken :: Bool\n    inputHasToken = assetClassValueOf (txOutValue ownInput) (oracleAsset oracle) == 1\n\n    ownOutput :: TxOut\n    ownOutput = case getContinuingOutputs ctx of\n        [o] -> o\n        _   -> traceError "expected exactly one oracle output"\n\n    outputHasToken :: Bool\n    outputHasToken = assetClassValueOf (txOutValue ownOutput) (oracleAsset oracle) == 1\n\n    outputDatum :: Maybe Integer\n    outputDatum = oracleValue ownOutput (`findDatum` info)\n\n    validOutputDatum :: Bool\n    validOutputDatum = isJust outputDatum\n\n    feesPaid :: Bool\n    feesPaid =\n      let\n        inVal  = txOutValue ownInput\n        outVal = txOutValue ownOutput\n      in\n        outVal `geq` (inVal <> Ada.lovelaceValueOf (oFee oracle))\n')),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"mkOracleValidator"),"  nh\u1eadn 4 tham s\u1ed1: ",(0,l.kt)("inlineCode",{parentName:"p"},"Oracle"),",\ntrong v\xed d\u1ee5 n\xe0y ",(0,l.kt)("inlineCode",{parentName:"p"},"datum"),"  l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"redeemer")," l\xe0\n",(0,l.kt)("inlineCode",{parentName:"p"},"OracleRedeemer"),"  v\xe0 cu\u1ed1i c\xf9ng l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"ScriptContext"),"."),(0,l.kt)("p",null,"C\xf3 hai tr\u01b0\u1eddng h\u1ee3p cho tr\xecnh x\xe1c th\u1ef1c n\xe0y - ",(0,l.kt)("inlineCode",{parentName:"p"},"use")," v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," - nh\u01b0ng c\xf3 nh\u1eefng \u0111i\u1ec3m t\u01b0\u01a1ng \u0111\u1ed3ng. Trong c\u1ea3 hai tr\u01b0\u1eddng h\u1ee3p, ch\xfang t\xf4i mu\u1ed1n ki\u1ec3m tra xem ch\xfang t\xf4i c\xf3 \u0111\u1ea7u v\xe0o ch\u1ee9a NFT v\xe0 c\xf3 \u0111\u1ea7u ra ch\u1ee9a NFT kh\xf4ng."),(0,l.kt)("p",null,"V\xec c\u1ea3 hai vi\u1ec7c ki\u1ec3m tra n\xe0y \u0111\u1ec1u c\u1ea7n \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1ea5t k\u1ec3 tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng n\xe0o, n\xean ch\xfang \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u01b0\u1edbc."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'...\ntraceIfFalse "token missing from input"  inputHasToken  &&\ntraceIfFalse "token missing from output" outputHasToken &&\n...    \n')),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i xem x\xe9t tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng m\xe0 ch\xfang t\xf4i \u0111ang x\u1eed l\xfd."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'case r of\n    Update -> traceIfFalse "operator signature missing" (txSignedBy info $ oOperator oracle) &&\n              traceIfFalse "invalid output datum"       validOutputDatum\n    Use    -> traceIfFalse "oracle value changed"       (outputDatum == Just x)              &&\n              traceIfFalse "fees not paid"              feesPaid    \n')),(0,l.kt)("p",null,"Tr\u01b0\u1edbc khi xem x\xe9t h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"inputHasToken"),", c\xf3 m\u1ed9t ch\u1ee9c n\u0103ng tr\u1ee3 gi\xfap kh\xe1c c\u1ea7n xem x\xe9t"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'ownInput :: TxOut\nownInput = case findOwnInput ctx of\n    Nothing -> traceError "oracle input missing"\n    Just i  -> txInInfoResolved i\n')),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownInput"),"  tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"TxOut"),"  M\xe0 n\xf3 \u0111ang c\xf3 g\u1eafng ti\xeau th\u1ee5, trong tr\u01b0\u1eddng h\u1ee3p n\xe0y l\xe0 oracle output. Tr\u01b0\u1eddng h\u1ee3p ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),"  c\xf3 th\u1ec3 s\u1ea9y ra n\u1ebfu ra n\u1ebfu ch\xfang ta \u0111ang \u1edf trong m\u1ed9t context kh\xe1c, ch\u1eb3ng h\u1ea1n nh\u01b0 context \u0111\xfac, v\xec v\u1eady t\xecnh hu\u1ed1ng n\xe0y s\u1ebd kh\xf4ng x\u1ea3y ra cho ch\xfang ta. H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"findOwnInput")," \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi Plutus v\xe0 s\u1ebd nh\u1eadn context, sau \u0111\xf3 t\xecm c\xe1c \u0111\u1ea7u v\xe0o li\xean quan. H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"txInInfoResolved"),"  nh\u1eadn ",(0,l.kt)("inlineCode",{parentName:"p"},"TxOut"),"  t\u1eeb ",(0,l.kt)("inlineCode",{parentName:"p"},"TxInInfo"),"."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"inputHashToken"),"  ki\u1ec3m tra token hi\u1ec7n t\u1ea1i. N\xf3 s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"assetClassValueOf"),"  \u0111\u1ec3 t\xecm ki\u1ebfm NFT trong ph\u1ea3n h\u1ed3i ",(0,l.kt)("inlineCode",{parentName:"p"},"ownInput"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"inputHasToken :: Bool\ninputHasToken = assetClassValueOf (txOutValue ownInput) (oracleAsset oracle) == 1\n")),(0,l.kt)("p",null,"H\xe0m tr\u1ee3 gi\xfap ti\u1ebfp theo, ",(0,l.kt)("inlineCode",{parentName:"p"},"ownOutput")," ki\u1ec3m tra xem ch\xfang c\xf3 ch\xednh x\xe1c m\u1ed9t \u0111\u1ea7u ra hay kh\xf4ng v\xe0 tr\u1ea3 l\u1ea1i \u0111\u1ea7u ra \u0111\xf3 cho ch\xfang."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'ownOutput :: TxOut\nownOutput = case getContinuingOutputs ctx of\n    [o] -> o\n    _   -> traceError "expected exactly one oracle output"    \n')),(0,l.kt)("p",null,"Ch\xfang ta c\xf3 th\u1ec3 s\u1eed d\u1ee5ng h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"outputHasToken"),"  gi\u1ed1ng nh\u01b0 h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"inputHashToken"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"outputHasToken :: Bool\noutputHasToken = assetClassValueOf (txOutValue ownOutput) (oracleAsset oracle) == 1\n")),(0,l.kt)("p",null,"\u0110i\u1ec1u \u0111\xf3 bao g\u1ed3m m\xe3 cho c\xe1c tr\u01b0\u1eddng h\u1ee3p ph\u1ed5 bi\u1ebfn. B\xe2y gi\u1edd, h\xe3y xem m\xe3 c\u1ee5 th\u1ec3 cho tr\u01b0\u1eddng h\u1ee3p ",(0,l.kt)("inlineCode",{parentName:"p"},"update"),"."),(0,l.kt)("p",null,"C\xf3 hai \u0111i\u1ec1u ki\u1ec7n \u0111\u1ec3 ki\u1ec3m tra. \u0110\u1ea7u ti\xean l\xe0 nh\xe0 \u0111i\u1ec1u h\xe0nh \u0111\xe3 th\u1ef1c s\u1ef1 k\xfd k\u1ebft giao d\u1ecbch. \u0110i\u1ec1u n\xe0y r\u1ea5t \u0111\u01a1n gi\u1ea3n n\xean ch\xfang ta c\xf3 th\u1ec3 th\u1ef1c hi\u1ec7n n\xf3 on-chain m\xe0 kh\xf4ng c\u1ea7n h\xe0m tr\u1ee3 gi\xfap."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'traceIfFalse "operator signature missing" (txSignedBy info $ oOperator oracle)\n')),(0,l.kt)("p",null,"\u0110i\u1ec1u ti\u1ebfp theo c\u1ea7n ki\u1ec3m tra l\xe0 d\u1eef li\u1ec7u \u0111\u1ea7u ra. Ch\xfang t\xf4i bi\u1ebft r\u1eb1ng gi\xe1 tr\u1ecb c\xf3 th\u1ec3 thay \u0111\u1ed5i, nh\u01b0ng ch\xfang t\xf4i c\u1ea7n ki\u1ec3m tra xem \xedt nh\u1ea5t n\xf3 c\xf3 ph\u1ea3i l\xe0 ki\u1ec3u \u0111\xfang hay kh\xf4ng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'traceIfFalse "invalid output datum" validOutputDatum\n')),(0,l.kt)("p",null,"V\xe0 \u0111\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i \u0111\xe3 tham chi\u1ebfu \u0111\u1ebfn m\u1ed9t h\xe0m tr\u1ee3 gi\xfap m\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"validOutputDatum"),", ch\xednh n\xf3 s\u1eed d\u1ee5ng m\u1ed9t h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"outputDatum"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"outputDatum :: Maybe Integer\noutputDatum = oracleValue ownOutput (`findDatum` info)    \n\nvalidOutputDatum :: Bool\nvalidOutputDatum = isJust outputDatum\n")),(0,l.kt)("h2",{id:"ch\xfa-\xfd"},"Ch\xfa \xfd"),(0,l.kt)("p",null,"N\u1ebfu b\u1ea1n tra c\u1ee9u ",(0,l.kt)("inlineCode",{parentName:"p"},"findDatum"),"  trong REPL, B\u1ea1n s\u1ebd th\u1ea5y c\xf3 m\u1ed9t lo\u1ea1i n\xe0y ",(0,l.kt)("inlineCode",{parentName:"p"},"DatumHash -> TxInfo -> Maybe Datum"),". V\xec ch\xfang ta \u0111ang s\u1eed d\u1ee5ng infix \u1edf \u0111\xe2y, Ch\xfang ta c\xf3 th\u1ec3 chuy\u1ec3n v\xe0o ",(0,l.kt)("inlineCode",{parentName:"p"},"info"),"  d\u01b0\u1edbi d\u1ea1ng tham s\u1ed1 duy nh\u1ea5t, v\xe0 \u0111i\u1ec1u n\xe0y s\u1ebd d\u1eabn \u0111\u1ebfn to\xe0n b\u1ed9 bi\u1ec3u th\u1ee9c c\xf3 ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"DatumHash -> Maybe Datum"),", l\xe0 ki\u1ec3u m\xe0 ch\xfang ta c\u1ea7n chuy\u1ec3n v\xe0o",(0,l.kt)("inlineCode",{parentName:"p"},"oracleValue"),"."),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y ho\u1ea1t \u0111\u1ed9ng b\u1eb1ng c\xe1ch c\u1ed1 g\u1eafng l\u1ea5y gi\xe1 tr\u1ecb d\u1eef li\u1ec7u t\u1eeb b\u0103m d\u1eef li\u1ec7u v\xe0 sau \u0111\xf3 c\u1ed1 g\u1eafng t\u1ea1o gi\xe1 tr\u1ecb oracle t\u1eeb n\xf3. N\u1ebfu th\xe0nh c\xf4ng, n\xf3 s\u1ebd tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"Just Integer"),", ng\u01b0\u1ee3c l\u1ea1i n\xf3 s\u1ebd tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),", v\xec v\u1eady h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"validOutputDatum"),"  ch\u1ec9 c\u1ea7n ki\u1ec3m tra xem gi\xe1 tr\u1ecb tr\u1ea3 v\u1ec1 c\xf3 ph\u1ea3i ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),",hay l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Just"),"."),(0,l.kt)("p",null,"L\u01b0u \xfd r\u1eb1ng ch\xfang t\xf4i kh\xf4ng ki\u1ec3m tra b\u1ea5t k\u1ef3 \u0111i\u1ec1u g\xec v\u1ec1 gi\xe1 tr\u1ecb c\u1ee7a ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer"),". Gi\xe1 tr\u1ecb n\xe0y th\u1eadm ch\xed c\xf3 th\u1ec3 gi\u1eef nguy\xean nh\u01b0 gi\xe1 tr\u1ecb \u0111\u1ea7u v\xe0o, n\u1ebfu giao d\u1ecbch \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u1ec9 \u0111\u1ec3 thu ph\xed \u0111\xe3 t\xedch l\u0169y t\u1eeb vi\u1ec7c s\u1eed d\u1ee5ng oracle."),(0,l.kt)("p",null,"Tr\u01b0\u1eddng h\u1ee3p th\u1ee9 hai cho ",(0,l.kt)("inlineCode",{parentName:"p"},"mkOracleValidator"),"  l\xe0 tr\u01b0\u1eddng h\u1ee3p ",(0,l.kt)("inlineCode",{parentName:"p"},"use"),". Tr\u01b0\u1eddng h\u1ee3p n\xe0y ai c\u0169ng c\xf3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c nh\u01b0ng h\u1ea1n ch\u1ebf h\u01a1n r\u1ea5t nhi\u1ec1u."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i kh\xf4ng cho ph\xe9p gi\xe1 tr\u1ecb thay \u0111\u1ed5i. V\xec v\u1eady, \u0111\xe2y l\xe0 \u0111i\u1ec1u ki\u1ec7n \u0111\u1ea7u ti\xean."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'traceIfFalse "oracle value changed" (outputDatum == Just x)\n')),(0,l.kt)("p",null,"Ch\xfang t\xf4i \u0111\xe3 vi\u1ebft h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"outputDatum"),". Thay v\xec ch\u1ec9 ki\u1ec3m tra xem n\xf3 c\xf3 ph\u1ea3i l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer")," hay kh\xf4ng , \u1edf \u0111\xe2y ch\xfang ta c\u0169ng ki\u1ec3m tra xem gi\xe1 tr\u1ecb \u0111\u1ea7u ra c\u1ee7a n\xf3 c\xf3 gi\u1ed1ng v\u1edbi gi\xe1 tr\u1ecb \u0111\u1ea7u v\xe0o hay kh\xf4ng."),(0,l.kt)("p",null,"V\xe0 cu\u1ed1i c\xf9ng, ch\xfang ta ph\u1ea3i ki\u1ec3m tra xem c\xe1c kho\u1ea3n ph\xed \u0111\xe3 \u0111\u01b0\u1ee3c thanh to\xe1n hay ch\u01b0a. V\xe0 \u0111\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i s\u1eed d\u1ee5ng m\u1ed9t ch\u1ee9c n\u0103ng tr\u1ee3 gi\xfap m\u1edbi \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"feesPaid"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"feesPaid :: Bool\nfeesPaid =\n  let\n    inVal  = txOutValue ownInput\n    outVal = txOutValue ownOutput\n  in\n    outVal `geq` (inVal <> Ada.lovelaceValueOf (oFee oracle))    \n")),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"feesPaid")," ki\u1ec3m tra gi\xe1 tr\u1ecb \u0111\u1ea7u ra \xedt nh\u1ea5t b\u1eb1ng gi\xe1 tr\u1ecb \u0111\u1ea7u v\xe0o c\u1ed9ng v\u1edbi ph\xed b\u1eaft bu\u1ed9c. Ch\xfang t\xf4i l\u1ea1i s\u1eed d\u1ee5ng to\xe1n t\u1eed  ",(0,l.kt)("inlineCode",{parentName:"p"},"<>")," \u0111\u1ec3 c\u1ed9ng th\xeam fee v\xe0o gi\xe1 tr\u1ecb \u0111\u1ea7u v\xe0o. Ch\xfang t\xf4i c\xf3 th\u1ec3 \u0111\xe3 s\u1eed d\u1ee5ng b\u1eb1ng (eq) thay v\xec l\u1edbn h\u01a1n ho\u1eb7c b\u1eb1ng (geq). Vi\u1ec7c s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"geq"),"  ho ph\xe9p ng\u01b0\u1eddi d\xf9ng oracle \u0111\u01b0a cho nh\xe0 cung c\u1ea5p oracle m\u1ed9t m\u1eb9o, n\u1ebfu h\u1ecd mu\u1ed1n d\xf9ng."),(0,l.kt)("p",null,"V\xec v\u1eady, \u0111\xe2y v\u1ec1 c\u01a1 b\u1ea3n l\xe0 logic c\u1ed1t l\xf5i c\u1ee7a oracle nh\u01b0 \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong s\u01a1 \u0111\u1ed3 sau."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(1586).Z})),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta c\xf3 boilerplate c\u1ee7a ch\xfang ta. \u0110\u1eb7c bi\u1ec7t l\u01b0u \xfd r\u1eb1ng ch\xfang t\xf4i s\u1eed d\u1ee5ng m\u1eabu m\xe0 ch\xfang t\xf4i c\u1ea7n cho tr\xecnh x\xe1c th\u1ef1c \u0111\u01b0\u1ee3c tham s\u1ed1 h\xf3a."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"data Oracling\ninstance Scripts.ScriptType Oracling where\n    type instance DatumType Oracling = Integer\n    type instance RedeemerType Oracling = OracleRedeemer\n\noracleInst :: Oracle -> Scripts.ScriptInstance Oracling\noracleInst oracle = Scripts.validator @Oracling\n    ($$(PlutusTx.compile [|| mkOracleValidator ||]) `PlutusTx.applyCode` PlutusTx.liftCode oracle)\n    $$(PlutusTx.compile [|| wrap ||])\nwhere\n    wrap = Scripts.wrapValidator @Integer @OracleRedeemer\n\noracleValidator :: Oracle -> Validator\noracleValidator = Scripts.validatorScript . oracleInst\n\noracleAddress :: Oracle -> Ledger.Address\noracleAddress = scriptAddress . oracleValidator\n")),(0,l.kt)("p",null,"V\xe0 \u0111i\u1ec1u n\xe0y k\u1ebft th\xfac ph\u1ea7n on-chain c\u1ee7a m\xe3 oracle."),(0,l.kt)("h3",{id:"off-chain"},"Off-chain"),(0,l.kt)("p",null,"Ch\xfang t\xf4i c\u0169ng t\u1ea1o m\u1ed9t s\u1ed1 m\xe3 ngo\xe0i chu\u1ed7i, c\u1ee5 th\u1ec3 l\xe0 \u0111\u1ec3 b\u1eaft \u0111\u1ea7u ti\xean tri v\xe0 c\u1eadp nh\u1eadt n\xf3. Tuy nhi\xean, ch\xfang t\xf4i kh\xf4ng vi\u1ebft m\xe3 off-chain cho useoracle. \u0110\xf3 kh\xf4ng ph\u1ea3i l\xe0 tr\xe1ch nhi\u1ec7m c\u1ee7a t\xe1c gi\u1ea3 c\u1ee7a h\u1ee3p \u0111\u1ed3ng n\xe0y. \u0110\xf3 s\u1ebd l\xe0 tr\xe1ch nhi\u1ec7m c\u1ee7a ng\u01b0\u1eddi mu\u1ed1n s\u1eed d\u1ee5ng oracle - h\u1ecd s\u1ebd vi\u1ebft m\xe3 \u0111\u1ec3 t\u1ea1o giao d\u1ecbch v\u1edbi ng\u01b0\u1eddi \u0111\u1ed5i use. \u0110\xe2y l\xe0 l\u1ea7n \u0111\u1ea7u ti\xean ch\xfang t\xf4i th\u1ea5y tr\u01b0\u1eddng h\u1ee3p ch\xfang t\xf4i c\xf3 m\u1ed9t s\u1ed1 m\xe3 trong chu\u1ed7i kh\xf4ng \u0111\u01b0\u1ee3c gh\xe9p n\u1ed1i v\u1edbi m\u1ed9t s\u1ed1 m\xe3 ngo\xe0i chu\u1ed7i."),(0,l.kt)("h4",{id:"starting-the-oracle"},"Starting the Oracle"),(0,l.kt)("p",null,"\u0110\u1ec3 b\u1eaft \u0111\u1ea7u oracle, ch\xfang ta c\u1ea7n m\u1ed9t s\u1ed1 tham s\u1ed1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"data OracleParams = OracleParams\n    { opFees   :: !Integer\n    , opSymbol :: !CurrencySymbol\n    , opToken  :: !TokenName\n    } deriving (Show, Generic, FromJSON, ToJSON)    \n")),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"opFees"),"  tham s\u1ed1 \u0111\u1ea1i di\u1ec7n cho s\u1ed1 ph\xed lovelace \u0111\xf3 s\u1ebd \u0111\u01b0\u1ee3c t\xednh v\xe0o s\u1eed d\u1ee5ng oracle."),(0,l.kt)("p",null,"Tham s\u1ed1 ",(0,l.kt)("inlineCode",{parentName:"p"},"opSymbol"),"  v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"opToken"),"  \u0111\u1ea1i di\u1ec7n cho token\nm\xe0 ch\xfang t\xf4i \u0111ang cung c\u1ea5p t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i Ada, trong tr\u01b0\u1eddng h\u1ee3p n\xe0y l\xe0 token USD."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i t\u1ea1o m\u1ed9t h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"startOracle"),", c\xf3 tr\xe1ch nhi\u1ec7m t\u1ea1o ra NFT s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\xe1c \u0111\u1ecbnh UTxO oracle. C\xe1c h\xe0m",(0,l.kt)("inlineCode",{parentName:"p"},"startOracle"),"  n\xe0y s\u1ebd kh\xf4ng cung c\u1ea5p m\u1ed9t gi\xe1 tr\u1ecb ban \u0111\u1ea7u cho oracle, \u0111i\u1ec1u n\xe0y s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\xfd b\u1edfi c\xe1c h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle")," . L\xfd do cho \u0111i\u1ec1u n\xe0y l\xe0, n\u1ebfu ch\xfang t\xf4i cung c\u1ea5p m\u1ed9t gi\xe1 tr\u1ecb ban \u0111\u1ea7u, n\xf3 c\xf3 th\u1ec3 b\u1ecb l\u1ed7i th\u1eddi v\xe0o th\u1eddi \u0111i\u1ec3m NFT \u0111\u01b0\u1ee3c \u0111\xfac."),(0,l.kt)("p",null,"Ch\xfang t\xf4i c\xf3 th\u1ec3 \u0111\xe3 s\u1eed d\u1ee5ng c\xf9ng m\u1ed9t m\xe3 \u0111\u1ec3 \u0111\xfac NFT nh\u01b0 ch\xfang t\xf4i \u0111\xe3 s\u1eed d\u1ee5ng trong b\xe0i gi\u1ea3ng 5. \u0110i\u1ec1u n\xe0y s\u1ebd ho\u1ea1t \u0111\u1ed9ng ho\xe0n to\xe0n t\u1ed1t."),(0,l.kt)("p",null,"Tuy nhi\xean, \u0111\xe2y l\xe0 m\u1ed9t m\xf4-\u0111un ti\u1ec1n t\u1ec7 \u0111\u01b0\u1ee3c cung c\u1ea5p trong ",(0,l.kt)("inlineCode",{parentName:"p"},"plutus-use-cases")," c\xe1i m\xe0 cung c\u1ea5p h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"forgeContract"),"  cho ph\xe9p t\u1ea1o NFT"),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"forgeContract"),"  hi\u1ec7n th\u1ecb trong REPL."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Prelude Week06.Oracle.Core> :t Plutus.Contracts.Currency.forgeContract\nPlutus.Contracts.Currency.forgeContract\n  :: (row-types-1.0.1.0:Data.Row.Internal.AllUniqueLabels\n        (Plutus.Contract.Schema.Input s),\n      row-types-1.0.1.0:Data.Row.Internal.AllUniqueLabels\n        (Plutus.Contract.Schema.Output s),\n      Plutus.Contracts.Currency.AsCurrencyError e,\n      (Plutus.Contract.Schema.Input s\n       row-types-1.0.1.0:Data.Row.Internal..! "tx-confirmation")\n      ~ Plutus.Contract.Effects.AwaitTxConfirmed.TxConfirmed,\n      (Plutus.Contract.Schema.Input s\n       row-types-1.0.1.0:Data.Row.Internal..! "tx")\n      ~ Plutus.Contract.Effects.WriteTx.WriteTxResponse,\n      (Plutus.Contract.Schema.Output s\n       row-types-1.0.1.0:Data.Row.Internal..! "tx")\n      ~ Ledger.Constraints.OffChain.UnbalancedTx,\n      (Plutus.Contract.Schema.Output s\n       row-types-1.0.1.0:Data.Row.Internal..! "tx-confirmation")\n      ~ Plutus.V1.Ledger.TxId.TxId) =>\n     Plutus.V1.Ledger.Crypto.PubKeyHash\n     -> [(Plutus.V1.Ledger.Value.TokenName, Integer)]\n     -> Plutus.Contract.Types.Contract\n          w s e Plutus.Contracts.Currency.OneShotCurrency\n')),(0,l.kt)("p",null,"Ph\u1ea7n quan tr\u1ecdng b\u1eaft \u0111\u1ea7u v\u1ec1 ph\xeda cu\u1ed1i, n\u01a1i m\xe0 tham s\u1ed1 \u0111\u1ea7u ti\xean - c\u1ee7a ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"PubKeyHash"),"  - \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a. \u0110\xe2y l\xe0 b\u0103m c\u1ee7a kh\xf3a c\xf4ng khai c\u1ee7a ng\u01b0\u1eddi nh\u1eadn NFT."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"forgeContract"),"  ung c\u1ea5p ch\u1ee9c n\u0103ng t\u1ed5ng qu\xe1t h\u01a1n h\u1ee3p \u0111\u1ed3ng NFT tr\u01b0\u1edbc c\u1ee7a ch\xfang t\xf4i. N\xf3 cho ph\xe9p t\u1ea1o nhi\u1ec1u NFT trong m\u1ed9t l\u1ea7n. N\xf3 s\u1ebd t\u1ea1o ra m\u1ed9t k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7 ch\u1ec9 c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng m\u1ed9t, t\u01b0\u01a1ng t\u1ef1 nh\u01b0 NFT c\u1ee7a ch\xfang t\xf4i t\u1eeb l\u1ea7n tr\u01b0\u1edbc, v\xec v\u1eady ch\u1ec9 c\xf3 th\u1ec3 c\xf3 m\u1ed9t giao d\u1ecbch \u0111\xfac ti\u1ec1n. Nh\u01b0ng \u0111\u1ed1i v\u1edbi m\u1ed9t bi\u1ec3u t\u01b0\u1ee3ng ti\u1ec1n t\u1ec7, b\u1ea1n c\xf3 th\u1ec3 \u0111\xfac nhi\u1ec1u m\xe3 th\xf4ng b\xe1o kh\xe1c nhau trong c\xf9ng m\u1ed9t giao d\u1ecbch, v\u1edbi nhi\u1ec1u t\xean m\xe3 th\xf4ng b\xe1o kh\xe1c nhau v\xe0 v\u1edbi s\u1ed1 l\u01b0\u1ee3ng kh\xe1c nhau. Tham s\u1ed1 th\u1ee9 hai cho ph\xe9p ch\xfang t\xf4i x\xe1c \u0111\u1ecbnh c\xe1c t\xean v\xe0 s\u1ed1 l\u01b0\u1ee3ng m\xe3 th\xf4ng b\xe1o n\xe0y."),(0,l.kt)("p",null,"V\xe0 n\xf3 cho ch\xfang ta m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Contract"),"  n\xf3 tr\u1ea3 v\u1ec1 m\u1ed9t gia tr\u1ecb ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"OneShotCurrency"),". Lo\u1ea1i n\xe0y d\xe0nh ri\xeang cho ti\u1ec1n t\u1ec7 v\xe0 n\xf3 kh\xf4ng th\u1ef1c s\u1ef1 quan tr\u1ecdng \u0111\u1ed1i v\u1edbi ch\xfang t\xf4i. T\u1ea5t c\u1ea3 nh\u1eefng g\xec quan tr\u1ecdng \u0111\u1ed1i v\u1edbi ch\xfang t\xf4i l\xe0 ch\xfang t\xf4i c\xf3 th\u1ec3 l\u1ea5y l\u1ea1i bi\u1ec3u t\u01b0\u1ee3ng ti\u1ec1n t\u1ec7 t\u1eeb n\xf3."),(0,l.kt)("p",null,"C\xf3 m\u1ed9t v\u1ea5n \u0111\u1ec1 nh\u1ecf. \u0110i\u1ec1u n\xe0y kh\xf4ng t\u01b0\u01a1ng th\xedch v\u1edbi nh\u1eefng g\xec ch\xfang t\xf4i mu\u1ed1n. Ch\xfang t\xf4i mu\u1ed1n c\xe1c lo\u1ea1i n\xe0y"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Contract w s Text Oracle\n")),(0,l.kt)("p",null,"M\u1ed9t ki\u1ec3u ng\u01b0\u1eddi vi\u1ebft t\xf9y \xfd (v\xec ch\xfang ta kh\xf4ng s\u1eed d\u1ee5ng n\xf3), m\u1ed9t l\u01b0\u1ee3c \u0111\u1ed3 t\xf9y \xfd (mi\u1ec5n l\xe0 ch\xfang ta c\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"BlockChainActions")," s\u1eb5n), ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," th\xf4ng b\xe1o l\u1ed7i v\xe0 ki\u1ec3u tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"Oracle"),"."),(0,l.kt)("p",null,"V\u1ea5n \u0111\u1ec1 l\xe0 gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"Contract")," tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"forgeContract")," kh\xf4ng cho ph\xe9p ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," th\xf4ng b\xe1o l\u1ed7i. B\u1ea1n c\xf3 th\u1ec3 th\u1ea5y \u0111i\u1ec1u n\xe0y trong \u0111\u1ea7u ra chi ti\u1ebft t\u1eeb REPL - c\xf3 m\u1ed9t r\xe0ng bu\u1ed9c \u0111\u1ed1i v\u1edbi tham s\u1ed1 ",(0,l.kt)("inlineCode",{parentName:"p"},"e"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Plutus.Contracts.Currency.AsCurrencyError e,\n")),(0,l.kt)("p",null,"Th\u1eadt kh\xf4ng may l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," kh\xf4ng th\u1ef1c hi\u1ec7n ",(0,l.kt)("inlineCode",{parentName:"p"},"AsCurrencyError"),"."),(0,l.kt)("p",null,"May m\u1eafn thay, c\xf3 m\u1ed9t h\xe0m c\xf3 th\u1ec3 tr\u1ee3 gi\xfap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Plutus.Contract.mapError\n:: (e -> e')\n   -> Plutus.Contract.Types.Contract w s e a\n   -> Plutus.Contract.Types.Contract w s e' a\n")),(0,l.kt)("p",null,"V\u1edbi m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Contract"),", n\xf3 cho ph\xe9p ch\xfang t\xf4i t\u1ea1o m\u1edbi m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Contract"),"  v\u1edbi m\u1ed9t lo\u1ea1i th\xf4ng b\xe1o l\u1ed7i m\u1edbi.\u0110i\u1ec1u \u0111\xf3 \u0111\u01b0\u1ee3c cung c\u1ea5p, ch\xfang t\xf4i cung c\u1ea5p m\u1ed9t h\xe0m chuy\u1ec3n \u0111\u1ed5i t\u1eeb lo\u1ea1i l\u1ed7i \u0111\u1ea7u ti\xean sang lo\u1ea1i l\u1ed7i th\u1ee9 hai."),(0,l.kt)("p",null,"V\xec v\u1eady, ch\xfang ta h\xe3y nh\xecn v\xe0o h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"startOracle"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'startOracle :: forall w s. HasBlockchainActions s => OracleParams -> Contract w s Text Oracle\nstartOracle op = do\n    pkh <- pubKeyHash <$> Contract.ownPubKey\n    osc <- mapError (pack . show) (forgeContract pkh [(oracleTokenName, 1)] :: Contract w s CurrencyError OneShotCurrency)\n    let cs     = Currency.currencySymbol osc\n        oracle = Oracle\n            { oSymbol   = cs\n            , oOperator = pkh\n            , oFee      = opFees op\n            , oAsset    = AssetClass (opSymbol op, opToken op)\n            }\n    logInfo @String $ "started oracle " ++ show oracle\n    return oracle\n')),(0,l.kt)("p",null,"\u1ede \u0111\xe2y ch\xfang ta th\u1ea5y h\xe0m chuy\u1ec3n \u0111\u1ed5i l\u1ed7i \u0111\u01b0\u1ee3c cung c\u1ea5p d\u01b0\u1edbi d\u1ea1ng  ",(0,l.kt)("inlineCode",{parentName:"p"},"pack . show"),".\nH\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"show"),"  chuy\u1ec3n \u0111\u1ed5i l\u1ed7i cho m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"String"),"  v\xe0 h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"pack"),"\nchuy\u1ec3n \u0111\u1ed5 m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"String"),"  t\u1edbi m\u1ed9t ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"Data.Text"),"."),(0,l.kt)("p",null,"T\u1ea1i th\u1eddi \u0111i\u1ec3m n\xe0y ",(0,l.kt)("inlineCode",{parentName:"p"},"osc"),"  gi\u1eef  ",(0,l.kt)("inlineCode",{parentName:"p"},"OneShotCurrency"),", V\xe0 ch\xfang ta c\xf3 th\u1ec3 s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"currencySymbol"),"  \u0111\u1ec3 l\u1ea5y k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7 nh\u01b0",(0,l.kt)("inlineCode",{parentName:"p"},"cs"),"."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"currencySymbol"),"  c\xf3 ki\u1ec3u:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"currencySymbol\n      :: OneShotCurrency -> Plutus.V1.Ledger.Value.CurrencySymbol\n")),(0,l.kt)("p",null,"v\xe0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\xf9 h\u1ee3p"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"let cs = Currency.currencySymbol osc\n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang t\xf4i \u0111\xe3 \u0111\xfac NFT c\u1ee7a m\xecnh v\xe0 n\xf3 c\xf3 k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7 ",(0,l.kt)("inlineCode",{parentName:"p"},"cs"),". \xe0 b\xe2y gi\u1edd ch\xfang ta c\xf3 th\u1ec3 x\xe2y d\u1ef1ng gi\xe1 tr\u1ecb tham s\u1ed1 ",(0,l.kt)("inlineCode",{parentName:"p"},"Oracle"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"oracle = Oracle\n    { oSymbol   = cs\n    , oOperator = pkh\n    , oFee      = opFees op\n    , oAsset    = AssetClass (opSymbol op, opToken op)\n    }\n")),(0,l.kt)("p",null,"l\xfd do l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"opSymbol"),"  v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"opToken")," \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a ri\xeang trong ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"OracleParams"),".  ",(0,l.kt)("inlineCode",{parentName:"p"},"op"),"  h\u1ec9 l\xe0 \u0111i\u1ec1u n\xe0y l\xe0m cho vi\u1ec7c n\xe0y tr\u1edf n\xean d\u1ec5 d\xe0ng h\u01a1n khi ch\xfang ta s\u1eed d\u1ee5ng playground."),(0,l.kt)("h4",{id:"updating-the-oracle"},"Updating the Oracle"),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle"),"  l\xe0 ph\u1ee9c t\u1ea1p h\u01a1n."),(0,l.kt)("p",null,"Ch\u1ee9c n\u0103ng n\xe0y ph\u1ea3i x\u1eed l\xfd hai tr\u01b0\u1eddng h\u1ee3p. C\u1ee5 th\u1ec3 l\xe0 tr\u01b0\u1eddng h\u1ee3p ch\xfang t\xf4i c\xf3 m\u1ed9t gi\xe1 tr\u1ecb m\xe0 ch\xfang t\xf4i mu\u1ed1n c\u1eadp nh\u1eadt v\xe0 tr\u01b0\u1eddng h\u1ee3p 2 ch\xfang t\xf4i m\u1edbi b\u1eaft \u0111\u1ea7u t\u1ea1o oracle v\xe0 ch\xfang t\xf4i mu\u1ed1n t\u1ea1o m\u1ed9t gi\xe1 tr\u1ecb l\u1ea7n \u0111\u1ea7u ti\xean."),(0,l.kt)("p",null,"N\xf3 l\u1ea5y c\xe1c tham s\u1ed1 oracle and ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer")," gi\xe1 tr\u1ecb m\xe0 ch\xfang t\xf4i mu\u1ed1n c\xf3 oracle gi\u1eef."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i t\u1ea1o m\u1ed9t ch\u1ee9c n\u0103ng tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"findOracle"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"findOracle :: forall w s. HasBlockchainActions s => Oracle -> Contract w s Text (Maybe (TxOutRef, TxOutTx, Integer))\nfindOracle oracle = do\n    utxos <- Map.filter f <$> utxoAt (oracleAddress oracle)\n    return $ case Map.toList utxos of\n        [(oref, o)] -> do\n            x <- oracleValue (txOutTxOut o) $ \\dh -> Map.lookup dh $ txData $ txOutTxTx o\n            return (oref, o, x)\n        _           -> Nothing\n  where\n    f :: TxOutTx -> Bool\n    f o = assetClassValueOf (txOutValue $ txOutTxOut o) (oracleAsset oracle) == 1\n")),(0,l.kt)("p",null,"Muchj \u0111\xedch c\u1ee7a ",(0,l.kt)("inlineCode",{parentName:"p"},"findOracle"),"  l\xe0 \u0111\u1ec3 tra c\u1ee9u UTxO oracle hi\u1ec7n c\xf3. \u0110i\u1ec1u n\xe0y c\xf3 th\u1ec3 kh\xf4ng th\xe0nh c\xf4ng v\xec c\xf3 th\u1ec3 kh\xf4ng c\xf3 ti\xean tri \u1edf \u0111\xf3. \u0110i\u1ec1u n\xe0y s\u1ebd x\u1ea3y ra n\u1ebfu ch\xfang ta m\u1edbi b\u1eaft \u0111\u1ea7u oracles v\xe0 ch\u01b0a t\u1ea1o UTxO v\u1edbi gi\xe1 tr\u1ecb oracle. Tuy nhi\xean, n\u1ebfu ch\xfang t\xf4i t\xecm th\u1ea5y n\xf3, ch\xfang t\xf4i tr\u1ea3 v\u1ec1 m\u1ed9t b\u1ed9 ba ch\u1ee9a m\xe3 nh\u1eadn d\u1ea1ng UTxO (TxOutRef), ch\xednh UTxO, ch\u1ee9a t\u1ea5t c\u1ea3 d\u1eef li\u1ec7u (TxOutTx) v\xe0 gi\xe1 tr\u1ecb oracle (t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i hi\u1ec7n t\u1ea1i do oracle n\u1eafm gi\u1eef). C\xe1c ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer")," ch\u1ee9a gi\xe1 tr\u1ecb oracle \u0111\u01b0\u1ee3c m\xe3 h\xf3a c\u0169ng trong gi\xe1 tr\u1ecb TxOutTx, nh\u01b0ng ch\xfang t\xf4i th\xeam n\xf3 v\xe0o ba \u0111\u1ec3 l\xe0m cho n\xf3 d\u1ec5 d\xe0ng h\u01a1n \u0111\u1ec3 l\xe0m vi\u1ec7c v\u1edbi."),(0,l.kt)("p",null,"\u0110i\u1ec1u \u0111\u1ea7u ti\xean ch\xfang t\xf4i l\xe0m l\xe0 l\u1ea5y t\u1ea5t c\u1ea3 c\xe1c UTxO \u1edf \u0111\u1ecba ch\u1ec9 n\xe0y. Nh\u01b0ng ch\u1ec9 m\u1ed9t trong s\u1ed1 n\xe0y s\u1ebd l\xe0 th\u1ee9 m\xe0 ch\xfang t\xf4i \u0111ang t\xecm ki\u1ebfm - c\xe1i c\xf3 ch\u1ee9a NFT."),(0,l.kt)("p",null,"Ch\xfang t\xf4i th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\xe0y b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"Map.filter"),"  nh\u1eadn m\u1ed9t h\xe0m l\xe0m tham s\u1ed1, trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, tr\u1ea3 v\u1ec1 True cho UTxO n\u01a1i NFT hi\u1ec7n di\u1ec7n."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"utxos <- Map.filter f <$> utxoAt (oracleAddress oracle)\n...\nwhere\n  f :: TxOutTx -> Bool\n  f o = assetClassValueOf (txOutValue $ txOutTxOut o) (oracleAsset oracle) == 1    \n")),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd k\u1ebft th\xfac v\u1edbi m\u1ed9t map ",(0,l.kt)("inlineCode",{parentName:"p"},"utxos")," tr\u1ed1ng ho\u1eb7c ch\u1ee9a m\u1ed9t m\u1ee5c. B\xe2y gi\u1edd, ch\xfang ta ph\xe2n bi\u1ec7t gi\u1eefa hai tr\u01b0\u1eddng h\u1ee3p n\xe0y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"return $ case Map.toList utxos of\n    [(oref, o)] -> do\n        x <- oracleValue (txOutTxOut o) $ \\dh -> Map.lookup dh $ txData $ txOutTxTx o\n        return (oref, o, x)\n    _           -> Nothing\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i chuy\u1ec3n \u0111\u1ed5i b\u1ea3n \u0111\u1ed3 th\xe0nh danh s\xe1ch c\xe1c b\u1ed9 gi\xe1 tr\u1ecb \u0111\u1ea1i di\u1ec7n cho c\xe1c c\u1eb7p gi\xe1 tr\u1ecb quan tr\u1ecdng c\u1ee7a id giao d\u1ecbch v\xe0 ch\xednh c\xe1c giao d\u1ecbch."),(0,l.kt)("p",null,"\u0110\u1ed1i v\u1edbi tr\u01b0\u1eddng h\u1ee3p kh\xf4ng c\xf3 ph\u1ea7n t\u1eed, ch\xfang t\xf4i s\u1eed d\u1ee5ng tr\u01b0\u1eddng h\u1ee3p _ \u0111\u1ec3 \u0111\u1ea1i di\u1ec7n cho t\u1ea5t c\u1ea3 c\xe1c tr\u01b0\u1eddng h\u1ee3p kh\xe1c. \u0110\xe2y ch\u1ec9 c\xf3 th\u1ec3 l\xe0 danh s\xe1ch tr\u1ed1ng, nh\u01b0ng tr\xecnh bi\xean d\u1ecbch kh\xf4ng bi\u1ebft \u0111i\u1ec1u \u0111\xf3."),(0,l.kt)("p",null,"Tuy nhi\xean, n\u1ebfu ch\xfang t\xf4i \u0111\xe3 t\xecm th\u1ea5y UTxO, th\xec v\xec ch\xfang t\xf4i \u0111\xe3 c\xf3 id v\xe0 giao d\u1ecbch c\u1ee7a n\xf3, ch\xfang t\xf4i ch\u1ec9 c\u1ea7n t\xecm ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer")," gi\xe1 tr\u1ecb c\u1ee7a n\xf3 . Ph\u1ea7n n\xe0y v\u1eabn c\xf3 th\u1ec3 sai. M\u1eb7c d\xf9 ch\xfang t\xf4i \u0111\xe3 t\xecm th\u1ea5y \u0111\xfang UTxO, nh\u01b0ng c\xf3 th\u1ec3 c\xf3 m\u1ed9t s\u1ed1 d\u1eef li\u1ec7u b\u1ecb h\u1ecfng trong \u0111\xf3 v\xec b\u1ea5t k\u1ef3 l\xfd do g\xec."),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleValue")," m\xe0 ch\xfang t\xf4i c\u0169ng \u0111\xe3 s\u1eed d\u1ee5ng \u0111\u1ec3 x\xe1c th\u1ef1c. H\xe0m n\xe0y nh\u1eadn m\u1ed9t tham s\u1ed1 ",(0,l.kt)("inlineCode",{parentName:"p"},"TxOut")," theo sau l\xe0 m\u1ed9t tham s\u1ed1 th\u1ee9 hai l\xe0 m\u1ed9t h\xe0m, \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1ed9t h\xe0m b\u0103m d\u1eef li\u1ec7u s\u1ebd tr\u1ea3 v\u1ec1 gi\xe1 tr\u1ecb d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c li\xean k\u1ebft."),(0,l.kt)("p",null,"Trong m\xe3 off-chain, ch\xfang ta c\xf3 th\u1ec3 s\u1eed d\u1ee5ng tham s\u1ed1 h\xe0m sau"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"\\dh -> Map.lookup dh $ txData $ txOutTxTx o\n")),(0,l.kt)("p",null,"\u0110\xe2y ",(0,l.kt)("inlineCode",{parentName:"p"},"txData"),"  l\xe0 m\u1ed9t tr\u01b0\u1eddng c\u1ee7a giao d\u1ecbch v\xe0 n\xf3 l\xe0 m\u1ed9t map t\u1eeb h\xe0m b\u0103m datum. Ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c giao d\u1ecbch t\u1eeb ",(0,l.kt)("inlineCode",{parentName:"p"},"txOutTxTx o"),"."),(0,l.kt)("p",null,"N\u1ebfu t\u1ea5t c\u1ea3 \u0111i\u1ec1u n\xe0y th\xe0nh c\xf4ng, khi n\xe0o s\u1ebd tr\u1ea3 v\u1ec1 b\u1ed9 ba ",(0,l.kt)("inlineCode",{parentName:"p"},"(oref, o, x)"),",trong \u0111\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"x")," l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer"),"  gi\xe1 tr\u1ecb c\u1ee7a oracle."),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta \u0111\xe3 vi\u1ebft h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"findOracle"),". h\xfang ta c\xf3 th\u1ec3 nh\xecn v\xe0o h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'updateOracle :: forall w s. HasBlockchainActions s => Oracle -> Integer -> Contract w s Text ()\nupdateOracle oracle x = do\n    m <- findOracle oracle\n    let c = Constraints.mustPayToTheScript x $ assetClassValue (oracleAsset oracle) 1\n    case m of\n        Nothing -> do\n            ledgerTx <- submitTxConstraints (oracleInst oracle) c\n            awaitTxConfirmed $ txId ledgerTx\n            logInfo @String $ "set initial oracle value to " ++ show x\n        Just (oref, o,  _) -> do\n            let lookups = Constraints.unspentOutputs (Map.singleton oref o)     <>\n                          Constraints.scriptInstanceLookups (oracleInst oracle) <>\n                          Constraints.otherScript (oracleValidator oracle)\n                tx      = c <> Constraints.mustSpendScriptOutput oref (Redeemer $ PlutusTx.toData Update)\n            ledgerTx <- submitTxConstraintsWith @Oracling lookups tx\n            awaitTxConfirmed $ txId ledgerTx\n            logInfo @String $ "updated oracle value to " ++ show x\n')),(0,l.kt)("p",null,"sau \u0111\xf3 nh\xecn h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"findOracle"),"  h\xe0m tr\u1ee3 gi\xfap, v\xec ch\xfang ta s\u1ebd c\u1ea7n r\xe0ng bu\u1ed9c n\xe0y hai l\u1ea7n."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"let c = Constraints.mustPayToTheScript x $ assetClassValue (oracleAsset oracle) 1\n")),(0,l.kt)("p",null,"Sau khi t\xecm ki\u1ebfm ti\xean tri, c\xf3 r\u1ea5t nhi\u1ec1u kh\u1ea3 n\u0103ng x\u1ea3y ra - ch\xfang t\xf4i \u0111\xe3 t\xecm th\u1ea5y n\xf3 ho\u1eb7c ch\xfang t\xf4i \u0111\xe3 kh\xf4ng."),(0,l.kt)("p",null,"N\u1ebfu ch\xfang t\xf4i kh\xf4ng t\xecm th\u1ea5y n\xf3, th\xec ch\xfang t\xf4i \u0111\xe3 b\u1eaft \u0111\u1ea7u ti\xean tri nh\u01b0ng ch\xfang t\xf4i ch\u01b0a cung c\u1ea5p gi\xe1 tr\u1ecb ban \u0111\u1ea7u. \u0110\xe2y l\xe0 tr\u01b0\u1eddng h\u1ee3p \u0111\u1ea7u ti\xean. V\xe0 trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, t\u1ea5t c\u1ea3 nh\u1eefng g\xec ch\xfang ta ph\u1ea3i l\xe0m l\xe0 g\u1eedi m\u1ed9t giao d\u1ecbch t\u1ea1o ra gi\xe1 tr\u1ecb \u0111\u1ea7u ti\xean cho oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'ledgerTx <- submitTxConstraints (oracleInst oracle) c\nawaitTxConfirmed $ txId ledgerTx\nlogInfo @String $ "set initial oracle value to " ++ show x\n')),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 c\xe1ch s\u1eed d\u1ee5ng \u0111\u1ea7u ti\xean c\u1ee7a h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," . N\xf3 cung c\u1ea5p r\xe0ng bu\u1ed9c ",(0,l.kt)("inlineCode",{parentName:"p"},"mustPayToTheScript"),"  \u0111\u1ea3m b\u1ea3o r\u1eb1ng giao d\u1ecbch s\u1ebd c\xf3 \u0111\u1ea7u ra tr\u1ea3 cho m\u1ed9t \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh. L\xe0 c\xe1c \u0111\u1ed1i s\u1ed1, n\xf3 l\u1ea5y datum ",(0,l.kt)("inlineCode",{parentName:"p"},"x"),"  v\xe0 NFT. T\u1eadp l\u1ec7nh m\xe0 n\xf3 ph\u1ea3i tr\u1ea3 ti\u1ec1n lu\xf4n l\xe0 t\u1eadp l\u1ec7nh n\u1eb1m trong ti\xeau \u0111i\u1ec3m - \u1edf \u0111\xe2y n\xf3 l\xe0 tham s\u1ed1 \u0111\u1ea7u ti\xean \u0111\u1ebfn ",(0,l.kt)("inlineCode",{parentName:"p"},"submitTxConstraints"),"  - ",(0,l.kt)("inlineCode",{parentName:"p"},"(oracleInst oracle)"),"."),(0,l.kt)("p",null,"Sau \u0111\xf3 ch\xfang t\xf4i ch\u1edd x\xe1c nh\u1eadn v\xe0 vi\u1ebft th\xf4ng b\xe1o nh\u1eadt k\xfd. V\xe0 \u0111\xe2y l\xe0 t\u1ea5t c\u1ea3 nh\u1eefng g\xec ch\xfang ta c\u1ea7n l\xe0m cho tr\u01b0\u1eddng h\u1ee3p n\xe0y."),(0,l.kt)("p",null,"Trong tr\u01b0\u1eddng h\u1ee3p kh\xe1c, khi ch\xfang t\xf4i \u0111\xe3 c\xf3 m\u1ed9t gi\xe1 tr\u1ecb, ch\xfang t\xf4i c\u1ea7n tham chi\u1ebfu \u0111\u1ebfn c\xe1c ph\u1ea7n UTxO, nh\u01b0ng ch\xfang t\xf4i kh\xf4ng quan t\xe2m \u0111\u1ebfn d\u1eef li\u1ec7u hi\u1ec7n t\u1ea1i, v\xec ch\xfang t\xf4i v\u1eabn s\u1ebd c\u1eadp nh\u1eadt n\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Just (oref, o,  _) -> do\n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd n\xf3 tr\u1edf n\xean ph\u1ee9c t\u1ea1p h\u01a1n m\u1ed9t ch\xfat, b\u1edfi v\xec b\xe2y gi\u1edd ch\xfang ta c\u1ea7n hai \u0111i\u1ec1u ki\u1ec7n."),(0,l.kt)("p",null,"R\xe0ng bu\u1ed9c \u0111\u1ea7u ti\xean c\u0169ng gi\u1ed1ng nh\u01b0 trong tr\u01b0\u1eddng h\u1ee3p kh\xe1c - r\xe0ng bu\u1ed9c \u0111\u01b0\u1ee3c tham chi\u1ebfu b\u1edfi h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"c"),". Nh\u01b0ng b\xe2y gi\u1edd c\xf3 m\u1ed9t h\u1ea1n ch\u1ebf b\u1ed5 sung l\xe0 ch\xfang ta c\u0169ng ph\u1ea3i s\u1eed d\u1ee5ng UTxO hi\u1ec7n c\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"tx = c <> Constraints.mustSpendScriptOutput oref (Redeemer $ PlutusTx.toData Update)\n")),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"mustSpendScriptOutput"),"  c\u01a1 b\u1ea3n l\xe0 tr\xe1i ng\u01b0\u1ee3c v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"mustPayToTheScript"),". ItN\xf3 t\u1ea1o ra m\u1ed9t \u0111\u1ea7u v\xe0o cho \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh n\xe0y. V\xec c\xe1c tham s\u1ed1, n\xf3 c\xf3 tham chi\u1ebfu \u0111\u1ebfn UTxO m\xe0 ch\xfang ta mu\u1ed1n s\u1eed d\u1ee5ng, v\xe0 n\xf3 c\u1ea7n m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Redeemer"),". Trong tr\u01b0\u1eddng h\u1ee3p ",(0,l.kt)("inlineCode",{parentName:"p"},"Redeemer"),"  l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Update"),"  n\xf3 \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i th\xe0nh ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"Data"),"  trong Plutus."),(0,l.kt)("p",null,"\u0110\u1ec3 \u0111i\u1ec1u n\xe0y ho\u1ea1t \u0111\u1ed9ng, ch\xfang t\xf4i c\u1ea7n cung c\u1ea5p m\u1ed9t s\u1ed1 tra c\u1ee9u."),(0,l.kt)("p",null,"Nh\u1eb1m m\u1ee5c \u0111\xedch t\xecm \u0111\u1ea7u ra ",(0,l.kt)("inlineCode",{parentName:"p"},"oref"),"  m\xe0 n\xf3 mu\u1ed1n chi ti\xeau, ch\xfang ta ph\u1ea3i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"unspentOutputs"),"  tra c\u1ee9u v\xe0 trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, ch\xfang ta ch\u1ec9 cung c\u1ea5p tra c\u1ee9u b\u1eb1ng m\u1ed9t UTxO."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Constraints.unspentOutputs (Map.singleton oref o)\n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i ph\u1ea3i cung c\u1ea5p c\xe1c phi\xean b\u1ea3n script. Ch\xfang ta c\u1ea7n l\xe0m \u0111i\u1ec1u n\xe0y hai l\u1ea7n, m\u1ed9t l\u1ea7n cho ph\xeda \u0111\u1ea7u v\xe0o v\xe0 m\u1ed9t l\u1ea7n cho ph\xeda \u0111\u1ea7u ra. \u0110\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i cung c\u1ea5p phi\xean b\u1ea3n oracle v\xe0 tr\xecnh x\xe1c th\u1ef1c oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Constraints.scriptInstanceLookups (oracleInst oracle) <>\nConstraints.otherScript (oracleValidator oracle)\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i kh\xf4ng c\u1ea7n cung c\u1ea5p ",(0,l.kt)("inlineCode",{parentName:"p"},"scriptInstanceLookups"),"  tra c\u1ee9u trong tr\u01b0\u1eddng h\u1ee3p \u0111\u1ea7u ti\xean, v\xec ch\xfang t\xf4i c\xf3 th\u1ec3 chuy\u1ec3n ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleInst oracle"),"  \u0111\u1ebfn h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"submitTxConstraints"),". Tuy nhi\xean, v\u1edbi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"submitTxConstraintsWith")," th\xec ch\xfang ta kh\xf4ng c\xf3 t\xf9y ch\u1ecdn \u0111\xf3."),(0,l.kt)("p",null,"Khi g\u1eedi giao d\u1ecbch, ch\xfang ta c\u1ea7n th\xfac \u0111\u1ea9y tr\xecnh bi\xean d\u1ecbch m\u1ed9t ch\xfat \u0111\u1ec3 cho n\xf3 bi\u1ebft script m\xe0 ch\xfang ta \u0111ang n\xf3i \u0111\u1ebfn - \u0111\u1ec3 n\xf3 bi\u1ebft, ch\u1eb3ng h\u1ea1n nh\u01b0 The Script \u1edf trong ",(0,l.kt)("inlineCode",{parentName:"p"},"mustPayToTheScript"),".  \u0110\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i tham kh\u1ea3o lo\u1ea1i ",(0,l.kt)("inlineCode",{parentName:"p"},"Oracling"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"ledgerTx <- submitTxConstraintsWith @Oracling lookups tx\n")),(0,l.kt)("p",null,"Hy v\u1ecdng r\u1eb1ng b\xe2y gi\u1edd ch\xfang ta c\xf3 m\u1ed9t giao d\u1ecbch h\u1ee3p l\u1ec7 \u0111\u01b0\u1ee3c g\u1eedi \u0111i, v\xe0 sau \u0111\xf3 ch\xfang ta \u0111\u1ee3i n\xf3 \u0111\u01b0\u1ee3c x\xe1c nh\u1eadn v\xe0 vi\u1ebft m\u1ed9t s\u1ed1 th\xf4ng tin ghi nh\u1eadt k\xfd."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'awaitTxConfirmed $ txId ledgerTx\nlogInfo @String $ "updated oracle value to " ++ show x\n')),(0,l.kt)("p",null,"H\xe3y nh\u1edb r\u1eb1ng, ch\xfang ta \u0111\xe3 n\xf3i v\u1ec1 vi\u1ec7c thu ph\xed tr\u01b0\u1edbc \u0111\xf3. \u0110i\u1ec1u n\xe0y s\u1ebd t\u1ef1 \u0111\u1ed9ng x\u1ea3y ra. H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"submitTxConstraintsWith")," s\u1ebd g\u1eedi ph\xed \u0111\u1ebfn v\xed c\u1ee7a ch\xednh ch\xfang ta. N\xf3 l\xe0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u n\xe0y b\u1edfi v\xec c\xf3 s\u1ef1 m\u1ea5t c\xe2n b\u1eb1ng gi\u1eefa gi\xe1 tr\u1ecb g\u1eafn v\u1edbi \u0111\u1ea7u v\xe0o, bao g\u1ed3m ph\xed v\xe0 NFT, v\xe0 gi\xe1 tr\u1ecb m\xe0 ch\xfang t\xf4i \u0111\xe3 n\xf3i ph\u1ea3i \u0111\u01b0\u1ee3c tr\u1ea3 cho t\u1eadp l\u1ec7nh, \u0111\xf3 ch\u1ec9 l\xe0 NFT."),(0,l.kt)("p",null,"Qu\xe1 tr\xecnh n\xe0y c\u0169ng s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u1ea1o th\xeam m\u1ed9t \u0111\u1ea7u v\xe0o t\u1eeb \u0111\u1ea7u v\xe0o c\u1ee7a ch\xednh ch\xfang ta \u0111\u1ec3 tr\u1ea3 ph\xed giao d\u1ecbch cho vi\u1ec7c th\u1ef1c hi\u1ec7n giao d\u1ecbch."),(0,l.kt)("p",null,"Cu\u1ed1i c\xf9ng, ch\xfang t\xf4i cung c\u1ea5p m\u1ed9t ch\u1ee9c n\u0103ng k\u1ebft h\u1ee3p hai ho\u1ea1t \u0111\u1ed9ng n\xe0y ",(0,l.kt)("inlineCode",{parentName:"p"},"startOracle")," v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle")," th\xe0nh m\u1ed9t h\u1ee3p \u0111\u1ed3ng. \u0110i\u1ec1u n\xe0y s\u1ebd l\xe0m cho n\xf3 c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong s\xe2n ch\u01a1i v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace")," monad, c\u0169ng nh\u01b0 trong PAB."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'type OracleSchema = BlockchainActions .\\/ Endpoint "update" Integer\n\nrunOracle :: OracleParams -> Contract (Last Oracle) OracleSchema Text ()\nrunOracle op = do\n    oracle <- startOracle op\n    tell $ Last $ Just oracle\n    go oracle\n  where\n    go :: Oracle -> Contract (Last Oracle) OracleSchema Text a\n    go oracle = do\n        x <- endpoint @"update"\n        updateOracle oracle x\n        go oracle\n')),(0,l.kt)("p",null,"Tr\u01b0\u1edbc ti\xean h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle"),"  kh\u1edfi \u0111\u1ed9ng oracle. sau \u0111\xf3, v\xec nh\u1eefng l\xfd do s\u1ebd tr\u1edf n\xean r\xf5 r\xe0ng sau n\xe0y, ch\xfang t\xf4i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"tell"),"  \u0111\u1ec3 vi\u1ebft tham s\u1ed1 cho oracle. Ch\xfang ta c\u1ea7n c\xf3 kh\u1ea3 n\u0103ng giao ti\u1ebfp gi\xe1 tr\u1ecb tham s\u1ed1 c\u1ee7a oracle v\u1edbi th\u1ebf gi\u1edbi b\xean ngo\xe0i, \u0111\u1ec3 m\u1ecdi ng\u01b0\u1eddi c\xf3 th\u1ec3 s\u1eed d\u1ee5ng oracle. Ch\xfang t\xf4i s\u1ebd kh\xf4ng bi\u1ebft cho \u0111\u1ebfn khi ch\u1ea1y k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7 s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho NFT, v\xec v\u1eady ch\xfang t\xf4i ch\u01b0a bi\u1ebft gi\xe1 tr\u1ecb c\u1ee7a tham s\u1ed1 oracle."),(0,l.kt)("p",null,"H\xe3y nh\u1edb r\u1eb1ng ",(0,l.kt)("inlineCode",{parentName:"p"},"tell"),"  mong \u0111\u1ee3i lo\u1ea1i ",(0,l.kt)("inlineCode",{parentName:"p"},"Monoid"),". V\xed d\u1ee5 \u0111i\u1ec3n h\xecnh l\xe0 m\u1ed9t danh s\xe1ch c\xe1c chu\u1ed7i \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi m\u1ed9t danh s\xe1ch t\u1ea5t c\u1ea3 c\xe1c th\xf4ng b\xe1o nh\u1eadt k\xfd."),(0,l.kt)("p",null,"Nh\u01b0ng n\xf3 kh\xf4ng ph\u1ea3i l\xe0 danh s\xe1ch. Trong ",(0,l.kt)("inlineCode",{parentName:"p"},"Data.Monoid")," Ch\xfang t\xf4i c\xf3  ",(0,l.kt)("inlineCode",{parentName:"p"},"Last")," Monoid."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Prelude Week06.Oracle.Core> import Data.Monoid (Last (..))\nPrelude Data.Monoid Week06.Oracle.Core> :i Last\ntype Last :: ` -> `\nnewtype Last a = Last {getLast :: Maybe a}\n      -- Defined in \u2018Data.Monoid\u2019\ninstance Applicative Last -- Defined in \u2018Data.Monoid\u2019\ninstance Eq a => Eq (Last a) -- Defined in \u2018Data.Monoid\u2019\ninstance Functor Last -- Defined in \u2018Data.Monoid\u2019\ninstance Monad Last -- Defined in \u2018Data.Monoid\u2019\ninstance Monoid (Last a) -- Defined in \u2018Data.Monoid\u2019\ninstance Ord a => Ord (Last a) -- Defined in \u2018Data.Monoid\u2019\ninstance Semigroup (Last a) -- Defined in \u2018Data.Monoid\u2019\ninstance Show a => Show (Last a) -- Defined in \u2018Data.Monoid\u2019\ninstance Read a => Read (Last a) -- Defined in \u2018Data.Monoid\u2019\ninstance Traversable Last -- Defined in \u2018Data.Traversable\u2019\ninstance Foldable Last -- Defined in \u2018Data.Foldable\u2019\n")),(0,l.kt)("p",null,"Ch\xfang ta th\u1ea5y r\u1eb1ng n\xf3 ch\u1ec9 l\xe0 m\u1ed9t c\xe1i  ",(0,l.kt)("inlineCode",{parentName:"p"},"newtype"),"  bao b\u1ecdc xung quanh ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe"),".V\u1ea5n \u0111\u1ec1 l\xe0 cung c\u1ea5p m\u1ed9t v\xed d\u1ee5 c\u1ee5 th\u1ec3 ",(0,l.kt)("inlineCode",{parentName:"p"},"Monoid"),". T\xdd t\u01b0\u1edfng, nh\u01b0 t\xean cho th\u1ea5y, \u0111\xf3 l\xe0 m\u1ed9t ho\u1ea1t \u0111\u1ed9ng \u0111\u01a1n nguy\xean lu\xf4n ghi nh\u1edb gi\xe1 tr\u1ecb Just cu\u1ed1i c\xf9ng.\nV\xed d\u1ee5:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Prelude Data.Monoid Week06.Oracle.Core> Last (Just 'x') <> Last (Just 'y')\nLast {getLast = Just 'y'}\n")),(0,l.kt)("p",null,"Tuy nhi\xean, n\u1ebfu c\xe1i th\u1ee9 hai  ",(0,l.kt)("inlineCode",{parentName:"p"},"Last")," l\xe0 kh\xf4ng c\xf3 g\xec, n\xf3 s\u1ebd tr\u1ea3 v\u1ec1 c\xe1i \u0111\u1ea7u ti\xean."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Prelude Data.Monoid Week06.Oracle.Core> Last (Just 'x') <> Last Nothing\nLast {getLast = Just 'x'}\n")),(0,l.kt)("p",null,"N\u1ebfu c\u1ea3 hai \u0111\u1ec1u ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),", n\xf3 s\u1ebd l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Last"),"  r\u1ea5t h\u1eefu \xedch v\xec n\xf3 cho ph\xe9p ch\xfang ta gi\u1eef nguy\xean tr\u1ea1ng th\xe1i hi\u1ec7n t\u1ea1i. Gi\xe1 tr\u1ecb c\u1ee7a nh\u1eadt k\xfd v\u1ec1 c\u01a1 b\u1ea3n s\u1ebd l\xe0 gi\xe1 tr\u1ecb cu\u1ed1i c\xf9ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Just")," m\xe0 ch\xfang t\xf4i \u0111\xe3 n\xf3i."),(0,l.kt)("p",null,"Trong h\u1ee3p \u0111\u1ed3ng n\xe0y, ch\xfang t\xf4i s\u1ebd ch\u1ec9 l\xe0m \u0111i\u1ec1u \u0111\xf3 m\u1ed9t l\u1ea7n. Ban \u0111\u1ea7u n\xf3 s\u1ebd nh\u01b0 v\u1eady ",(0,l.kt)("inlineCode",{parentName:"p"},"Last Nothing"),". Sau \u0111\xf3, ch\xfang t\xf4i \u0111\xfac NFT, v\xe0 sau \u0111\xf3, khi ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c gi\xe1 tr\u1ecb oracle trong ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle"),", v\xe0 sau \u0111\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"tell")," n\xf3 lu\xf4n l\xe0 gi\xe1 tr\u1ecb \u0111\xf3. N\u1ebfu c\xe1c h\u1ee3p \u0111\u1ed3ng kh\xe1c t\u1eeb b\xean ngo\xe0i truy v\u1ea5n tr\u1ea1ng th\xe1i, ch\xfang s\u1ebd lu\xf4n nh\u1eadn \u0111\u01b0\u1ee3c ",(0,l.kt)("inlineCode",{parentName:"p"},"Just oracle"),", v\xec v\u1eady ch\xfang s\u1ebd c\xf3 th\u1ec3 kh\xe1m ph\xe1 gi\xe1 tr\u1ecb c\u1ee7a oracle."),(0,l.kt)("p",null,"V\xec v\u1eady, ti\u1ebfp theo trong ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle"),", h\xfang t\xf4i g\u1ecdi h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"go"),". \u0110i\u1ec1u n\xe0y l\xe0 ch\u1eb7n endpoint update. Ngay sau khi ai \u0111\xf3 cung c\u1ea5p m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer")," nh\u01b0 l\xe0 m\u1ed9t gi\xe1 tr\u1ecb m\u1edbi, n\xf3 s\u1ebd g\u1ecdi h\xe0m  ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle")," v\u1edbi m\u1ed9t gi\xe1 tr\u1ecb m\u1edbi, sau \u0111\xf3 l\u1eb7p l\u1ea1i \u0111\u1ec3 cho ph\xe9p ng\u01b0\u1eddi kh\xe1c c\u1eadp nh\u1eadt oracle.."),(0,l.kt)("p",null,"T\xf3m l\u1ea1i, ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle")," kh\u1edfi \u0111\u1ed9ng ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tell")," l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle"),", sau \u0111\xf3 l\u1eb7p l\u1ea1i \u0111\u1ec3 cho ph\xe9p ng\u01b0\u1eddi kh\xe1c c\u1eadp nh\u1eadt oracle."),(0,l.kt)("p",null,"V\xe0 \u0111i\u1ec1u \u0111\xf3 k\u1ebft th\xfac m\xe3 cho ch\xednh nh\xe0 ti\xean tri. Nh\u1eefng g\xec hi\u1ec7n c\xf2n thi\u1ebfu l\xe0 m\u1ed9t v\xed d\u1ee5, m\u1ed9t h\u1ee3p \u0111\u1ed3ng th\u1ef1c s\u1ef1 s\u1eed d\u1ee5ng oracle - m\u1ed9t h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i. V\xe0 c\u0169ng s\u1eed d\u1ee5ng Plutus Application Backend \u0111\u1ec3 ch\u1ea1y m\xe3 n\xe0y trong th\u1ebf gi\u1edbi th\u1ef1c ho\u1eb7c trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a ch\xfang t\xf4i l\xe0 trong m\u1ed9t chu\u1ed7i kh\u1ed1i m\xf4 ph\u1ecfng."),(0,l.kt)("h2",{id:"x\xe1c-th\u1ef1c-ho\xe1n-\u0111\u1ed5iswap-validation"},"X\xe1c th\u1ef1c ho\xe1n \u0111\u1ed5i(Swap Validation)"),(0,l.kt)("p",null,"H\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i m\u1eabu c\u1ee7a ch\xfang t\xf4i c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c t\xecm th\u1ea5y trong:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"module Week06.Oracle.swap\n")),(0,l.kt)("p",null,"M\u1ee5c \u0111\xedch c\u1ee7a h\u1ee3p \u0111\u1ed3ng n\xe0y l\xe0 \u0111\u1ec3 ai \u0111\xf3 c\xf3 th\u1ec3 k\xfd g\u1eedi ADA v\xe0 \u0111\u1ed5i n\xf3 l\u1ea5y m\xe3 th\xf4ng b\xe1o, trong tr\u01b0\u1eddng h\u1ee3p n\xe0y l\xe0 token m\xe0 ch\xfang t\xf4i s\u1eed d\u1ee5ng s\u1ebd g\u1ecdi l\xe0 USDT l\xe0 token USD."),(0,l.kt)("p",null,"\xdd t\u01b0\u1edfng l\xe0 gi\xe1, s\u1ed1 l\u01b0\u1ee3ng USDT s\u1ebd \u0111\u01b0\u1ee3c y\xeau c\u1ea7u thanh to\xe1n cho ADA, s\u1ebd \u0111\u01b0\u1ee3c x\xe1c \u0111\u1ecbnh b\u1edfi gi\xe1 tr\u1ecb c\u1ee7a oracle. H\xe3y nh\u1edb r\u1eb1ng ch\xfang t\xf4i \u0111ang s\u1eed d\u1ee5ng m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer")," \u0111\u1ec3 ph\u1ea3n \xe1nh t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i, v\u1edbi gi\xe1 tr\u1ecb m\u1ed9t tri\u1ec7u t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi m\u1ed9t USDT."),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd b\u1eaft \u0111\u1ea7u v\u1edbi m\u1ed9t h\xe0m tr\u1ee3 gi\xfap \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"price"),", v\u1edbi m\u1ed9t s\u1ed1 lovelace v\xe0 t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i, s\u1ebd tr\u1ea3 v\u1ec1 gi\xe1 USDT."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"price :: Integer -> Integer -> Integer\nprice lovelace exchangeRate = (lovelace ` exchangeRate) `divide` 1000000\n")),(0,l.kt)("p",null,"Ti\u1ebfp theo l\xe0 h\xe0m tr\u1ee3 gi\u01b0ps ",(0,l.kt)("inlineCode",{parentName:"p"},"lovelaces"),",  k\u1ebft h\u1ee3p v\u1edbi c\xe1c h\xe0m t\u1eeb th\u01b0 vi\u1ec7n Plutus \u0111\u1ec3 tr\xedch xu\u1ea5t m\u1ed9t s\u1ed1 lovelace t\u1eeb m\u1ed9t ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"Value"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"lovelaces :: Value -> Integer\nlovelaces = Ada.getLovelace . Ada.fromValue    \n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta s\u1ebd vi\u1ebft ",(0,l.kt)("inlineCode",{parentName:"p"},"mkSwapValidator"),". \u0110\xe2y l\xe0 m\u1ed9t tr\xecnh x\xe1c th\u1ef1c \u0111\u01b0\u1ee3c tham s\u1ed1 h\xf3a v\u1edbi hai tham s\u1ed1."),(0,l.kt)("p",null,"Tham s\u1ed1 \u0111\u1ea7u ti\xean l\xe0 oracle m\xe0 ch\xfang ta \u0111ang s\u1eed d\u1ee5ng. \u0110\u1ec3 s\u1eed d\u1ee5ng \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i nh\u1eadp m\xf4-\u0111un oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"import Week06.Oracle.core\n")),(0,l.kt)("p",null,"Tham s\u1ed1 th\u1ee9 hai l\xe0 \u0111\u1ecba ch\u1ec9 c\u1ee7a oracle. Th\xf4ng th\u01b0\u1eddng, v\u1edbi oracle , ch\xfang ta s\u1ebd c\xf3 th\u1ec3 t\xednh to\xe1n \u0111\u1ecba ch\u1ec9 t\u1eeb n\xf3. Trong m\xf4-\u0111un c\u1ed1t l\xf5i, ch\xfang t\xf4i \u0111\xe3 th\u1ea5y m\u1ed9t h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleAddress")," th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\xe0y cho ch\xfang t\xf4i. Nh\u01b0ng \u0111\xe2y l\xe0 m\u1ed9t ch\u1ee9c n\u0103ng m\xe0 ch\xfang t\xf4i kh\xf4ng th\u1ec3 s\u1eed d\u1ee5ng trong tr\xecnh x\xe1c th\u1ef1c, v\xec n\xf3 kh\xf4ng th\u1ec3 \u0111\u01b0\u1ee3c bi\xean d\u1ecbch sang t\u1eadp l\u1ec7nh Plutus. V\xec v\u1eady, \u1edf \u0111\xe2y, ch\xfang t\xf4i \u0111\u01b0a \u0111\u1ecba ch\u1ec9 m\u1ed9t c\xe1ch r\xf5 r\xe0ng cho tr\xecnh x\xe1c th\u1ef1c."),(0,l.kt)("p",null,"\u0110\u1ed1i v\u1edbi d\u1eef li\u1ec7u, ch\xfang t\xf4i s\u1eed d\u1ee5ng m\xe3 b\u0103m kh\xf3a c\xf4ng khai c\u1ee7a ng\u01b0\u1eddi b\xe1n. Ch\xfang t\xf4i kh\xf4ng s\u1eed d\u1ee5ng c\xf4ng c\u1ee5 \u0111\u1ed5i qu\xe0, v\xec v\u1eady ch\xfang t\xf4i cung c\u1ea5p cho n\xf3 m\u1ed9t lo\u1ea1i ",(0,l.kt)("inlineCode",{parentName:"p"},"Unit"),"."),(0,l.kt)("p",null,"Ch\xfang t\xf4i nh\u1edb l\u1ea1i t\u1eeb s\u01a1 \u0111\u1ed3, giao d\u1ecbch ho\xe1n \u0111\u1ed5i ph\u1ea3i c\xf3 ba \u0111\u1ea7u v\xe0o v\xe0 ba \u0111\u1ea7u ra."),(0,l.kt)("p",null,(0,l.kt)("img",{src:e(1586).Z})),(0,l.kt)("hr",null),(0,l.kt)("p",null,"  Inputs                              Outputs"),(0,l.kt)("hr",null),(0,l.kt)("p",null," Oracle, \u0110\u1ec3 ki\u1ec3m tra Oracle hi\u1ec7n t\u1ea1i, c\xe1i m\xe0 ch\xfang ta kh\xf4ng c\u1ea7n xem x\xe9t t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i trong x\xe1c nh\u1eadn ho\xe1n \u0111\u1ed5i"),(0,l.kt)("p",null,"UTxO ho\xe1n \u0111\u1ed5i gi\u1eef c\xe1c token lovelace c\u1ee7a ng\u01b0\u1eddi b\xe1n                            "),(0,l.kt)("p",null,"  The source of the buyer\\'s funds    The lovelace for the buyer"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Ho\xe1n \u0111\u1ed5i \u0111\u1ea7u v\xe0o \u0111\u1ea7u ra giao d\u1ecbch:"),(0,l.kt)("p",null,"L\u01b0u \xfd r\u1eb1ng ch\xfang ta kh\xf4ng c\u1ea7n ph\u1ea3i lo l\u1eafng v\u1ec1 oracle nh\u01b0 m\u1ed9t \u0111\u1ea7u ra. Tr\xecnh x\xe1c th\u1ef1c oracle s\u1ebd \u0111\u1ea3m b\u1ea3o r\u1eb1ng gi\xe1 tr\u1ecb kh\xf4ng b\u1ecb thay \u0111\u1ed5i v\xe0 c\xe1c kho\u1ea3n ph\xed \u0111\u01b0\u1ee3c th\xeam v\xe0o."),(0,l.kt)("p",null,"Ch\xfang t\xf4i c\u0169ng mu\u1ed1n h\u1ed7 tr\u1ee3 tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng th\u1ee9 hai, tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi b\xe1n c\xf3 th\u1ec3 l\u1ea5y token ADA trong tr\u01b0\u1eddng h\u1ee3p h\u1ecd kh\xf4ng mu\u1ed1n th\u1ef1c hi\u1ec7n ho\xe1n \u0111\u1ed5i n\u1eefa. N\u1ebfu ch\xfang t\xf4i kh\xf4ng h\u1ed7 tr\u1ee3 tr\u01b0\u1eddng h\u1ee3p n\xe0y, ADA c\xf3 th\u1ec3 b\u1ecb kh\xf3a \u1edf \u0111\xf3 m\xe3i m\xe3i, n\u1ebfu kh\xf4ng ai quy\u1ebft \u0111\u1ecbnh th\u1ef1c hi\u1ec7n ho\xe1n \u0111\u1ed5i."),(0,l.kt)("p",null,"Tr\u01b0\u1eddng h\u1ee3p th\u1ee9 hai n\xe0y l\xe0 \u0111i\u1ec1u ki\u1ec7n ch\xfang t\xf4i ki\u1ec3m tra trong tr\xecnh x\xe1c th\u1ef1c. N\u1ebfu ng\u01b0\u1eddi b\xe1n t\u1ef1 m\xecnh k\xfd v\xe0o giao d\u1ecbch, th\xec kh\xf4ng c\xf3 b\u1ea5t k\u1ef3 r\xe0ng bu\u1ed9c n\xe0o n\u1eefa - ch\xfang t\xf4i kh\xf4ng c\u1ea7n ki\u1ec3m tra oracle hay b\u1ea5t c\u1ee9 th\u1ee9 g\xec kh\xe1c - ng\u01b0\u1eddi b\xe1n ch\u1ec9 c\xf3 th\u1ec3 l\u1ea5y l\u1ea1i lovelace c\u1ee7a h\u1ecd."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"mkSwapValidator :: Oracle -> Address -> PubKeyHash -> () -> ScriptContext -> Bool\nmkSwapValidator oracle addr pkh () ctx =\n    txSignedBy info pkh ||\n...            \n")),(0,l.kt)("p",null,"Tr\u01b0\u1eddng h\u1ee3p th\xfa v\u1ecb h\u01a1n l\xe0 tr\u01b0\u1eddng h\u1ee3p th\u1ee9 hai, n\u01a1i ch\xfang t\xf4i ki\u1ec3m tra hai \u0111i\u1ec1u ki\u1ec7n."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ph\u1ea3i c\xf3 hai \u0111\u1ea7u v\xe0o - oracle v\xe0 UTxO ho\xe1n \u0111\u1ed5i. T\u1ea5t c\u1ea3 c\xe1c \u0111\u1ea7u v\xe0o b\u1ed5 sung (ti\u1ec1n c\u1ee7a ng\u01b0\u1eddi mua) ph\u1ea3i l\xe0 \u0111\u1ea7u v\xe0o kh\xf3a c\xf4ng khai. \u0110i\u1ec1u n\xe0y l\xe0 do ch\xfang t\xf4i kh\xf4ng mu\u1ed1n lo l\u1eafng v\u1ec1 vi\u1ec7c can thi\u1ec7p v\xe0o c\xe1c h\u1ee3p \u0111\u1ed3ng th\xf4ng minh kh\xe1c."),(0,l.kt)("p",null,"Th\u1ee9 hai, ch\xfang t\xf4i mu\u1ed1n ki\u1ec3m tra xem ng\u01b0\u1eddi b\xe1n c\xf3 \u0111\u01b0\u1ee3c thanh to\xe1n hay kh\xf4ng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'(traceIfFalse "expected exactly two script inputs" hasTwoScriptInputs &&\n traceIfFalse "price not paid"                     sellerPaid)    \n')),(0,l.kt)("p",null,"B\xe2y gi\u1edd, ch\xfang ta c\xf3 c\xe1c \u0111\u1ecbnh ngh\u0129a v\u1ec1 h\xe0m tr\u1ee3 gi\xfap c\u1ee7a ch\xfang ta."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"info :: TxInfo\ninfo = scriptContextTxInfo ctx\n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang ta ph\u1ea3i d\xf9ng ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleInput"),"  \u0111\u1ec3 l\u1ea5y UTxO t\u1eeb oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'oracleInput :: TxOut\noracleInput =\n  let\n    ins = [ o\n          | i <- txInfoInputs info\n          , let o = txInInfoResolved i\n          , txOutAddress o == addr\n          ]\n  in\n    case ins of\n        [o] -> o\n        _   -> traceError "expected exactly one oracle input"\n')),(0,l.kt)("p",null,"Ch\xfang t\xf4i th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\xe0y b\u1eb1ng c\xe1ch l\u1ea5y danh s\xe1ch t\u1ea5t c\u1ea3 c\xe1c \u0111\u1ea7u v\xe0o. \u0110\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i s\u1eed d\u1ee5ng kh\u1ea3 n\u0103ng hi\u1ec3u danh s\xe1ch, cho ph\xe9p ch\xfang t\xf4i l\u1ea5y t\u1eeb c\xe1c danh s\xe1ch kh\xe1c b\u1eb1ng b\u1ed9 l\u1ecdc. Trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, ch\xfang t\xf4i l\u1ea5y t\u1eeb danh s\xe1ch t\u1eeb ",(0,l.kt)("inlineCode",{parentName:"p"},"txInfoInputs info"),", \u0111\xf3 l\xe0 danh s\xe1ch c\u1ee7a ",(0,l.kt)("inlineCode",{parentName:"p"},"TxInfo"),". Ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"txInInfoResolved"),"  \u0111\u1ec3 xem m\u1ed7i ph\u1ea7n t\u1eed ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"TxOut"),", sau \u0111\xf3 ch\xfang t\xf4i so s\xe1nh v\u1edbi tham s\u1ed1 ",(0,l.kt)("inlineCode",{parentName:"p"},"addr"),". Danh s\xe1ch k\u1ebft qu\u1ea3 s\u1ebd tr\u1ed1ng ho\u1eb7c s\u1ebd c\xf3 danh s\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"TxOut")," ph\xf9 h\u1ee3p v\u1edbi UTxO oracle."),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i ki\u1ec3m tra xem c\xf3 ch\xednh x\xe1c m\u1ed9t ph\u1ea7n t\u1eed trong danh s\xe1ch k\u1ebft qu\u1ea3 hay kh\xf4ng, v\xe0 n\u1ebfu c\xf3, ch\xfang t\xf4i tr\u1ea3 v\u1ec1 n\xf3. Ch\xfang t\xf4i kh\xf4ng tr\u1ea3 l\u1ea1i danh s\xe1ch, ch\u1ec9 tr\u1ea3 l\u1ea1i ",(0,l.kt)("inlineCode",{parentName:"p"},"TxOut"),"."),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y hi\u1ec7n \u0111\xe3 cho ch\xfang ta k\u1ebft qu\u1ea3 \u0111\u1ea7u ra k\u1ef3 di\u1ec7u m\xe0 ch\xfang ta \u0111ang s\u1eed d\u1ee5ng l\xe0m \u0111\u1ea7u v\xe0o."),(0,l.kt)("p",null,"B\xe2y gi\u1edd, ch\xfang t\xf4i mu\u1ed1n ki\u1ec3m tra t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i th\u1ef1c t\u1ebf. \u0110\u1ed1i v\u1edbi \u0111i\u1ec1u \u0111\xf3, ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleValue"),"   m\xe0 ch\xfang t\xf4i \u0111\xe3 x\xe1c \u0111\u1ecbnh trong m\xf4-\u0111un c\u1ed1t l\xf5i. \u1ede \u0111\xe2y m\u1ed9t l\u1ea7n n\u1eefa, n\xf3 c\xf3 th\u1ec3 th\xe0nh c\xf4ng, ho\u1eb7c n\xf3 c\xf3 th\u1ec3 th\u1ea5t b\u1ea1i. N\u1ebfu n\xf3 th\xe0nh c\xf4ng, ch\xfang t\xf4i tr\u1ea3 v\u1ec1 gi\xe1 tr\u1ecb."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'oracleValue\' = case oracleValue oracleInput (`findDatum` info) of\n    Nothing -> traceError "oracle value not found"\n    Just x  -> x    \n')),(0,l.kt)("p",null,"Ch\xfang ta kh\xf4ng c\u1ea7n ki\u1ec3m tra xem oracle c\xf3 ch\u1ee9a NFT hay kh\xf4ng. Do c\xe1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a x\xe1c th\u1ef1c \u0111\u1ed1i v\u1edbi oracle, ch\xfang ta bi\u1ebft r\u1eb1ng n\xf3 hi\u1ec7n di\u1ec7n.."),(0,l.kt)("p",null,"B\xe2y gi\u1edd, ch\xfang ta h\xe3y xem x\xe9t h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"hasTwoScriptInputs"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"hasTwoScriptInputs :: Bool\nhasTwoScriptInputs =\n  let\n    xs = filter (isJust . toValidatorHash . txOutAddress . txInInfoResolved) $ txInfoInputs info\n  in\n    length xs == 2\n")),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i l\u1ecdc, s\u1eed d\u1ee5ng h\xe0m t\u1ed5ng h\u1ee3p"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"(isJust . toValidatorHash . txOutAddress . txInInfoResolved)\n")),(0,l.kt)("p",null,"\u0110\u1ecdc t\u1eeb ph\u1ea3i sang tr\xe1i, ch\xfang ta nh\u1eadn \u0111\u01b0\u1ee3c UTxO t\u1eeb \u0111\u1ea7u v\xe0o, sau \u0111\xf3 ch\xfang ta nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u1ecba ch\u1ec9 cho UTxO n\xe0y, v\xe0 ch\xfang ta nh\u1eadn \u0111\u01b0\u1ee3c m\xe3 b\u0103m c\u1ee7a tr\xecnh x\xe1c th\u1ef1c cho \u0111\u1ecba ch\u1ec9 \u0111\xf3. Cu\u1ed1i c\xf9ng, ch\xfang ta ki\u1ec3m tra xem n\xf3 c\xf3 ph\u1ea3i l\xe0 \u0111\u1ea7u ra t\u1eadp l\u1ec7nh hay kh\xf4ng, b\u1eb1ng c\xe1ch xem n\xf3 c\xf3 ph\u1ea3i l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Just"),". N\u1ebfu n\xf3 l\xe0  ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),", th\xec \u0111i\u1ec1u n\xe0y s\u1ebd cho th\u1ea5y r\u1eb1ng n\xf3 l\xe0 m\u1ed9t kh\xf3a c\xf4ng khai, kh\xf4ng ph\u1ea3i l\xe0 m\u1ed9t \u0111\u1ecba ch\u1ec9 t\u1eadp l\u1ec7nh."),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m t\u1ed5ng h\u1ee3p n\xe0y nh\u01b0 m\u1ed9t b\u1ed9 l\u1ecdc d\u1ef1a tr\xean danh s\xe1ch c\xe1c ",(0,l.kt)("inlineCode",{parentName:"p"},"TxInInfos"),". V\xe0 sau \u0111\xf3 ch\xfang t\xf4i ki\u1ec3m tra \u0111\u1ed9 d\xe0i c\u1ee7a danh s\xe1ch k\u1ebft qu\u1ea3 l\xe0 ch\xednh x\xe1c hai."),(0,l.kt)("p",null,"Quay tr\u1edf l\u1ea1i c\xe1c \u0111i\u1ec1u ki\u1ec7n x\xe1c th\u1ef1c c\u1ee7a ch\xfang ta, b\xe2y gi\u1edd ch\xfang ta ph\u1ea3i l\xe0m v\u1edbi vi\u1ec7c ki\u1ec3m tra xem ng\u01b0\u1eddi b\xe1n c\xf3 \u0111\u01b0\u1ee3c thanh to\xe1n hay kh\xf4ng. V\xec v\u1eady, h\xe3y vi\u1ebft h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"sellerPaid")," m\xe0 ch\xfang ta \u0111\xe3 tham chi\u1ebfu."),(0,l.kt)("p",null,"\u0110\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, ch\xfang t\xf4i s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t h\xe0m tr\u1ee3 gi\xfap kh\xe1c \u0111\u1ec3 x\xe1c \u0111\u1ecbnh gi\xe1 y\xeau c\u1ea7u."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'minPrice :: Integer\nminPrice =\n  let\n    lovelaceIn = case findOwnInput ctx of\n        Nothing -> traceError "own input not found"\n        Just i  -> lovelaces $ txOutValue $ txInInfoResolved i\n  in\n    price lovelaceIn oracleValue\'    \n')),(0,l.kt)("p",null,"Tr\u01b0\u1edbc ti\xean, ch\xfang t\xf4i ki\u1ec3m tra xem ch\xfang t\xf4i c\xf3 m\u1ed9t \u0111\u1ea7u v\xe0o hay kh\xf4ng, v\xe0 n\u1ebfu c\xf3, ch\xfang t\xf4i tr\xedch xu\u1ea5t s\u1ed1 l\u01b0\u1ee3ng kho\u1ea3ng c\xe1ch v\xe0 g\xe1n s\u1ed1 \u0111\xf3 cho ",(0,l.kt)("inlineCode",{parentName:"p"},"lovelaceIn"),". Sau \u0111\xf3, ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"price")," \u0111\u1ec3 x\xe1c \u0111\u1ecbnh gi\xe1 b\u1eb1ng token USDT."),(0,l.kt)("p",null,"B\xe2y gi\u1edd, ch\xfang ta c\xf3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"sellerPaid"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"sellerPaid :: Bool\nsellerPaid =\n  let\n    pricePaid :: Integer\n    pricePaid =  assetClassValueOf (valuePaidTo info pkh) (oAsset oracle)\n  in\n    pricePaid >= minPrice\n")),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"valuePaidTo"),"  n\xe0y l\xe0 t\u1eeb c\xe1c th\u01b0 vi\u1ec7n Plutus. \u0110\xe3 cho ",(0,l.kt)("inlineCode",{parentName:"p"},"info")," v\xe0 m\u1ed9t b\u0103m kh\xf3a c\xf4ng khai, n\xf3 s\u1ebd c\u1ed9ng t\u1ea5t c\u1ea3 c\xe1c gi\xe1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\xe1c \u0111\u1ea7u ra kh\xf3a c\xf4ng khai \u0111i \u0111\u1ebfn \u0111\u1ecba ch\u1ec9 n\xe0y. Sau \u0111\xf3, ch\xfang t\xf4i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"assetClassValueOf")," \u0111\u1ec3 ki\u1ec3m tra th\xe0nh ph\u1ea7n c\u1ee7a gi\xe1 tr\u1ecb c\xf3 trong m\xe3 th\xf4ng b\xe1o USD v\xe0 ki\u1ec3m tra xem ch\xfang t\xf4i c\xf3 \xedt nh\u1ea5t bao nhi\xeau t\xf9y theo y\xeau c\u1ea7u c\u1ee7a ch\xfang t\xf4i."),(0,l.kt)("p",null,"\u0110\xf3 l\xe0 ch\u1ee9c n\u0103ng cu\u1ed1i c\u1ee7a ph\u1ea7n ch\xednh trong m\xe3 tr\xecnh x\xe1c th\u1ef1c ho\xe1n \u0111\u1ed5i. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"data Swapping\ninstance Scripts.ScriptType Swapping where\n    type instance DatumType Swapping = PubKeyHash\n    type instance RedeemerType Swapping = ()\n\nswapInst :: Oracle -> Scripts.ScriptInstance Swapping\nswapInst oracle = Scripts.validator @Swapping\n    ($$(PlutusTx.compile [|| mkSwapValidator ||])\n        `PlutusTx.applyCode` PlutusTx.liftCode oracle\n        `PlutusTx.applyCode` PlutusTx.liftCode (oracleAddress oracle))\n    $$(PlutusTx.compile [|| wrap ||])\n  where\n    wrap = Scripts.wrapValidator @PubKeyHash @()\n\nswapValidator :: Oracle -> Validator\nswapValidator = Scripts.validatorScript . swapInst\n\nswapAddress :: Oracle -> Ledger.Address\nswapAddress = scriptAddress . swapValidator\n")),(0,l.kt)("p",null,"L\u01b0u \xfd r\u1eb1ng trong h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"swapInst"),", n\u01a1i ch\xfang ta s\u1eed d\u1ee5ng h\xe0m b\u0103m m\u1eabu \u0111\u1ec3 t\u1ea1o tr\xecnh x\xe1c th\u1ef1c Plutus t\u1eeb h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"mkSwapValidator"),", ch\xfang t\xf4i kh\xf4ng c\u1ea7n chuy\u1ec3n \u0111\u1ecba ch\u1ec9 oracle l\xe0m tham s\u1ed1. \u0110i\u1ec1u n\xe0y l\xe0 do ch\xfang t\xf4i s\u1ebd t\xednh to\xe1n \u0111i\u1ec1u n\xe0y b\xean trong h\xe0m. H\xe3y nh\u1edb r\u1eb1ng ch\xfang ta kh\xf4ng th\u1ec3 s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleAddress"),"  b\xean trong tr\xecnh x\xe1c th\u1ef1c Plutus."),(0,l.kt)("p",null,"B\xe2y gi\u1edd \u0111\u1ec3 x\xe1c \u0111\u1ecbnh m\u1ed9t s\u1ed1 h\u1ee3p \u0111\u1ed3ng."),(0,l.kt)("h3",{id:"ch\xe0o-h\xe0ng-offerswap"},"Ch\xe0o h\xe0ng (offerSwap)"),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean ",(0,l.kt)("inlineCode",{parentName:"p"},"offerSwap"),". \u0110i\u1ec1u n\xe0y d\xe0nh cho ng\u01b0\u1eddi b\xe1n mu\u1ed1n \u0111\u01b0a ra m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng nh\u1ea5t \u0111\u1ecbnh \u0111\u1ec3 trao \u0111\u1ed5i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'offerSwap :: forall w s. HasBlockchainActions s => Oracle -> Integer -> Contract w s Text ()\nofferSwap oracle amt = do\n    pkh <- pubKeyHash <$> Contract.ownPubKey\n    let tx = Constraints.mustPayToTheScript pkh $ Ada.lovelaceValueOf amt\n    ledgerTx <- submitTxConstraints (swapInst oracle) tx\n    awaitTxConfirmed $ txId ledgerTx\n    logInfo @String $ "offered " ++ show amt ++ " lovelace for swap"    \n')),(0,l.kt)("h3",{id:"findswaps"},"findSwaps"),(0,l.kt)("p",null,"Ti\u1ebfp theo, m\u1ed9t h\xe0m tr\u1ee3 gi\xfap s\u1ebd t\xecm t\u1ea5t c\u1ea3 c\xe1c ho\xe1n \u0111\u1ed5i th\u1ecfa m\xe3n m\u1ed9t v\u1ecb th\u1ebf nh\u1ea5t \u0111\u1ecbnh. N\xf3 c\u1ea7n m\u1ed9t oracle c\u1ed9ng v\u1edbi m\u1ed9t v\u1ecb th\u1ebf d\u1ef1a tr\xean h\xe0m b\u0103m kh\xf3a c\xf4ng khai v\xe0 tr\u1ea3 v\u1ec1 danh s\xe1ch b\u1ed9 ba UTxO th\u1ecfa m\xe3n v\u1ecb th\u1ebf."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"findSwaps :: HasBlockchainActions s => Oracle -> (PubKeyHash -> Bool) -> Contract w s Text [(TxOutRef, TxOutTx, PubKeyHash)]\nfindSwaps oracle p = do\n    utxos <- utxoAt $ swapAddress oracle\n    return $ mapMaybe g $ Map.toList utxos\n  where\n    f :: TxOutTx -> Maybe PubKeyHash\n    f o = do\n        dh        <- txOutDatumHash $ txOutTxOut o\n        (Datum d) <- Map.lookup dh $ txData $ txOutTxTx o\n        PlutusTx.fromData d\n\n    g :: (TxOutRef, TxOutTx) -> Maybe (TxOutRef, TxOutTx, PubKeyHash)\n    g (oref, o) = do\n        pkh <- f o\n        guard $ p pkh\n        return (oref, o, pkh)\n")),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c danh s\xe1ch t\u1ea5t c\u1ea3 c\xe1c UTxO \u1edf \u0111\u1ecba ch\u1ec9 h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i. Sau \u0111\xf3 ch\xfang t\xf4i \xe1p d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"mapMaybe"),"  d\xe0nh cho danh s\xe1ch n\xe0y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"mapMaybe :: (a -> Maybe b) -> [a] -> [b]\n")),(0,l.kt)("p",null,"H\xe0m n\xe0y s\u1ebd \xe1p d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"(a -> Maybe b)"),"  cho t\u1eebng ph\u1ea7n t\u1eed trong danh s\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," v\xe0 t\u1ea1o danh s\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe b"),", c\xf3 th\u1ec3 ch\u1ee9a h\u1ed7n h\u1ee3p c\u1ee7a ",(0,l.kt)("inlineCode",{parentName:"p"},"Just")," v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),". sau \u0111\xf3 n\xf3 b\u1ecf ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),"v\xe0 ch\u1ec9 \u0111\u1ec3 l\u1ea1i gi\xe1 tr\u1ecb",(0,l.kt)("inlineCode",{parentName:"p"},"Just"),"."),(0,l.kt)("p",null,"\u0110\u1ec3 l\xe0m r\xf5 \u0111i\u1ec1u n\xe0y, h\xe3y t\u01b0\u1edfng t\u01b0\u1ee3ng ch\xfang ta c\xf3 m\u1ed9t h\xe0m tr\u1ea3 v\u1ec1 nh\u01b0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Just"),"  cho s\u1ed1 ch\u1eb5n v\xe0 m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),"  cho s\u1ed1 l\u1ebb."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"f (n :: Int) = if even n then Just (div n 2) else Nothing\n")),(0,l.kt)("p",null,"Ch\xfang ta c\xf3 th\u1ec3 s\u1eed d\u1ee5ng th\xf4ng s\u1ed1 n\xe0y l\xe0m tham s\u1ed1 \u0111\u1ea7u ti\xean \u0111\u1ec3 l\u1eadp ",(0,l.kt)("inlineCode",{parentName:"p"},"mapMaybe")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Prelude Week06.Oracle.Core> import Data.Maybe\nPrelude Data.Maybe Week06.Oracle.Core> mapMaybe f [2, 4, 10, 11, 13, 100]\n[1,2,5,50]\n")),(0,l.kt)("p",null,"Chung ta s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"mapMaybe"),"  v\xe0 h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"g")," \u0111\u1ec3 l\u1ecdc danh s\xe1ch c\xe1c UTxO."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"g :: (TxOutRef, TxOutTx) -> Maybe (TxOutRef, TxOutTx, PubKeyHash)\ng (oref, o) = do\n    pkh <- f o\n    guard $ p pkh\n    return (oref, o, pkh)\n")),(0,l.kt)("p",null,"H\xe0m n\xe0y nh\u1eadn m\u1ed9t c\u1eb7p gi\xe1 tr\u1ecb kh\xf3a \u0111\u1ea1i di\u1ec7n cho UTxO v\xe0 tr\u1ea3 v\u1ec1 m\u1ed9t b\u1ed9 ba ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe")," ch\u1ee9a c\xe1c m\u1ee5c t\u1eeb c\u1eb7p c\xf9ng v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"PubKeyHash"),"."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"g"),"  b\xean trong monad ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe"),"  v\xe0 s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"f"),",\nc\u0169ng n\u1eb1m b\xean trong monad ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe"),". H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"f")," l\u1ea5y m\xe3 b\u0103m kh\xf3a c\xf4ng khai t\u1eeb UTxO, n\u1ebfu n\xf3 t\u1ed3n t\u1ea1i. Sau \u0111\xf3, h\xe0m  ",(0,l.kt)("inlineCode",{parentName:"p"},"g"),"  s\u1eed d\u1ee5ng h\xe0m",(0,l.kt)("inlineCode",{parentName:"p"},"guard"),"  c\xf9ng v\u1edbi thu\u1ed9c t\xednh ",(0,l.kt)("inlineCode",{parentName:"p"},"p"),"  tm\xe0 ch\xfang ta chuy\u1ec3n v\xe0o l\xe0m   \u0111\u1ed1i s\u1ed1."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"guard"),"  l\xe0 h\xe0m c\xf3 s\u1eb5n trong monads, v\xe0 monad ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe"),(0,l.kt)("br",{parentName:"p"}),"\n","c\u0169ng v\u1eady. N\xf3 nh\u1eadn m\u1ed9t boolean l\xe0m tham s\u1ed1, v\xe0 n\u1ebfu boolean l\xe0 false, th\xec qu\xe1 tr\xecnh t\xednh to\xe1n s\u1ebd kh\xf4ng th\xe0nh c\xf4ng. Trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, false c\xf3 ngh\u0129a l\xe0 quay tr\u1edf l\u1ea1i ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),". n\u1ebfu l\xe0 true, N\u1ebfu n\xf3 l\xe0 s\u1ef1 th\u1eadt, n\xf3 ch\u1ec9 ti\u1ebfp t\u1ee5c. Trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, \u0111i\u1ec1u \u0111\xf3 c\xf3 ngh\u0129a l\xe0 tr\u1ea3 v\u1ec1  b\u1ed9 ba ",(0,l.kt)("inlineCode",{parentName:"p"},"Just")," ch\u1ee9a h\xe0m b\u0103m kh\xf3a c\xf4ng khai. "),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd xem c\xe1ch ch\xfang ta s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"findSwaps"),"  m\u1ed9t l\xe1t n\u1eefa."),(0,l.kt)("h3",{id:"l\u1ea5y-l\u1ea1i-ho\xe1n-\u0111\u1ed5i-retrieveswaps"},"l\u1ea5y l\u1ea1i Ho\xe1n \u0111\u1ed5i (retrieveSwaps)"),(0,l.kt)("p",null,"Contract ",(0,l.kt)("inlineCode",{parentName:"p"},"retrieveSwaps"),"  l\xe0 d\xe0nh cho ng\u01b0\u1eddi b\xe1n n\u1ebfu h\u1ecd mu\u1ed1n thay \u0111\u1ed5i suy ngh\u0129 c\u1ee7a h\u1ecd v\xe0 nh\u1eadn \u0111\u01b0\u1ee3c Ada tr\u1edf l\u1ea1i c\u1ee7a h\u1ecd."),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 n\u01a1i ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"findSwaps"),". Ch\xfang ta s\u1eed d\u1ee5ng n\xf3 v\u1edbi",(0,l.kt)("inlineCode",{parentName:"p"},"(== pkh)")," nh\u01b0 l\xe0 m\u1ed9t thu\u1ed9c t\xednh, c\xf3 ngh\u0129a l\xe0 ch\xfang t\xf4i mu\u1ed1n ch\u1ec9 nh\u1eefng UTxO \u1edf \u0111\u1ecba ch\u1ec9 ho\xe1n \u0111\u1ed5i thu\u1ed9c v\u1ec1 nh\xe0 \u0111i\u1ec1u h\xe0nh."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'retrieveSwaps :: HasBlockchainActions s => Oracle -> Contract w s Text ()\nretrieveSwaps oracle = do\n    pkh <- pubKeyHash <$> ownPubKey\n    xs <- findSwaps oracle (== pkh)\n    case xs of\n        [] -> logInfo @String "no swaps found"\n        _  -> do\n            let lookups = Constraints.unspentOutputs (Map.fromList [(oref, o) | (oref, o, _) <- xs]) <>\n                          Constraints.otherScript (swapValidator oracle)\n                tx      = mconcat [Constraints.mustSpendScriptOutput oref $ Redeemer $ PlutusTx.toData () | (oref, _, _) <- xs]\n            ledgerTx <- submitTxConstraintsWith @Swapping lookups tx\n            awaitTxConfirmed $ txId ledgerTx\n            logInfo @String $ "retrieved " ++ show (length xs) ++ " swap(s)"\n')),(0,l.kt)("p",null,"N\u1ebfu kh\xf4ng c\xf3, th\xec kh\xf4ng c\xf3 g\xec \u0111\u1ec3 l\xe0m. N\u1ebfu c\xf3 m\u1ed9t s\u1ed1, ch\xfang t\xf4i x\xe2y d\u1ef1ng m\u1ed9t giao d\u1ecbch truy xu\u1ea5t t\u1ea5t c\u1ea3 ch\xfang."),(0,l.kt)("p",null,"\u0110\u1ec3 l\xe0m \u0111i\u1ec1u \u0111\xf3, ch\xfang t\xf4i t\u1ea1o m\u1ed9t danh s\xe1ch c\xe1c r\xe0ng bu\u1ed9c ",(0,l.kt)("inlineCode",{parentName:"p"},"mustSpendScriptOutput"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"tx = mconcat [Constraints.mustSpendScriptOutput oref $ Redeemer $ PlutusTx.toData () | (oref, _, _) <- xs]\n")),(0,l.kt)("p",null," Tr\xf4ng c\xf3 v\u1ebb \u0111\xe1ng s\u1ee3, nh\u01b0ng n\xf3 ch\u1ec9 l\xe0 tr\xedch xu\u1ea5t m\u1ed9t danh s\xe1ch c\xe1c ",(0,l.kt)("inlineCode",{parentName:"p"},"oref")," t\u1eeb danh s\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"xs"),"  v\xe0 s\u1eed d\u1ee5ng n\xf3 \u0111\u1ec3 x\xe2y d\u1ef1ng m\u1ed9t r\xe0ng bu\u1ed9c cho t\u1eebng ng\u01b0\u1eddi trong s\u1ed1 h\u1ecd, s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Unit"),"  nh\u01b0 l\xe0 ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"Redeemer"),". H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"mconcat")," \xe1p d\u1ee5ng  ",(0,l.kt)("inlineCode",{parentName:"p"},"Semigroup")," to\xe1n t\u1eed ",(0,l.kt)("inlineCode",{parentName:"p"},"<>")," trong to\xe0n b\u1ed9 danh s\xe1ch \u0111\u1ec3 k\u1ebft h\u1ee3p ch\xfang."),(0,l.kt)("p",null,"Khi tra c\u1ee9u, ch\xfang t\xf4i ph\u1ea3i cung c\u1ea5p t\u1ea5t c\u1ea3 c\xe1c UTxO v\xe0 tr\xecnh x\xe1c th\u1ef1c ho\xe1n \u0111\u1ed5i."),(0,l.kt)("p",null,"Ch\xfang t\xf4i c\xf3 danh s\xe1ch c\xe1c UTxO trong ",(0,l.kt)("inlineCode",{parentName:"p"},"xs")," v\xe0 ch\xfang t\xf4i bi\u1ebfn danh s\xe1ch n\xe0y th\xe0nh danh s\xe1ch c\xe1c c\u1eb7p v\xe0 sau \u0111\xf3 ch\xfang t\xf4i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Map.fromList")," \u0111\u1ec3 bi\u1ebfn c\xe1c c\u1eb7p \u0111\xf3 th\xe0nh m\u1ed9t b\u1ea3n \u0111\u1ed3 (map), sau \u0111\xf3 ch\xfang t\xf4i \xe1p d\u1ee5ng r\xe0ng bu\u1ed9c ",(0,l.kt)("inlineCode",{parentName:"p"},"unspentOutputs")," ."),(0,l.kt)("h3",{id:"useswaps"},"useSwaps"),(0,l.kt)("p",null,"V\xe0 b\xe2y gi\u1edd l\xe0 m\u1ed9t trong nh\u1eefng th\xfa v\u1ecb nh\u1ea5t ",(0,l.kt)("inlineCode",{parentName:"p"},"useSwaps"),". \u0110\xe2y l\xe0 n\u01a1i ch\xfang t\xf4i th\u1ef1c s\u1ef1 s\u1eed d\u1ee5ng oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'useSwap :: forall w s. HasBlockchainActions s => Oracle -> Contract w s Text ()\nuseSwap oracle = do\n    funds <- ownFunds\n    let amt = assetClassValueOf funds $ oAsset oracle\n    logInfo @String $ "available assets: " ++ show amt\n\n    m <- findOracle oracle\n    case m of\n        Nothing           -> logInfo @String "oracle not found"\n        Just (oref, o, x) -> do\n            logInfo @String $ "found oracle, exchange rate " ++ show x\n            pkh   <- pubKeyHash <$> Contract.ownPubKey\n            swaps <- findSwaps oracle (/= pkh)\n            case find (f amt x) swaps of\n                Nothing                -> logInfo @String "no suitable swap found"\n                Just (oref\', o\', pkh\') -> do\n                    let v       = txOutValue (txOutTxOut o) <> lovelaceValueOf (oFee oracle)\n                        p       = assetClassValue (oAsset oracle) $ price (lovelaces $ txOutValue $ txOutTxOut o\') x\n                        lookups = Constraints.otherScript (swapValidator oracle)                     <>\n                                  Constraints.otherScript (oracleValidator oracle)                   <>\n                                  Constraints.unspentOutputs (Map.fromList [(oref, o), (oref\', o\')])\n                        tx      = Constraints.mustSpendScriptOutput oref  (Redeemer $ PlutusTx.toData Use) <>\n                                  Constraints.mustSpendScriptOutput oref\' (Redeemer $ PlutusTx.toData ())  <>\n                                  Constraints.mustPayToOtherScript\n                                    (validatorHash $ oracleValidator oracle)\n                                    (Datum $ PlutusTx.toData x)\n                                    v                                                                      <>\n                                  Constraints.mustPayToPubKey pkh\' p\n                    ledgerTx <- submitTxConstraintsWith @Swapping lookups tx\n                    awaitTxConfirmed $ txId ledgerTx\n                    logInfo @String $ "made swap with price " ++ show (Value.flattenValue p)\n  where\n    getPrice :: Integer -> TxOutTx -> Integer\n    getPrice x o = price (lovelaces $ txOutValue $ txOutTxOut o) x\n\n    f :: Integer -> Integer -> (TxOutRef, TxOutTx, PubKeyHash) -> Bool\n    f amt x (_, o, _) = getPrice x o <= amt\n')),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds"),". \u0110i\u1ec1u n\xe0y \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong m\u1ed9t m\xf4-\u0111un ri\xeang bi\u1ec7t m\xe0 ch\xfang ta s\u1ebd \u0111i s\xe2u v\xe0o trong m\u1ed9t ch\xfat. T\u1ea5t c\u1ea3 nh\u1eefng g\xec n\xf3 l\xe0m l\xe0 th\xeam t\u1ea5t c\u1ea3 ti\u1ec1n v\xe0o v\xed c\u1ee7a ch\xednh ch\xfang ta v\xe0 tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"Value"),". Sau \u0111\xf3, ch\xfang t\xf4i t\xecm hi\u1ec3u ch\xfang t\xf4i c\xf3 bao nhi\xeau USD Token."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'funds <- ownFunds\nlet amt = assetClassValueOf funds $ oAsset oracle\nlogInfo @String $ "available assets: " ++ show amt\n')),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"findOracle"),"  \u0111\u01b0\u1ee3c \u0111\u1ecbnh nghia trong m\xf4 \u0111un Oracle.Core t\u1eeb tr\u01b0\u1edbc. B\u1ea1n s\u1ebd nh\u1edb l\u1ea1i r\u1eb1ng n\xf3 t\xecm th\u1ea5y oracle UTxO c\xf3 ch\u1ee9a gi\xe1 tr\u1ecb oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"m <- findOracle oracle\n")),(0,l.kt)("p",null,"N\u1ebfu ch\xfang t\xf4i kh\xf4ng t\xecm th\u1ea5y l\u1eddi ti\xean tri, ch\xfang t\xf4i s\u1ebd ch\u1ec9 ghi l\u1ea1i m\u1ed9t th\xf4ng b\xe1o v\u1ec1 hi\u1ec7u \u1ee9ng \u0111\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'case m of\n    Nothing           -> logInfo @String "oracle not found"\n')),(0,l.kt)("p",null,"N\u1ebfu ch\xfang t\xf4i t\xecm th\u1ea5y n\xf3, ch\xfang t\xf4i s\u1ebd ghi l\u1ea1i m\u1ed9t th\xf4ng b\xe1o v\u1edbi t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i hi\u1ec7n t\u1ea1i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'Just (oref, o, x) -> do\n    logInfo @String $ "found oracle, exchange rate " ++ show x    \n')),(0,l.kt)("p",null,"Ti\u1ebfp theo, ch\xfang t\xf4i ki\u1ec3m tra kh\xf3a c\xf4ng khai c\u1ee7a ri\xeang m\xecnh v\xe0 ki\u1ec3m tra t\u1ea5t c\u1ea3 c\xe1c giao d\u1ecbch ho\xe1n \u0111\u1ed5i c\xf3 s\u1eb5n."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"pkh   <- pubKeyHash <$> Contract.ownPubKey\nswaps <- findSwaps oracle (/= pkh)    \n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i s\u1eed d\u1ee5ng m\u1ed9t h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"find"),"  \u0111\xf3 l\xe0 t\u1eeb Haskell prelude,Trong module ",(0,l.kt)("inlineCode",{parentName:"p"},"Data.List"),". H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"find"),"  v\u1edbi \u0111\u1ed1i s\u1ed1 l\xe0 m\u1ed9t thu\u1ed9c t\xednh l\xe0 m\u1ed9t danh s\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe"),"  tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea7n t\u1eed ph\xf9 h\u1ee3p v\u1edbi thu\u1ed9c t\xednh \u0111\xf3."),(0,l.kt)("p",null,"H\xe0m \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong v\u1ecb t\u1eeb \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\xe0 h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"f"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"where\n    getPrice :: Integer -> TxOutTx -> Integer\n    getPrice x o = price (lovelaces $ txOutValue $ txOutTxOut o) x    \n\n    f :: Integer -> Integer -> (TxOutRef, TxOutTx, PubKeyHash) -> Bool\n    f amt x (_, o, _) = getPrice x o <= amt    \n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i cung c\u1ea5p cho n\xf3 m\u1ed9t s\u1ed1 ti\u1ec1n, t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i hi\u1ec7n t\u1ea1i v\xe0 m\u1ed9t b\u1ed9 ba UTxO. H\xe0m x\xe1c \u0111\u1ecbnh xem c\xf3 ho\xe1n \u0111\u1ed5i n\xe0o r\u1ebb h\u01a1n ho\u1eb7c b\u1eb1ng tham s\u1ed1 s\u1ed1 ti\u1ec1n hay kh\xf4ng."),(0,l.kt)("p",null,"B\xe2y gi\u1edd, ch\xfang t\xf4i \u0111\xe3 t\xecm ki\u1ebfm m\u1ed9t giao d\u1ecbch ho\xe1n \u0111\u1ed5i m\xe0 ch\xfang t\xf4i c\xf3 th\u1ec3 chi tr\u1ea3. N\u1ebfu ch\xfang t\xf4i kh\xf4ng t\xecm th\u1ea5y m\u1ed9t, ch\xfang t\xf4i s\u1ebd ghi l\u1ea1i m\u1ed9t th\xf4ng b\xe1o n\xf3i nh\u01b0 v\u1eady."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'case find (f amt x) swaps of\n    Nothing                -> logInfo @String "no suitable swap found"\n')),(0,l.kt)("p",null,"N\u1ebfu ch\xfang t\xf4i t\xecm th\u1ea5y m\u1ed9t c\xe1i, ch\xfang t\xf4i ch\u1ec9 l\u1ea5y c\xe1i \u0111\u1ea7u ti\xean. T\u1ea5t nhi\xean, \u0111i\u1ec1u n\xe0y kh\xf4ng th\u1ef1c t\u1ebf l\u1eafm. Trong m\u1ed9t v\xed d\u1ee5 th\u1ef1c t\u1ebf, ch\xfang t\xf4i c\xf3 th\u1ec3 s\u1ebd ch\u1ec9 \u0111\u1ecbnh s\u1ed1 ti\u1ec1n ch\xednh x\xe1c m\xe0 ch\xfang t\xf4i mu\u1ed1n ho\xe1n \u0111\u1ed5i. \u1ede \u0111\xe2y, ch\xfang t\xf4i ch\u1ec9 gi\u1eef n\xf3 \u0111\u01a1n gi\u1ea3n v\xec ch\xfang t\xf4i t\u1eadp trung v\xe0o m\u1ee5c ti\xeau m\u1ea5u ch\u1ed1t h\u01a1n l\xe0 ho\xe1n \u0111\u1ed5i."),(0,l.kt)("p",null,"V\xec v\u1eady, b\xe2y gi\u1edd ch\xfang ta x\xe2y d\u1ef1ng m\u1ed9t giao d\u1ecbch."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"let v = txOutValue (txOutTxOut o) <> lovelaceValueOf (oFee oracle)                \n")),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 \u0111\u1ea7u ra cho ti\xean tri. N\xf3 c\u0169ng gi\u1ed1ng nh\u01b0 \u0111\u1ea7u v\xe0o, bao g\u1ed3m b\u1ea5t k\u1ef3 kho\u1ea3n ph\xed n\xe0o \u0111\xe3 t\xedch l\u0169y \u1edf \u0111\xf3, c\u1ed9ng v\u1edbi kho\u1ea3n ph\xed trong t\xecnh y\xeau m\xe0 ch\xfang ta c\u1ea7n ph\u1ea3i tr\u1ea3."),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i t\u1ea1o m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"Value")," m\xe3 th\xf4ng b\xe1o USD  \u0111\u1ea1i di\u1ec7n m\xe0 ch\xfang t\xf4i c\u1ea7n thanh to\xe1n. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"p = assetClassValue (oAsset oracle) $ price (lovelaces $ txOutValue $ txOutTxOut o') x\n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd, ch\xfang ta h\xe3y xem x\xe9t c\xe1c r\xe0ng bu\u1ed9c."),(0,l.kt)("p",null,"R\xe0ng bu\u1ed9c \u0111\u1ea7u ti\xean l\xe0 ch\xfang ta ph\u1ea3i s\u1eed d\u1ee5ng oracle l\xe0m \u0111\u1ea7u v\xe0o. V\xe0 \u1edf \u0111\xe2y ch\xfang ta th\u1ea5y l\u1ea7n \u0111\u1ea7u ti\xean s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Redeemer"),". Ch\xfang t\xf4i ch\u01b0a bao gi\u1edd s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Redeemer")," n\xe0y trong ch\xednh l\xf5i oracle, v\xec nh\xe0 cung c\u1ea5p oracle ch\u1ec9 ch\u1ecbu tr\xe1ch nhi\u1ec7m c\u1eadp nh\u1eadt c\xe1c gi\xe1 tr\u1ecb s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Redeemer"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Constraints.mustSpendScriptOutput oref (Redeemer $ PlutusTx.toData Use)\n")),(0,l.kt)("p",null,"R\xe0ng bu\u1ed9c th\u1ee9 hai l\xe0 s\u1eed d\u1ee5ng \u0111\u1ea7u v\xe0o ho\xe1n \u0111\u1ed5i, ch\u1ec9 s\u1eed d\u1ee5ng m\u1ed9t tr\xecnh ",(0,l.kt)("inlineCode",{parentName:"p"},"Unit")," cho Redeeemer."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Constraints.mustSpendScriptOutput oref' (Redeemer $ PlutusTx.toData ())\n")),(0,l.kt)("p",null,"R\xe0ng bu\u1ed9c th\u1ee9 ba l\xe0 tr\u1ea3 ti\u1ec1n oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Constraints.mustPayToOtherScript\n    (validatorHash $ oracleValidator oracle)\n    (Datum $ PlutusTx.toData x)\n    v\n")),(0,l.kt)("p",null,"\u1ede \u0111\xe2y ch\xfang t\xf4i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"mustPayToOtherScript"),", ch\u1ec9 \u0111\u1ecbnh t\u1eadp l\u1ec7nh oracle, v\xec b\xe2y gi\u1edd ch\xfang ta c\xf3 hai t\u1eadp l\u1ec7nh \u0111ang ho\u1ea1t \u0111\u1ed9ng - t\u1eadp l\u1ec7nh oracle v\xe0 t\u1eadp l\u1ec7nh ho\xe1n \u0111\u1ed5i. Nh\u01b0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Datum"),"  ch\xfang t\xf4i s\u1eed d\u1ee5ng datum t\u1ed3n t\u1ea1i - wch\xfang t\xf4i kh\xf4ng \u0111\u01b0\u1ee3c thay \u0111\u1ed5i n\xf3 - v\xe0\nnh\u01b0 l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Value"),"  ch\xfang t\xf4i s\u1eed d\u1ee5ng gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"v"),"  m\xe0 ch\xfang t\xf4i \u0111\xe3 t\xednh to\xe1n tr\u01b0\u1edbc \u0111\xf3."),(0,l.kt)("p",null,"R\xe0ng bu\u1ed9c cu\u1ed1i c\xf9ng l\xe0 ch\xfang t\xf4i ph\u1ea3i tr\u1ea3 ti\u1ec1n cho ng\u01b0\u1eddi b\xe1n  - v\xe0 kho\u1ea3n thanh to\xe1n l\xe0 gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"p")," m\xe0 ch\xfang t\xf4i \u0111\xe3 t\xednh to\xe1n tr\u01b0\u1edbc \u0111\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Constraints.mustPayToPubKey pkh' p\n")),(0,l.kt)("p",null,"\u0110\u1ec3 tra c\u1ee9u, ch\xfang t\xf4i ph\u1ea3i cung c\u1ea5p tr\xecnh x\xe1c th\u1ef1c c\u1ee7a h\u1ee3p \u0111\u1ed3ng oracle v\xe0 ho\xe1n \u0111\u1ed5i, \u0111\u1ed3ng th\u1eddi ch\xfang t\xf4i ph\u1ea3i cung c\u1ea5p hai UTxO m\xe0 ch\xfang t\xf4i mu\u1ed1n s\u1eed d\u1ee5ng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"lookups = Constraints.otherScript (swapValidator oracle)               <>\n    Constraints.otherScript (oracleValidator oracle)                   <>\n    Constraints.unspentOutputs (Map.fromList [(oref, o), (oref', o')])\n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd, th\xf4ng th\u01b0\u1eddng - ch\xfang t\xf4i g\u1eedi n\xf3, ch\u1edd x\xe1c nh\u1eadn, sau \u0111\xf3 ghi l\u1ea1i m\u1ed9t tin nh\u1eafn."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'ledgerTx <- submitTxConstraintsWith @Swapping lookups tx\nawaitTxConfirmed $ txId ledgerTx\nlogInfo @String $ "made swap with price " ++ show (Value.flattenValue p)    \n')),(0,l.kt)("h3",{id:"g\xf3i-h\u1ee3p-\u0111\u1ed3ng-contract-bundle"},"G\xf3i h\u1ee3p \u0111\u1ed3ng (Contract bundle)"),(0,l.kt)("p",null,"\u0110i\u1ec1u \u0111\xf3 x\xe1c \u0111\u1ecbnh c\xe1c h\u1ee3p \u0111\u1ed3ng th\xf4. B\xe2y gi\u1edd, ch\xfang t\xf4i cung c\u1ea5p m\u1ed9t g\xf3i ch\u1ee9a t\u1ea5t c\u1ea3 ch\xfang."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang t\xf4i \u0111\u1ecbnh ngh\u0129a, nh\u01b0 m\u1ecdi khi, m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"SwapSchema"),", x\xe1c \u0111\u1ecbnh c\xe1c endpoints."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'type SwapSchema =\n    BlockchainActions\n        .\\/ Endpoint "offer"    Integer\n        .\\/ Endpoint "retrieve" ()\n        .\\/ Endpoint "use"      ()\n        .\\/ Endpoint "funds"    ()    \n')),(0,l.kt)("p",null,"Ti\u1ebfp theo, ch\xfang ta th\u1ea5y to\xe1n t\u1eed ",(0,l.kt)("inlineCode",{parentName:"p"},"select"),". Vi\u1ec7c s\u1eed d\u1ee5ng to\xe1n t\u1eed n\xe0y s\u1ebd khi\u1ebfn m\xe3 c\u1ee7a ch\xfang t\xf4i \u0111\u1ee3i cho \u0111\u1ebfn khi m\u1ed9t trong c\xe1c \u0111i\u1ec3m cu\u1ed1i \u0111\u01b0\u1ee3c ch\u1ecdn, r\u1ed3i th\u1ef1c thi m\xe3 \u0111\u01b0\u1ee3c li\xean k\u1ebft."),(0,l.kt)("p",null,"C\xe1c h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"swap"),"  \u0111\u1ec7 quy g\u1ecdi ch\xednh n\xf3, cung c\u1ea5p m\u1ed9t l\u1ea7n n\u1eefa v\xe0 m\u1ed9t l\u1ea7n n\u1eefa l\u1ef1a ch\u1ecdn c\xf9ng m\u1ed9t endpoints."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'swap :: Oracle -> Contract (Last Value) SwapSchema Text ()\nswap oracle = (offer `select` retrieve `select` use `select` funds) >> swap oracle\n    where\n        offer :: Contract (Last Value) SwapSchema Text ()\n        offer = h $ do\n            amt <- endpoint @"offer"\n            offerSwap oracle amt\n\n        retrieve :: Contract (Last Value) SwapSchema Text ()\n        retrieve = h $ do\n            endpoint @"retrieve"\n            retrieveSwaps oracle\n\n        use :: Contract (Last Value) SwapSchema Text ()\n        use = h $ do\n            endpoint @"use"\n            useSwap oracle\n\n        funds :: Contract (Last Value) SwapSchema Text ()\n        funds = h $ do\n            endpoint @"funds"\n            v <- ownFunds\n            tell $ Last $ Just v\n\n        h :: Contract (Last Value) SwapSchema Text () -> Contract (Last Value) SwapSchema Text ()\n        h = handleError logError    \n')),(0,l.kt)("p",null,"M\xe3 cho b\u1ed1n endpoint l\xe0 tr\xecnh bao b\u1ecdc cho m\xe3 ch\xfang ta \u0111\xe3 vi\u1ebft."),(0,l.kt)("p",null,"V\xed d\u1ee5 ",(0,l.kt)("inlineCode",{parentName:"p"},"offer"),", wch\xfang t\xf4i ch\u1eb7n cho \u0111\u1ebfn khi ch\xfang t\xf4i \u0111\u01b0\u1ee3c cung c\u1ea5p ",(0,l.kt)("inlineCode",{parentName:"p"},"amt")," v\xe0 sau \u0111\xf3 g\u1ecdi contract ",(0,l.kt)("inlineCode",{parentName:"p"},"offerSwap"),"  ."),(0,l.kt)("p",null,"\u0110\u1ed1i v\u1edbi endpoints ",(0,l.kt)("inlineCode",{parentName:"p"},"retrieve"),"  v\xe0  ",(0,l.kt)("inlineCode",{parentName:"p"},"use"),"  ,ch\xfang kh\xf4ng c\u1ea7n tham s\u1ed1."),(0,l.kt)("p",null,"cu\u1ed1i c\xf9ng l\xe0 endpoint ",(0,l.kt)("inlineCode",{parentName:"p"},"funds"),", n\xf3 th\xec kh\xe1c m\u1ed9t ch\xfat. h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds"),"xu\u1ea5t ph\xe1t t\u1eeb m\xf4-\u0111un ",(0,l.kt)("inlineCode",{parentName:"p"},"Funds")," , ch\xfang ta \u0111\xe3 \u0111\u1ec1 c\u1eadp tr\u01b0\u1edbc \u0111\xf3, Chung ta th\u1ea5y, n\xf3 ch\u1ee9a m\u1ed9t gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"Value")," m\xe0 n\xf3 s\u1edf h\u1ee9u. sau \u0111\xf3 ch\xfang ta ",(0,l.kt)("inlineCode",{parentName:"p"},"tell")," gi\xe1 tr\u1ecb n\xe0y  nh\u01b0 m\u1ed9t c\xe1ch b\xe1o c\xe1o v\u1edbi th\u1ebf gi\u1edbi b\xean ngo\xe0i r\u1eb1ng ch\xfang t\xf4i c\xf3 bao nhi\xeau."),(0,l.kt)("p",null,"Trong hm\u1ed7i \u0111i\u1ec3m cu\u1ed1i l\xe0 m\u1ed9t tr\xecnh x\u1eed l\xfd l\u1ed7 ",(0,l.kt)("inlineCode",{parentName:"p"},"h"),". M\u1ed7i \u0111i\u1ec3m cu\u1ed1i \u0111\u01b0\u1ee3c bao b\u1ecdc b\xean trong tr\xecnh x\u1eed l\xfd l\u1ed7i, tr\xecnh n\xe0y ch\u1ec9 ghi l\u1ea1i l\u1ed7i, nh\u01b0ng kh\xf4ng t\u1ea1m d\u1eebng th\u1ef1c thi."),(0,l.kt)("p",null,"V\xe0 \u0111i\u1ec1u \u0111\xf3 k\u1ebft th\xfac v\xed d\u1ee5 ho\xe1n \u0111\u1ed5i."),(0,l.kt)("h2",{id:"funds-module"},"Funds Module"),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta h\xe3y nhanh ch\xf3ng xem x\xe9t m\xf4-\u0111un ",(0,l.kt)("inlineCode",{parentName:"p"},"Funds"),". \u0110\xf3 l\xe0 m\u1ed9t m\xf4-\u0111un ng\u1eafn cung c\u1ea5p hai h\u1ee3p \u0111\u1ed3ng."),(0,l.kt)("p",null,"C\xe1c h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds"),"  \u0111\u01b0\u1ee3c giao nhi\u1ec7m v\u1ee5 t\u1ed5ng h\u1ee3p t\u1ea5t c\u1ea3 c\xe1c gi\xe1 tr\u1ecb trong c\xe1c UTxOs c\u1ee7a ch\xfang."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'ownFunds :: HasBlockchainActions s => Contract w s Text Value\nownFunds = do\n    pk    <- ownPubKey\n    utxos <- utxoAt $ pubKeyAddress pk\n    let v = mconcat $ Map.elems $ txOutValue . txOutTxOut <$> utxos\n    logInfo @String $ "own funds: " ++ show (Value.flattenValue v)\n    return v\n')),(0,l.kt)("p",null,"N\xf3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\xe0y b\u1eb1ng c\xe1ch tra c\u1ee9u kh\xf3a c\xf4ng khai c\u1ee7a ch\xfang, sau \u0111\xf3 nh\u1eadn t\u1ea5t c\u1ea3 c\xe1c UTxO t\u1ea1i \u0111\u1ecba ch\u1ec9 kh\xf3a c\xf4ng khai \u0111\xf3. Sau \u0111\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"utxos")," l\xe0 m\u1ed9t b\u1ea3n \u0111\u1ed3 t\u1eeb c\xe1c tham chi\u1ebfu UTxO \u0111\u1ebfn c\xe1c UTxO."),(0,l.kt)("p",null,"nh\u01b0 ",(0,l.kt)("inlineCode",{parentName:"p"},"map"),"  th\u1ef1c hi\u1ec7n ",(0,l.kt)("inlineCode",{parentName:"p"},"Functor"),"  h\xfang t\xf4i c\xf3 th\u1ec3 \xe1nh x\u1ea1 tr\xean b\u1ea3n \u0111\u1ed3 \u0111\u1ec3 thay \u0111\u1ed5i c\xe1c y\u1ebfu t\u1ed1 th\xe0nh m\u1ed9t c\xe1i g\xec \u0111\xf3 kh\xe1c. Trong tr\u01b0\u1eddng h\u1ee3p n\xe0y, ch\xfang t\xf4i thay \u0111\u1ed5i ch\xfang th\xe0nh gi\xe1 tr\u1ecb b\u1eb1ng c\xe1ch \xe1p d\u1ee5ng h\xe0m t\u1ed5ng h\u1ee3p ",(0,l.kt)("inlineCode",{parentName:"p"},"txOutValue"),"  . ",(0,l.kt)("inlineCode",{parentName:"p"},"txOutTxOut"),"."),(0,l.kt)("p",null,"C\xe1c h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"Map.elems"),"  b\u1ecf qua c\xe1c ph\xedm v\xe0 ch\u1ec9 cho ch\xfang ta c\xe1c gi\xe1 tr\u1ecb. V\xe0, nh\u01b0 ch\xfang ta \u0111\xe3 th\u1ea5y tr\u01b0\u1edbc \u0111\xe2y ",(0,l.kt)("inlineCode",{parentName:"p"},"mconcat"),"khi \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1ed9t ki\u1ec3u ",(0,l.kt)("inlineCode",{parentName:"p"},"Semigroup"),"  or ",(0,l.kt)("inlineCode",{parentName:"p"},"Monoid"),"s\u1ebd k\u1ebft h\u1ee3p danh s\xe1ch c\xe1c gi\xe1 tr\u1ecb th\xe0nh m\u1ed9t gi\xe1 tr\u1ecb."),(0,l.kt)("p",null,"V\xec v\u1eady,  ",(0,l.kt)("inlineCode",{parentName:"p"},"v"),"  kh\xf4ng ph\u1ea3i l\xe0 t\u1ed5ng c\u1ee7a t\u1ea5t c\u1ea3 c\xe1c gi\xe1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\xe1c UTxO m\xe0 ch\xfang ta s\u1edf h\u1eefu.\nH\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds"),"  c\u1ee7a ch\xfang t\xf4i l\xe0 m\u1ed9t h\u1ee3p \u0111\u1ed3ng c\xf3 ki\u1ec3u tr\u1ea3 v\u1ec1 gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"v"),"."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds'")," l\xe0 m\u1ed9t bi\u1ebfn th\u1ec3, thay v\xec tr\u1ea3 v\u1ec1 gi\xe1 tr\u1ecb, n\xf3 s\u1ebd v\u0129nh vi\u1ec5n l\xe0 tell. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"ownFunds' :: Contract (Last Value) BlockchainActions Text ()\nownFunds' = do\n    handleError logError $ ownFunds >>= tell . Last . Just\n    void $ Contract.waitNSlots 1\n    ownFunds'\n")),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y g\u1ecdi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds"),"  th\u1ef1c hi\u1ec7n li\xean k\u1ebft \u0111\u01a1n nguy\xean v\u1edbi h\xe0m t\u1ed5ng h\u1ee3p ",(0,l.kt)("inlineCode",{parentName:"p"},"tell . Last . Just"),"  w\xe0y cho bi\u1ebft gi\xe1 tr\u1ecb, sau \u0111\xf3 n\xf3 \u0111\u1ee3i m\u1ed9t v\u1ecb tr\xed v\xe0 sau \u0111\xf3 g\u1ecdi ch\xednh n\xf3. V\xec v\u1eady, m\u1ed7i kh\u1ed1i, n\xf3 ghi gi\xe1 tr\u1ecb v\xe0o nh\u1eadt k\xfd."),(0,l.kt)("h2",{id:"testing"},"Testing"),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang t\xf4i s\u1ebd vi\u1ebft m\xe3, s\u1eed d\u1ee5ng  ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace"),"  monad, ki\u1ec3m tra c\xe1c h\u1ee3p \u0111\u1ed3ng ch\xfang t\xf4i \u0111\xe3 vi\u1ebft."),(0,l.kt)("p",null,"M\xe3 n\xe0y c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c t\xecm th\u1ea5y trong m\xf4-\u0111un sau:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"module Week06.Oracle.Test\n")),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang ta c\u1ea7n x\xe1c \u0111\u1ecbnh m\u1ed9t m\xe3 th\xf4ng b\xe1o m\xe0 ch\xfang ta c\xf3 th\u1ec3 ki\u1ec3m tra. ",(0,l.kt)("inlineCode",{parentName:"p"},"assetSymbol")," l\xe0 m\u1ed9t h\xe0m b\u0103m t\xf9y \xfd, d\xf9ng \u0111\u01b0\u1ee3c cho c\xe1c m\u1ee5c \u0111\xedch th\u1eed nghi\u1ec7m."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'assetSymbol :: CurrencySymbol\nassetSymbol = "ff"\n\nassetToken :: TokenName\nassetToken = "USDT"\n')),(0,l.kt)("p",null,"L\u1ea7n n\xe0y ch\xfang ta s\u1ebd s\u1eed d\u1ee5ng phi\xean b\u1ea3n m\u1ed3i c\u1ee7a ",(0,l.kt)("inlineCode",{parentName:"p"},"runEmulatorTraceIO"),", l\u1ea5y th\xeam hai \u0111\u1ed1i s\u1ed1 v\xe0 cung c\u1ea5p nhi\u1ec1u chi ti\u1ebft h\u01a1n cho m\xf4i tr\u01b0\u1eddng gi\u1ea3 l\u1eadp."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"test :: IO ()\ntest = runEmulatorTraceIO' def emCfg myTrace\n  where\n    emCfg :: EmulatorConfig\n    emCfg = EmulatorConfig $ Left $ Map.fromList [(Wallet i, v) | i <- [1 .. 10]]\n\n    v :: Value\n    v = Ada.lovelaceValueOf                    100_000_000 <>\n        Value.singleton assetSymbol assetToken 100_000_000    \n")),(0,l.kt)("p",null,"\u0110\u1ed1i s\u1ed1 \u0111\u1ea7u ti\xean \u0111\u1ec3 ",(0,l.kt)("inlineCode",{parentName:"p"},"runEmulatorTraceIO'"),"  x\xe1c \u0111\u1ecbnh c\xe1ch hi\u1ec3n th\u1ecb c\xe1c th\xf4ng b\xe1o nh\u1eadt k\xfd kh\xe1c nhau. B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng  ",(0,l.kt)("inlineCode",{parentName:"p"},"def"),", ch\xfang t\xf4i \u0111\xe3 ch\u1ecdn m\u1eb7c \u0111\u1ecbnh, gi\u1ed1ng nh\u01b0 trong phi\xean b\u1ea3n kh\xf4ng c\xf3 b\u1ea3n quy\u1ec1n."),(0,l.kt)("p",null,"L\xfd do ch\xfang t\xf4i \u0111ang s\u1eed d\u1ee5ng phi\xean b\u1ea3n m\u1ed3i l\xe0 ch\xfang t\xf4i mu\u1ed1n \u0111\u1ecbnh c\u1ea5u h\xecnh ph\xe2n ph\u1ed1i ban \u0111\u1ea7u v\xe0 ch\xfang t\xf4i c\xf3 th\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u \u0111\xf3 v\u1edbi \u0111\u1ed1i s\u1ed1 th\u1ee9 hai, m\xe0 \u1edf \u0111\xe2y ch\xfang t\xf4i \u0111\xe3 g\u1eafn nh\xe3n ",(0,l.kt)("inlineCode",{parentName:"p"},"emCfg"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"emCfg :: EmulatorConfig\nemCfg = EmulatorConfig $ Left $ Map.fromList [(Wallet i, v) | i <- [1 .. 10]]\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1eed d\u1ee5ng \u0111i\u1ec1u n\xe0y v\u1edbi h\xe0m tr\u1ee3 gi\xfap ",(0,l.kt)("inlineCode",{parentName:"p"},"v"),"  \u0111\u1ec3 cung c\u1ea5p cho m\u1ecdi ng\u01b0\u1eddi 100 tri\u1ec7u lovelace (100 Ada) and 100 tri\u1ec7u USD Tokens \u0111\u1ec3 b\u1eaft \u0111\u1ea7u."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"v :: Value\nv = Ada.lovelaceValueOf                    100_000_000 <>\n    Value.singleton assetSymbol assetToken 100_000_000\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i x\xe1c \u0111\u1ecbnh m\u1ed9t h\u1ee3p \u0111\u1ed3ng tr\u1ee3 gi\xfap  ",(0,l.kt)("inlineCode",{parentName:"p"},"checkOracle"),", n\xf3 s\u1ebd li\xean t\u1ee5c ki\u1ec3m tra gi\xe1 tr\u1ecb oracle v\xe0 ghi l\u1ea1i n\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'checkOracle :: Oracle -> Contract () BlockchainActions Text a\ncheckOracle oracle = do\n    m <- findOracle oracle\n    case m of\n        Nothing        -> return ()\n        Just (_, _, x) -> Contract.logInfo $ "Oracle value: " ++ show x\n    Contract.waitNSlots 1 >> checkOracle oracle\n')),(0,l.kt)("p",null,"V\xe0 b\xe2y gi\u1edd ch\xfang ta c\xf3 th\u1ec3 x\xe1c \u0111\u1ecbnh d\u1ea5u v\u1ebft c\u1ee7a m\xecnh."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'myTrace :: EmulatorTrace ()\nmyTrace = do\n    let op = OracleParams\n                { opFees = 1_000_000\n                , opSymbol = assetSymbol\n                , opToken  = assetToken\n                }\n\n    h1 <- activateContractWallet (Wallet 1) $ runOracle op\n    void $ Emulator.waitNSlots 1\n    oracle <- getOracle h1\n\n    void $ activateContractWallet (Wallet 2) $ checkOracle oracle\n\n    callEndpoint @"update" h1 1_500_000\n    void $ Emulator.waitNSlots 3\n\n    void $ activateContractWallet (Wallet 1) ownFunds\'\n    void $ activateContractWallet (Wallet 3) ownFunds\'\n    void $ activateContractWallet (Wallet 4) ownFunds\'\n    void $ activateContractWallet (Wallet 5) ownFunds\'\n\n    h3 <- activateContractWallet (Wallet 3) $ swap oracle\n    h4 <- activateContractWallet (Wallet 4) $ swap oracle\n    h5 <- activateContractWallet (Wallet 5) $ swap oracle\n\n    callEndpoint @"offer" h3 10_000_000\n    callEndpoint @"offer" h4 20_000_000\n    void $ Emulator.waitNSlots 3\n\n    callEndpoint @"use" h5 ()\n    void $ Emulator.waitNSlots 3\n\n    callEndpoint @"update" h1 1_700_000\n    void $ Emulator.waitNSlots 3\n\n    callEndpoint @"use" h5 ()\n    void $ Emulator.waitNSlots 3\n\n    callEndpoint @"update" h1 1_800_000\n    void $ Emulator.waitNSlots 3\n\n    callEndpoint @"retrieve" h3 ()\n    callEndpoint @"retrieve" h4 ()\n    void $ Emulator.waitNSlots 3\n  where\n    getOracle :: ContractHandle (Last Oracle) OracleSchema Text -> EmulatorTrace Oracle\n    getOracle h = do\n        l <- observableState h\n        case l of\n            Last Nothing       -> Emulator.waitNSlots 1 >> getOracle h\n            Last (Just oracle) -> Extras.logInfo (show oracle) >> return oracle\n')),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 t\u1ea5t c\u1ea3 nh\u1eefng th\u1ee9 m\xe0 ch\xfang ta \u0111\xe3 th\u1ea5y. Ch\xfang t\xf4i x\xe1c \u0111\u1ecbnh c\xe1c tham s\u1ed1 oracle c\u1ee7a m\xecnh, \u0111\u1eb7t m\u1ee9c ph\xed oracle \u1edf m\u1ee9c 1 tri\u1ec7u lovelace v\xe0 lo\u1ea1i t\xe0i s\u1ea3n t\xf9y \xfd c\u1ee7a ch\xfang t\xf4i \u0111\xe3 x\xe1c \u0111\u1ecbnh tr\u01b0\u1edbc \u0111\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"let op = OracleParams\n    { opFees = 1_000_000\n    , opSymbol = assetSymbol\n    , opToken  = assetToken\n    }    \n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i b\u1eaft \u0111\u1ea7u m\u1ed9t oracle v\xe0 ch\u1edd m\u1ed9t slot."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"h1 <- activateContractWallet (Wallet 1) $ runOracle op\nvoid $ Emulator.waitNSlots 1\noracle <- getOracle h1\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i \u0111\xe3 n\u1eafm b\u1eaft \u0111\u01b0\u1ee3c m\u1ed9t x\u1eed l\xfd \u0111\u1ed1i v\u1edbi oracle b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng tr\u1ee3 gi\xfap \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong m\u1ec7nh \u0111\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," ."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"getOracle :: ContractHandle (Last Oracle) OracleSchema Text -> EmulatorTrace Oracle\ngetOracle h = do\n    l <- observableState h\n    case l of\n        Last Nothing       -> Emulator.waitNSlots 1 >> getOracle h\n        Last (Just oracle) -> Extras.logInfo (show oracle) >> return oracle\n")),(0,l.kt)("p",null,"Ch\xfang ta c\u1ea7n \u0111i\u1ec1u n\xe0y v\xec h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i \u0111\u01b0\u1ee3c tham s\u1ed1 h\xf3a v\u1edbi gi\xe1 tr\u1ecb oracle. V\xe0 \u0111\xe2y l\xe0 l\xfd do t\u1ea1i sao ch\xfang t\xf4i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"tell"),"  trong h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle"),"."),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1eed d\u1ee5ng h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"observableState"),"  \u0111\u1ec3 n\u1eafm gi\u1eef th\xf4ng tin n\xe0y. N\u1ebfu n\xf3 kh\xf4ng t\u1ed3n t\u1ea1i, ch\xfang t\xf4i \u0111\u1ee3i m\u1ed9t v\u1ecb tr\xed v\xe0 th\u1eed l\u1ea1i. N\u1ebfu kh\xf4ng, ch\xfang t\xf4i ghi l\u1ea1i n\xf3 cho m\u1ee5c \u0111\xedch g\u1ee1 l\u1ed7i v\xe0 tr\u1ea3 l\u1ea1i n\xf3."),(0,l.kt)("p",null,"Ti\u1ebfp theo, ch\xfang t\xf4i s\u1eed d\u1ee5ng Wallet 2 \u0111\u1ec3 th\u1ef1c thi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"checkOracle"),"  m\xe0 ch\xfang t\xf4i \u0111\xe3 th\u1ea5y tr\u01b0\u1edbc \u0111\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"void $ activateContractWallet (Wallet 2) $ checkOracle oracle\n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i kh\u1edfi t\u1ea1o oracle v\u1edbi t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i l\xe0 1,5 Ada v\xe0 \u0111\u1ee3i 3 slots."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'callEndpoint @"update" h1 1_500_000\nvoid $ Emulator.waitNSlots 3\n')),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta g\u1ecdi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"ownFunds'"),"  tr\xean v\xed 1, 3, 4 v\xe0 5 \u0111\u1ec3 ki\u1ec3m tra s\u1ed1 d\u01b0 ban \u0111\u1ea7u."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"void $ activateContractWallet (Wallet 1) ownFunds'\nvoid $ activateContractWallet (Wallet 3) ownFunds'\nvoid $ activateContractWallet (Wallet 4) ownFunds'\nvoid $ activateContractWallet (Wallet 5) ownFunds'    \n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i b\u1eaft \u0111\u1ea7u h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i tr\xean V\xed 3, 4 v\xe0 5."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"h3 <- activateContractWallet (Wallet 3) $ swap oracle\nh4 <- activateContractWallet (Wallet 4) $ swap oracle\nh5 <- activateContractWallet (Wallet 5) $ swap oracle\n")),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i th\u1eed m\u1ed9t s\u1ed1 k\u1ecbch b\u1ea3n. \u0110\u1ea7u ti\xean, V\xed 3 v\xe0 4 l\u1ea7n l\u01b0\u1ee3t cung c\u1ea5p 10 v\xe0 20 Ada \u0111\u1ec3 ho\xe1n \u0111\u1ed5i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'callEndpoint @"offer" h3 10_000_000\ncallEndpoint @"offer" h4 20_000_000\nvoid $ Emulator.waitNSlots 3\n')),(0,l.kt)("p",null,"V\xe0 b\xe2y gi\u1edd V\xed 5 s\u1eed d\u1ee5ng ho\xe1n \u0111\u1ed5i. N\xf3 s\u1ebd ch\u1ecdn m\u1ed9t trong hai. Kh\xf4ng r\xf5 c\xe1i n\xe0o, c\xe1i n\xe0o t\xecm tr\u01b0\u1edbc. H\xe3y nh\u1edb r\u1eb1ng ch\xfang t\xf4i ch\u1ec9 vi\u1ebft m\xe3 \u0111\u1ec3 t\xecm v\u1ecb tr\xed \u0111\u1ea7u ti\xean c\xf3 gi\xe1 c\u1ea3 ph\u1ea3i ch\u0103ng. Sau \u0111\xf3, n\xf3 s\u1ebd tr\u1ea3 USD Token cho n\xf3. S\u1ed1 ti\u1ec1n \u0111\u01b0\u1ee3c tr\u1ea3 s\u1ebd ph\u1ee5 thu\u1ed9c v\xe0o gi\xe1 tr\u1ecb hi\u1ec7n t\u1ea1i c\u1ee7a oracle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'callEndpoint @"use" h5 ()\nvoid $ Emulator.waitNSlots 3    \n')),(0,l.kt)("p",null,"B\xe2y gi\u1edd, Wallet 1 c\u1eadp nh\u1eadt gi\xe1 tr\u1ecb oracle l\xean 1,7. \u0110i\u1ec1u n\xe0y c\u0169ng d\u1eabn \u0111\u1ebfn ph\xed t\xedch l\u0169y (1 Ada) \u0111\u01b0\u1ee3c tr\u1ea3 cho V\xed 1."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},'callEndpoint @\\"update\\" h1 1',"_","700","_","000 void \\$ Emulator.waitNSlots 3")),(0,l.kt)("p",null,"Sau \u0111\xf3, Wallet 5 th\u1eed l\u1ea1i, l\u1ea5y ph\u1ea7n ho\xe1n \u0111\u1ed5i c\xf2n l\u1ea1i, nh\u01b0ng hi\u1ec7n \u0111ang tr\u1ea3 m\u1ed9t gi\xe1 USD Token kh\xe1c."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'callEndpoint @"use" h5 ()\nvoid $ Emulator.waitNSlots 3\n')),(0,l.kt)("p",null,"Sau \u0111\xf3, ch\xfang t\xf4i \u0111\u1eb7t gi\xe1 tr\u1ecb oracle th\xe0nh 1,8."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'callEndpoint @"update" h1 1_800_000\nvoid $ Emulator.waitNSlots 3\n')),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y s\u1ebd cho ph\xe9p Wallet 1 thu ph\xed. Gi\xe1 tr\u1ecb oracle th\u1ef1c s\u1ef1 kh\xf4ng c\u1ea7n ph\u1ea3i thay \u0111\u1ed5i \u0111\u1ec3 \u0111i\u1ec1u n\xe0y x\u1ea3y ra."),(0,l.kt)("p",null,"V\xed 3 v\xe0 4 hi\u1ec7n \u0111\u01b0a ra ",(0,l.kt)("inlineCode",{parentName:"p"},"retrieve")," y\xeau c\u1ea7u l\u1ea5y l\u1ea1i b\u1ea5t k\u1ef3 kho\u1ea3n ti\u1ec1n n\xe0o ch\u01b0a \u0111\u01b0\u1ee3c mua. \u0110i\u1ec1u n\xe0y s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c kh\xf4ng c\xf3 ti\u1ec1n \u0111\u01b0\u1ee3c tr\u1ea3 l\u1ea1i v\xec t\u1ea5t c\u1ea3 c\xe1c kho\u1ea3n ho\xe1n \u0111\u1ed5i \u0111\xe3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'callEndpoint @"retrieve" h3 ()\ncallEndpoint @"retrieve" h4 ()\nvoid $ Emulator.waitNSlots 3\n')),(0,l.kt)("p",null,"V\xe0 \u0111\xe2y l\xe0 to\xe0n b\u1ed9 code. V\xec v\u1eady, h\xe3y ch\u1ea1y n\xf3 trong REPL."),(0,l.kt)("h3",{id:"test-in-the-repl"},"Test in the REPL"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"Prelude Week06.Oracle.Core> import Week06.Oracle.Test\nPrelude Week06.Oracle.Test Week06.Oracle.Core> test\n")),(0,l.kt)("p",null,"S\u1ebd c\xf3 r\u1ea5t nhi\u1ec1u \u0111\u1ea7u ra."),(0,l.kt)("p",null,"H\xe3y xem x\xe9t m\u1ed9t s\u1ed1 ph\u1ea7n ch\xednh. \u0110\u1ea7u ti\xean, slot 3, n\u01a1i t\u1ea1o ra oracle. \u1ede \u0111\xe2y ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"oSymbol"),"  m\xe0 ch\xfang t\xf4i c\xf3 th\u1ec3 s\u1eed d\u1ee5ng cho m\u1ecdi th\u1ee9 kh\xe1c."),(0,l.kt)("p",null,"Ch\xfang t\xf4i c\u0169ng th\u1ea5y trong v\u1ecb tr\xed s\u1ed1 3 ",(0,l.kt)("inlineCode",{parentName:"p"},"getOracle")," \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u s\u1ebd ghi l\u1ea1i gi\xe1 tr\u1ecb c\u1ee7a oracle, \u0111\u1ec3 bi\u1ebft th\xf4ng tin c\u1ee7a ch\xfang t\xf4i, m\u1ecdi v\u1ecb tr\xed k\u1ec3 t\u1eeb b\xe2y gi\u1edd."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00003: ```  CONTRACT LOG: "started oracle Oracle {oSymbol = 6122edd57c938cda24066f434da9aee55120b4eb362d4a1bd37547ef6e4a6cbb, oOperator = 21fe31dfa154a261626bf854046fd2271b7bed4b6abe45aa58877ef47f9721b9, oFee = 1000000, oAsset = (ff,\\"USDT\\")}"\nSlot 00003: 00000000-0000-4000-8000-000000000000 {Contract instance for wallet 1}:\n  Sending contract state to Thread 0\nSlot 00003: ```  USER LOG: Oracle {oSymbol = 6122edd57c938cda24066f434da9aee55120b4eb362d4a1bd37547ef6e4a6cbb, oOperator = 21fe31dfa154a261626bf854046fd2271b7bed4b6abe45aa58877ef47f9721b9, oFee = 1000000, oAsset = (ff,"USDT")}\nSlot 00003: 00000000-0000-4000-8000-000000000001 {Contract instance for wallet 2}:\n  Contract instance started\nSlot 00003: 00000000-0000-4000-8000-000000000000 {Contract instance for wallet 1}:\n  Receive endpoint call: Object (fromList [("tag",String "update"),("value",Object (fromList [("unEndpointValue",Number 1500000.0)]))])\nSlot 00003: W1: TxSubmit: 93fab1c0845a5b96863a50d248fa2de68bd6702185e3de92ae0c58b869569909\nSlot 00003: TxnValidate 93fab1c0845a5b96863a50d248fa2de68bd6702185e3de92ae0c58b869569909\n')),(0,l.kt)("p",null,"V\xe0, v\u1ecb tr\xed th\u1ee9 4, ch\xfang ta th\u1ea5y gi\xe1 tr\u1ecb \u0111\u1ea7u ti\xean ",(0,l.kt)("inlineCode",{parentName:"p"},"getOracle")," t\xecm th\u1ea5y l\xe0 1.500.000."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00004: ```  CONTRACT LOG: "Oracle value: 1500000"\nSlot 00004: ```  CONTRACT LOG: "set initial oracle value to 1500000"\n')),(0,l.kt)("p",null,"V\u1ecb tr\xed 6 l\xe0 k\u1ebft qu\u1ea3 c\u1ee7a t\u1ea5t c\u1ea3 c\xe1c l\u1ea7n g\u1ecdi ",(0,l.kt)("inlineCode",{parentName:"p"},"activateContractWallet"),". Ch\xfang kh\xf4ng nh\u1ea5t thi\u1ebft ph\u1ea3i xu\u1ea5t hi\u1ec7n theo th\u1ee9 t\u1ef1 nh\u01b0 trong m\xe3. L\u01b0u \xfd r\u1eb1ng V\xed 1 c\xf3 \xedt Ada h\u01a1n m\u1ed9t ch\xfat so v\u1edbi c\xe1c v\xed kh\xe1c. \u0110i\u1ec1u n\xe0y l\xe0 do V\xed 1 startOracle v\xe0 c\u1ea7n ph\u1ea3i tr\u1ea3 ph\xed giao d\u1ecbch cho vi\u1ec7c \u0111\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00006: 00000000-0000-4000-8000-000000000002 {Contract instance for wallet 1}:\n  Contract instance started\nSlot 00006: 00000000-0000-4000-8000-000000000003 {Contract instance for wallet 3}:\n  Contract instance started\nSlot 00006: 00000000-0000-4000-8000-000000000004 {Contract instance for wallet 4}:\n  Contract instance started\nSlot 00006: ```  CONTRACT LOG: "own funds: [(,\\"\\",99999970),(ff,\\"USDT\\",100000000)]"\nSlot 00006: 00000000-0000-4000-8000-000000000005 {Contract instance for wallet 5}:\n  Contract instance started\nSlot 00006: ```  CONTRACT LOG: "own funds: [(,\\"\\",100000000),(ff,\\"USDT\\",100000000)]"\nSlot 00006: 00000000-0000-4000-8000-000000000006 {Contract instance for wallet 3}:\n  Contract instance started\nSlot 00006: ```  CONTRACT LOG: "own funds: [(,\\"\\",100000000),(ff,\\"USDT\\",100000000)]"\nSlot 00006: 00000000-0000-4000-8000-000000000007 {Contract instance for wallet 4}:\n  Contract instance started\nSlot 00006: ```  CONTRACT LOG: "own funds: [(,\\"\\",100000000),(ff,\\"USDT\\",100000000)]"\nSlot 00006: 00000000-0000-4000-8000-000000000008 {Contract instance for wallet 5}:\n  Contract instance started\nSlot 00006: ```  CONTRACT LOG: "Oracle value: 1500000"\nSlot 00006: 00000000-0000-4000-8000-000000000006 {Contract instance for wallet 3}:\n  Receive endpoint call: Object (fromList [("tag",String "offer"),("value",Object (fromList [("unEndpointValue",Number 1.0e7)]))])\nSlot 00006: W3: TxSubmit: 8274315b83fb8b4d721146a75772cf39be3f96730557bd6021235864f0f37bc6\nSlot 00006: 00000000-0000-4000-8000-000000000007 {Contract instance for wallet 4}:\n  Receive endpoint call: Object (fromList [("tag",String "offer"),("value",Object (fromList [("unEndpointValue",Number 2.0e7)]))])\nSlot 00006: W4: TxSubmit: 221f86cc1d6087a5967793aaf9eb078d8ec0677b2d6aca586f985f6f2c57a100\nSlot 00006: TxnValidate 221f86cc1d6087a5967793aaf9eb078d8ec0677b2d6aca586f985f6f2c57a100\nSlot 00006: TxnValidate 8274315b83fb8b4d721146a75772cf39be3f96730557bd6021235864f0f37bc6\n')),(0,l.kt)("p",null,"Slot 7, c\xe1c \u01b0u \u0111\xe3i c\u1ee7a 10 Ada v\xe0 20 Ada \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00007: ```  CONTRACT LOG: "own funds: [(,\\"\\",99999970),(ff,\\"USDT\\",100000000)]"\nSlot 00007: ```  CONTRACT LOG: "offered 10000000 lovelace for swap"\nSlot 00007: ```  CONTRACT LOG: "own funds: [(,\\"\\",89999990),(ff,\\"USDT\\",100000000)]"\nSlot 00007: ```  CONTRACT LOG: "offered 20000000 lovelace for swap"\nSlot 00007: ```  CONTRACT LOG: "own funds: [(,\\"\\",79999990),(ff,\\"USDT\\",100000000)]"\nSlot 00007: ```  CONTRACT LOG: "own funds: [(,\\"\\",100000000),(ff,\\"USDT\\",100000000)]"\nSlot 00007: ```  CONTRACT LOG: "Oracle value: 1500000"\n')),(0,l.kt)("p",null,"Trong v\u1ecb tr\xed 9, c\xe1i \u0111\u1ea7u ti\xean ",(0,l.kt)("inlineCode",{parentName:"p"},"use")," \u0111\u01b0\u1ee3c y\xeau c\u1ea7u."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.Slot",metastring:"00009: 00000000-0000-4000-8000-000000000008 {Contract instance for wallet 5}:","00009:":!0,"00000000-0000-4000-8000-000000000008":!0,"{Contract":!0,instance:!0,for:!0,wallet:!0,"5}:":!0},'Receive endpoint call: Object (fromList [(\\"tag\\",String \\"use\\"),(\\"value\\",Object (fromList [(\\"unEndpointValue\\",Array [])]))])\nSlot 00009: ```  CONTRACT LOG: \\"own funds: [(,\\\\\\"\\\\\\",100000000),(ff,\\\\\\"USDT\\\\\\",100000000)]\\"\nSlot 00009: ```  CONTRACT LOG: \\"available assets: 100000000\\"\nSlot 00009: ```  CONTRACT LOG: \\"found oracle, exchange rate 1500000\\"\nSlot 00009: W5: TxSubmit: 35d38def28dd6f5d016bee056e227501b97b2bb3ed2192e364242f01319e5e56\nSlot 00009: TxnValidate 35d38def28dd6f5d016bee056e227501b97b2bb3ed2192e364242f01319e5e56}\n')),(0,l.kt)("p",null,"V\xe0 \u1edf v\u1ecb tr\xed s\u1ed1 10, ch\xfang ta th\u1ea5y s\u1ef1 ho\xe1n \u0111\u1ed5i x\u1ea3y ra."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00010: ```  CONTRACT LOG: "own funds: [(,\\"\\",99999970),(ff,\\"USDT\\",100000000)]"\nSlot 00010: ```  CONTRACT LOG: "own funds: [(,\\"\\",89999990),(ff,\\"USDT\\",100000000)]"\nSlot 00010: ```  CONTRACT LOG: "own funds: [(,\\"\\",79999990),(ff,\\"USDT\\",130000000)]"\nSlot 00010: ```  CONTRACT LOG: "made swap with price [(ff,\\"USDT\\",30000000)]"\nSlot 00010: ```  CONTRACT LOG: "own funds: [(,\\"\\",118999990),(ff,\\"USDT\\",70000000)]"\n')),(0,l.kt)("p",null,"The oracle nh\u1eadn v\xe0 c\u1eadp nh\u1eadt y\xeau c\u1ea7u trong slot 12."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00012: 00000000-0000-4000-8000-000000000000 {Contract instance for wallet 1}:\n  Receive endpoint call: Object (fromList [("tag",String "update"),("value",Object (fromList [("unEndpointValue",Number 1700000.0)]))])\nSlot 00012: W1: TxSubmit: ff7e1fbfb51897b100dcfdf551ad9a03886432af0a9fa92ff8dd986a0f7c90fe\nSlot 00012: TxnValidate ff7e1fbfb51897b100dcfdf551ad9a03886432af0a9fa92ff8dd986a0f7c90fe\n')),(0,l.kt)("p",null,"V\xe0 ch\xfang t\xf4i th\u1ea5y n\xf3 x\u1ea3y ra \u1edf v\u1ecb tr\xed s\u1ed1 13."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00013: ```  CONTRACT LOG: "updated oracle value to 1700000"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'\nTh\u1ee9  nh\xec `use`  y\xeau c\u1ea7u \u0111\u1ebfn slot 15.\n\n``` {.}\nSlot 00015: 00000000-0000-4000-8000-000000000008 {Contract instance for wallet 5}:\n  Receive endpoint call: Object (fromList [("tag",String "use"),("value",Object (fromList [("unEndpointValue",Array [])]))])\nSlot 00015: ```  CONTRACT LOG: "own funds: [(,\\"\\",118999990),(ff,\\"USDT\\",70000000)]"\nSlot 00015: ```  CONTRACT LOG: "available assets: 70000000"\nSlot 00015: ```  CONTRACT LOG: "found oracle, exchange rate 1700000"\nSlot 00015: W5: TxSubmit: 84bec9a9044eee9c5b40029dca5bbc8346214504e5adb4745bbe6e5d7d96078e\nSlot 00015: TxnValidate 84bec9a9044eee9c5b40029dca5bbc8346214504e5adb4745bbe6e5d7d96078e\n')),(0,l.kt)("p",null,"V\xe0 s\u1ef1 ho\xe1n \u0111\u1ed5i x\u1ea3y ra \u1edf v\u1ecb tr\xed 16."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Slot 00016: ```  CONTRACT LOG: "made swap with price [(ff,\\"USDT\\",17000000)]"\n')),(0,l.kt)("p",null,"V\xe0 \u1edf d\u01b0\u1edbi c\xf9ng, ch\xfang t\xf4i th\u1ea5y s\u1ed1 d\u01b0 cu\u1ed1i c\xf9ng."),(0,l.kt)("p",null,"V\xed 2 v\u1eabn c\xf3 t\u1ea5t c\u1ea3 ti\u1ec1n c\u1ee7a n\xf3. T\u1ea5t c\u1ea3 nh\u1eefng g\xec V\xed 2 \u0111\xe3 l\xe0m l\xe0 ki\u1ec3m tra b\u1eb1ng Oracle, kh\xf4ng t\u1ed1n b\u1ea5t k\u1ef3 chi ph\xed n\xe0o, v\xec n\xf3 ho\xe0n to\xe0n l\xe0 m\u1ed9t v\u1ea5n \u0111\u1ec1 off-chain."),(0,l.kt)("p",null,"V\xed 1 \u0111\xe3 tr\u1ea3 m\u1ed9t s\u1ed1 ph\xed giao d\u1ecbch nh\u01b0ng k\u1ebft th\xfac v\u1edbi s\u1ed1 ti\u1ec1n cao h\u01a1n kho\u1ea3ng 2 Ada so v\u1edbi ban \u0111\u1ea7u. \u0110i\u1ec1u n\xe0y l\xe0 do n\xf3 \u0111\xe3 thu 2 Ada ph\xed s\u1eed d\u1ee5ng oracle."),(0,l.kt)("p",null,"V\xed 3 v\xe0 4 \u0111\u1ec1u \u0111\u01b0a ra \u0111\u1ec1 ngh\u1ecb v\xe0 s\u1ed1 d\u01b0 c\u1ee7a ch\xfang ph\u1ea3n \xe1nh t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i m\xe0 t\u1ea1i \u0111\xf3 c\xe1c \u0111\u1ec1 ngh\u1ecb c\u1ee7a ch\xfang \u0111\xe3 \u0111\u01b0\u1ee3c ch\u1ea5p nh\u1eadn."),(0,l.kt)("p",null,"V\xed 5 l\xe0 ng\u01b0\u1eddi ch\u1ea5p nh\u1eadn c\xe1c \u0111\u1ec1 ngh\u1ecb v\xe0 Ada b\u1ed5 sung c\u0169ng v\u1eady, nh\u01b0ng s\u1ed1 d\u01b0 M\xe3 th\xf4ng b\xe1o USD b\u1ecb gi\u1ea3m. L\u01b0u \xfd r\u1eb1ng V\xed 5 c\u0169ng \u0111\xe3 b\u1ecb kh\u1ea5u tr\u1eeb m\u1ed9t s\u1ed1 kho\u1ea3n ph\xed t\u1eeb s\u1ed1 d\u01b0 Ada c\u1ee7a n\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Final balances\nWallet 1: \n    {, ""}: 101999950\n    {ff, "USDT"}: 100000000\nWallet 2: \n    {, ""}: 100000000\n    {ff, "USDT"}: 100000000\nWallet 3: \n    {ff, "USDT"}: 117000000\n    {, ""}: 89999990\nWallet 4: \n    {ff, "USDT"}: 130000000\n    {, ""}: 79999990\nWallet 5: \n    {, ""}: 127999980\n    {ff, "USDT"}: 53000000\nWallet 6: \n    {, ""}: 100000000\n    {ff, "USDT"}: 100000000\nWallet 7: \n    {, ""}: 100000000\n    {ff, "USDT"}: 100000000\nWallet 8: \n    {, ""}: 100000000\n    {ff, "USDT"}: 100000000\nWallet 9: \n    {, ""}: 100000000\n    {ff, "USDT"}: 100000000\nWallet 10: \n    {, ""}: 100000000\n    {ff, "USDT"}: 100000000\n')),(0,l.kt)("p",null,"V\xe0 cu\u1ed1i c\xf9ng, c\u0169ng nh\u01b0 c\xe1c v\xed, ch\xfang ta th\u1ea5y r\u1eb1ng oracle v\u1eabn ti\u1ebfp t\u1ee5c, v\xe0 v\u1eabn s\u1edf h\u1eefu NFT. L\u01b0u \xfd r\u1eb1ng, trong nh\u1eadt k\xfd n\xe0y, ch\xfang t\xf4i kh\xf4ng th\u1ea5y gi\xe1 tr\u1ecb datum."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'Script cc6a43073dce46eebc7b309223904c7a8033ffab7d9b239cf013342d4c69a5d6: \n    {6122edd57c938cda24066f434da9aee55120b4eb362d4a1bd37547ef6e4a6cbb, ""}: 1\n')),(0,l.kt)("h2",{id:"plutus-application-backend-pab"},"Plutus Application Backend (PAB)"),(0,l.kt)("p",null,"Ngo\xe0i \xfd t\u01b0\u1edfng v\u1ec1 c\xe1ch tri\u1ec3n khai m\u1ed9t oracle trong Plutus, kh\xf4ng c\xf3 g\xec ch\xfang t\xf4i \u0111\xe3 l\xe0m trong b\xe0i gi\u1ea3ng n\xe0y cho \u0111\u1ebfn nay l\xe0 m\u1edbi, ngo\u1ea1i tr\u1eeb m\u1ed9t v\xe0i h\xe0m th\u01b0 vi\u1ec7n v\xe0 k\u1ef9 thu\u1eadt Haskell. V\u1ec1 nguy\xean t\u1eafc, ch\xfang ta \u0111\xe3 quen thu\u1ed9c v\u1edbi c\xe1ch tr\xecnh x\xe1c th\u1ef1c \u0111\u01b0\u1ee3c vi\u1ebft cho m\xe3 off-chain v\xe0 c\xe1ch h\u1ee3p \u0111\u1ed3ng \u0111\u01b0\u1ee3c vi\u1ebft cho m\xe3 on-chain c\u0169ng nh\u01b0 c\xe1ch ch\xfang ta c\xf3 th\u1ec3 ki\u1ec3m tra m\xe3 c\u1ee7a m\xecnh v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace"),"  monad."),(0,l.kt)("p",null,"Nh\u01b0ng b\xe2y gi\u1edd ch\xfang ta s\u1ebd n\xf3i v\u1ec1 m\u1ed9t th\u1ee9 m\u1edbi - Plutus Application Backend (PAB), cho ph\xe9p ch\xfang ta l\u1ea5y t\u1ea5t c\u1ea3 nh\u1eefng th\u1ee9 ch\xfang ta \u0111\xe3 l\xe0m v\xe0 bi\u1ebfn n\xf3 th\xe0nh m\u1ed9t t\u1ec7p th\u1ef1c thi ch\u1ea1y c\xe1c h\u1ee3p \u0111\u1ed3ng."),(0,l.kt)("p",null,"N\u1ebfu testnet ho\u1eb7c mainnet c\xf3 s\u1eb5n v\u1edbi s\u1ef1 h\u1ed7 tr\u1ee3 c\u1ee7a Plutus, ch\xfang t\xf4i c\xf3 th\u1ec3 tri\u1ec3n khai m\u1ed9t \u1ee9ng d\u1ee5ng nh\u01b0 v\u1eady, nh\u01b0ng hi\u1ec7n t\u1ea1i ch\xfang t\xf4i s\u1ebd c\u1ea7n h\xe0i l\xf2ng v\u1edbi m\u1ed9t blockchain m\xf4 ph\u1ecfng. Tuy nhi\xean, qu\xe1 tr\xecnh bi\u1ebfn m\xe3 th\xe0nh m\u1ed9t dApp th\u1ef1c t\u1ebf gi\u1ed1ng nh\u01b0 tr\xean m\u1ed9t blockchain th\u1ef1c."),(0,l.kt)("p",null,"Ch\xfang ta c\u1ea7n th\xeam m\u1ed9t m\xf4-\u0111un nh\u1ecf n\u1eefa, v\u1ec1 c\u01a1 b\u1ea3n ch\u1ec9 l\xe0 m\u1ed9t \u0111\u1ecbnh ngh\u0129a ki\u1ec3u. N\xf3 r\u1ea5t nh\u1ecf, ch\xfang t\xf4i c\xf3 th\u1ec3 bao g\u1ed3m to\xe0n b\u1ed9 n\u1ed9i dung t\u1ec7p \u1edf \u0111\xe2y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"{-# LANGUAGE DeriveAnyClass     #-}\n{-# LANGUAGE DeriveGeneric      #-}\n\nmodule Week06.Oracle.PAB\n    ( OracleContracts (..)\n    ) where\n\nimport           Data.Aeson                (FromJSON, ToJSON)\nimport           Data.Text.Prettyprint.Doc (Pretty (..), viaShow)\nimport           GHC.Generics              (Generic)\nimport           Ledger\n\nimport qualified Week06.Oracle.Core        as Oracle\n\ndata OracleContracts = Init | Oracle CurrencySymbol | Swap Oracle.Oracle\n    deriving (Eq, Ord, Show, Generic, FromJSON, ToJSON)\n\ninstance Pretty OracleContracts where\n    pretty = viaShow\n")),(0,l.kt)("p",null,"\xdd t\u01b0\u1edfng l\xe0 n\xf3 s\u1eeda \u0111\u1ed5i c\xe1c phi\xean b\u1ea3n h\u1ee3p \u0111\u1ed3ng m\xe0 ch\xfang t\xf4i mu\u1ed1n ch\u1ea1y. Ch\xfang t\xf4i c\xf3 nhi\u1ec1u h\u1ee3p \u0111\u1ed3ng kh\xe1c nhau v\xe0 ch\xfang t\xf4i mu\u1ed1n c\xf3 m\u1ed9t ki\u1ec3u d\u1eef li\u1ec7u trong \u0111\xf3 m\u1ed7i gi\xe1 tr\u1ecb c\u1ee7a ki\u1ec3u d\u1eef li\u1ec7u t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t li\xean h\u1ec7 m\xe0 cu\u1ed1i c\xf9ng ch\xfang t\xf4i mu\u1ed1n ch\u1ea1y."),(0,l.kt)("p",null,"Ph\u01b0\u01a1ng th\u1ee9c kh\u1edfi t\u1ea1o ",(0,l.kt)("inlineCode",{parentName:"p"},"Init"),"  s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 thi\u1ebft l\u1eadp m\u1ed9t m\xf4i tr\u01b0\u1eddng n\u01a1i c\xf3 s\u1eb5n M\xe3 th\xf4ng b\xe1o USD v\xe0 n\u01a1i c\xe1c v\xed c\xf3 ngu\u1ed3n cung c\u1ea5p ban \u0111\u1ea7u c\u1ee7a ch\xfang."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"Oracle")," t\u1ea1o t\u01b0\u01a1ng \u1ee9ng v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle")," h\u1ee3p \u0111\u1ed3ng s\u1ebd b\u1eaft \u0111\u1ea7u ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle")," v\xe0 cung c\u1ea5p endpoint ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," , v\xe0 tham s\u1ed1 ",(0,l.kt)("inlineCode",{parentName:"p"},"CurrencySymbol"),"  s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho M\xe3 th\xf4ng b\xe1o USD."),(0,l.kt)("p",null,"Cu\u1ed1i c\xf9ng, c\xe1c Swap, tham s\u1ed1 h\xf3a b\u1eb1ng c\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"Oracle")," s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ea1y c\xe1c h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i, cung c\u1ea5p thi\u1ebft b\u1ecb \u0111\u1ea7u cu\u1ed1i kh\xe1c nhau nh\u01b0 ",(0,l.kt)("inlineCode",{parentName:"p"},"offer")," , ",(0,l.kt)("inlineCode",{parentName:"p"},"retrieve"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"use")," v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"funds"),"."),(0,l.kt)("p",null,"Ch\xfang ta c\u1ea7n \u0111\u1ecbnh ngh\u0129a ",(0,l.kt)("inlineCode",{parentName:"p"},"OracleContracts"),"  trong m\u1ed9t m\xf4-\u0111un ri\xeang bi\u1ec7t v\xec ch\xfang ta s\u1ebd s\u1eed d\u1ee5ng n\xf3 c\u1ea3 t\u1eeb PAB v\xe0 c\u1ea3 t\u1eeb giao di\u1ec7n ng\u01b0\u1eddi d\xf9ng."),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd xem x\xe9t t\u1ec7p Cabal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"plutus-pioneer-program-week06.cabal\n")),(0,l.kt)("p",null,"Trong \u0111\xf3, ch\xfang t\xf4i c\xf3 c\xe1c \u0111\u1ecbnh ngh\u0129a cho c\xe1c t\u1ec7p th\u1ef1c thi kh\xe1c nhau."),(0,l.kt)("p",null,"T\u1eadp tin ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle-pab"),"  th\u1ef1c thi s\u1ebd thi\u1ebft l\u1eadp m\u1ed9t v\xed m\xf4 ph\u1ecfng, kh\u1edfi t\u1ea1o t\u1ea5t c\u1ea3 c\xe1c h\u1ee3p \u0111\u1ed3ng v\xe0 thi\u1ebft l\u1eadp m\u1ed9t m\xe1y ch\u1ee7 web cho ph\xe9p th\u1ebf gi\u1edbi b\xean ngo\xe0i t\u01b0\u01a1ng t\xe1c v\u1edbi c\xe1c h\u1ee3p \u0111\u1ed3ng n\xe0y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"executable oracle-pab\nmain-is: oracle-pab.hs\nhs-source-dirs:      app\nghc-options:         -Wall -threaded\nbuild-depends:       aeson\n                   , base ^>= 4.14.1.0\n                   , freer-extras\n                   , freer-simple\n                   , plutus-contract\n                   , plutus-ledger\n                   , plutus-pab\n                   , plutus-pioneer-program-week06\n                   , plutus-use-cases\n                   , text\n")),(0,l.kt)("p",null,"T\u1ec7p ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle-clientt")," th\u1ef1c thi s\u1ebd \u0111\u01b0\u1ee3c ch\u1ea1y b\u1edfi nh\xe0 cung c\u1ea5p oracle, do \u0111\xf3, t\u1ec7p s\u1ebd t\u01b0\u01a1ng t\xe1c v\u1edbi h\u1ee3p \u0111\u1ed3ng ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle")," . N\xf3 c\u0169ng s\u1ebd l\u1ea5y t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i t\u1eeb internet v\xe0 \u0111\u01b0a ch\xfang v\xe0o h\u1ec7 th\u1ed1ng."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"executable oracle-client\nmain-is: oracle-client.hs\nhs-source-dirs:      app\nghc-options:         -Wall\nbuild-depends:       base ^>= 4.14.1.0\n                   , bytestring\n                   , regex-tdfa ^>= 1.3.1.0\n                   , req ^>= 3.9.0\n                   , text\n                   , uuid\n")),(0,l.kt)("p",null,"Sau \u0111\xf3, t\u1ec7p c\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"swap-client"),"  th\u1ef1c thi s\u1ebd \u0111\u01b0\u1ee3c ch\u1ea1y b\u1edfi c\xe1c kh\xe1ch h\xe0ng mu\u1ed1n s\u1eed d\u1ee5ng h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"executable swap-client\nmain-is: swap-client.hs\nhs-source-dirs:      app\nghc-options:         -Wall\nbuild-depends:       aeson\n                   , base ^>= 4.14.1.0\n                   , plutus-ledger\n                   , plutus-pab\n                   , plutus-pioneer-program-week06\n                   , req ^>= 3.9.0\n                   , text\n                   , uuid\n")),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd l\u1ea7n l\u01b0\u1ee3t xem x\xe9t t\u1eebng \u0111i\u1ec1u n\xe0y."),(0,l.kt)("p",null,"B\u1ea1n c\xf3 th\u1ec3 t\xecm th\u1ea5y m\xe3 cho t\u1eebng \u1ee9ng d\u1ee5ng n\xe0y trong th\u01b0 m\u1ee5c ",(0,l.kt)("inlineCode",{parentName:"p"},"app")," ."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"app/oracle-client.hs\napp/oracle-pab.hs\napp/swap-client.hs\n")),(0,l.kt)("h3",{id:"oracle-pab"},"Oracle PAB"),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean, m\u1ed9t s\u1ed1 b\u1ea3ng so\u1ea1n s\u1eb5n \u0111\u1ec3 k\u1ebft n\u1ed1i ki\u1ec3u d\u1eef li\u1ec7u m\xe0 ch\xfang ta v\u1eeba x\xe1c \u0111\u1ecbnh - c\xe1c tr\u01b0\u1eddng h\u1ee3p h\u1ee3p \u0111\u1ed3ng \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i - v\u1edbi c\xe1c l\u01b0\u1ee3c \u0111\u1ed3 v\xe0 h\u1ee3p \u0111\u1ed3ng m\xe0 ch\xfang ta \u0111\xe3 x\xe1c \u0111\u1ecbnh tr\u01b0\u1edbc \u0111\xf3."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"handleOracleContracts ::\n    ( Member (Error PABError) effs\n    , Member (LogMsg (PABMultiAgentMsg (Builtin OracleContracts))) effs\n    )\n    => ContractEffect (Builtin OracleContracts)\n    ~> Eff effs\nhandleOracleContracts = handleBuiltin getSchema getContract where\n    getSchema = \\case\n        Init     -> endpointsToSchemas @Empty\n        Oracle _ -> endpointsToSchemas @(Oracle.OracleSchema .\\\\ BlockchainActions)\n        Swap _   -> endpointsToSchemas @(Oracle.SwapSchema   .\\\\ BlockchainActions)\n    getContract = \\case\n        Init        -> SomeBuiltin   initContract\n        Oracle cs   -> SomeBuiltin $ Oracle.runOracle $ oracleParams cs\n        Swap oracle -> SomeBuiltin $ Oracle.swap oracle\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Init"),"  s\u1ebd kh\xf4ng c\xf3 b\u1ea5t k\u1ef3 schema n\xe0o ,v\xec v\u1eady n\xf3 ch\u1ec9 c\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"BlockChainActions"),".\n",(0,l.kt)("inlineCode",{parentName:"p"},"Oracle"),"  s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"OracleSchema"),"  v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Swap")," s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"SwapSchema"),". Kh\xf4ng c\xf3 g\xec ng\u1ea1c nhi\xean \u1edf \u0111\xf3."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Init"),"  s\u1ebd ch\u1ea1y ",(0,l.kt)("inlineCode",{parentName:"p"},"initContract"),", m\xe0 ch\xfang ta s\u1ebd th\u1ea5y trong gi\xe2y l\xe1t."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Oracle"),"  s\u1ebd ch\u1ea1y h\u1ee3p \u0111\u1ed3ng ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle")," v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleParams")," k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7 c\u1ee7a USD Token v\xe0 v\xed d\u1ee5 \u0111\u1ecbnh ngh\u0129a oracleparams."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"oracleParams :: CurrencySymbol -> Oracle.OracleParams\noracleParams cs = Oracle.OracleParams\n    { Oracle.opFees   = 1_000_000\n    , Oracle.opSymbol = cs\n    , Oracle.opToken  = usdt\n    }\n")),(0,l.kt)("p",null,"v\xe0 cu\u1ed1i c\xf9ng ",(0,l.kt)("inlineCode",{parentName:"p"},"Swap"),"  s\u1ebd ch\u1ea1y h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i v\u1edbi m\u1ed9t gi\xe1 tr\u1ecb oracle."),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 m\u1ed9t s\u1ed1 b\u1ea3n copy/paste boilerplate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"handlers :: SimulatorEffectHandlers (Builtin OracleContracts)\nhandlers =\n    Simulator.mkSimulatorHandlers @(Builtin OracleContracts) []\n    $ interpret handleOracleContracts        \n")),(0,l.kt)("p",null,"V\xe0 \u0111\xe2y l\xe0 h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"initContract"),"  m\xe0 ch\xfang t\xf4i \u0111\xe3 \u0111\u1ec1 c\u1eadp ngay tr\u01b0\u1edbc \u0111\xe2y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"initContract :: Contract (Last CurrencySymbol) BlockchainActions Text ()\ninitContract = do\n    ownPK <- pubKeyHash <$> ownPubKey\n    cur   <-\n        mapError (pack . show)\n        (Currency.forgeContract ownPK [(usdt, fromIntegral (length wallets) ` amount)]\n        :: Contract (Last CurrencySymbol) BlockchainActions Currency.CurrencyError Currency.OneShotCurrency)\n    let cs = Currency.currencySymbol cur\n        v  = Value.singleton cs usdt amount\n    forM_ wallets $ \\w -> do\n        let pkh = pubKeyHash $ walletPubKey w\n        when (pkh /= ownPK) $ do\n            tx <- submitTx $ mustPayToPubKey pkh v\n            awaitTxConfirmed $ txId tx\n    tell $ Last $ Just cs\n  where\n    amount :: Integer\n    amount = 100_000_000\n")),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"initContract"),"  \u0111\xfac Tokens USD  ph\xe2n ph\u1ed1i ch\xfang \u0111\u1ebfn c\xe1c v\xed, sau \u0111\xf3 n\xf3 telll\xe0 bi\u1ec3u t\u01b0\u1ee3ng ti\u1ec1n t\u1ec7 cho Token USD ."),(0,l.kt)("p",null,"V\xed \u0111\u01b0\u1ee3c m\xe3 h\xf3a c\u1ee9ng tr\u01b0\u1edbc \u0111\xf3 trong m\xe3. S\u1ed1 l\u01b0\u1ee3ng v\xed v\xe0 s\u1ed1 token \u0111\u01b0\u1ee3c trao cho ch\xfang l\xe0 ho\xe0n to\xe0n t\xf9y \xfd."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"wallets :: [Wallet]\nwallets = [Wallet i | i <- [1 .. 5]]\n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta c\xf3 th\u1ec3 nh\xecn v\xe0o m\xe3 PAB th\u1ef1c t\u1ebf."),(0,l.kt)("p",null,"L\u1ea7n \u0111\u1ea7u ti\xean, ch\xfang ta th\u1ea5y m\u1ed9t h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"main"),"  l\xe0 \u0111i\u1ec3m nh\u1eadp c\u1ee7a t\u1ec7p th\u1ef1c thi."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'main :: IO ()\nmain = void $ Simulator.runSimulationWith handlers $ do\n    Simulator.logString @(Builtin OracleContracts) "Starting Oracle PAB webserver. Press enter to exit."\n    shutdown <- PAB.Server.startServerDebug\n\n    cidInit <- Simulator.activateContract (Wallet 1) Init\n    cs      <- waitForLast cidInit\n    _       <- Simulator.waitUntilFinished cidInit\n\n    cidOracle <- Simulator.activateContract (Wallet 1) $ Oracle cs\n    liftIO $ writeFile "oracle.cid" $ show $ unContractInstanceId cidOracle\n    oracle <- waitForLast cidOracle\n\n    forM_ wallets $ \\w ->\n        when (w /= Wallet 1) $ do\n            cid <- Simulator.activateContract w $ Swap oracle\n            liftIO $ writeFile (\'W\' : show (getWallet w) ++ ".cid") $ show $ unContractInstanceId cid\n\n    void $ liftIO getLine\n    shutdown\n')),(0,l.kt)("p",null,"C\xe1c h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"main"),"  s\u1eed d\u1ee5ng monad kh\xe1c  m\xe0 ch\xfang ta ch\u01b0a t\u1eebng th\u1ea5y tr\u01b0\u1edbc \u0111\xe2y v\xe0 l\xe0 \u0111\u1eb7c tr\u01b0ng cho PAB  - C\xe1c ",(0,l.kt)("inlineCode",{parentName:"p"},"Simulator"),"  monad."),(0,l.kt)("p",null,"C\xe1i ",(0,l.kt)("inlineCode",{parentName:"p"},"Simulator"),"  monad l\xe0 r\u1ea5t gi\u1ed1ng v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace"),"  monad. V\u1ec1 nguy\xean t\u1eafc n\xf3 c\xf3 c\xe1c kh\u1ea3 n\u0103ng nh\u01b0 nhau. B\u1ea1n c\xf3 th\u1ec3 b\u1eaft \u0111\u1ea7u c\xe1c h\u1ee3p \u0111\u1ed3ng tr\xean v\xed, b\u1ea1n c\xf3 th\u1ec3 ki\u1ec3m tra tr\u1ea1ng th\xe1i b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng nh\u1eadt k\xfd, b\u1ea1n c\xf3 th\u1ec3 g\u1ecdi c\xe1c endpoint, v.v."),(0,l.kt)("p",null,"C\xf3 m\u1ed9t ch\xfat \u0111\xe1ng ti\u1ebfc l\xe0 c\xf3 hai monads cho \u0111i\u1ec1u n\xe0y v\xec ch\xfang r\u1ea5t gi\u1ed1ng nhau. Nh\xf3m Plutus c\xf3 k\u1ebf ho\u1ea1ch s\u1eafp x\u1ebfp ch\xfang v\xe0 c\xf3 th\u1ec3 bi\u1ebfn ch\xfang th\xe0nh m\u1ed9t. V\xec v\u1eady, n\xf3 c\xf3 th\u1ec3 kh\xf4ng \u0111\xe1ng \u0111\u1ec3 t\xecm hi\u1ec3u nh\u1eefng \u0111i\u1ec1u ph\u1ee9c t\u1ea1p c\u1ee7a ",(0,l.kt)("inlineCode",{parentName:"p"},"Simulator")," monad v\xec n\xf3 c\xf3 th\u1ec3 s\u1ebd s\u1edbm thay \u0111\u1ed5i."),(0,l.kt)("p",null,"T\u01b0\u01a1ng t\u1ef1 nh\u01b0 ",(0,l.kt)("inlineCode",{parentName:"p"},"runEmulatorTraceIO"),",Ch\xfang ta c\xf3 ",(0,l.kt)("inlineCode",{parentName:"p"},"runSimulationWith"),"\u0111\u1ec3 pass qua ",(0,l.kt)("inlineCode",{parentName:"p"},"handlers"),"  boilerplate."),(0,l.kt)("p",null,"Tuy nhi\xean m\u1ed9t s\u1ef1 kh\xe1c bi\u1ec7t ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace")," monad:\n",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace"),"  monad l\xe0 m\xe3 thu\u1ea7n t\xfay - kh\xf4ng c\xf3 t\xe1c d\u1ee5ng ph\u1ee5 trong th\u1ebf gi\u1edbi th\u1ef1c, kh\xf4ng li\xean quan \u0111\u1ebfn IO. \u0110\u1eb7c bi\u1ec7t c\xf3 m\u1ed9t tr\xecnh th\xf4ng d\u1ecbch thu\u1ea7n t\xfay ",(0,l.kt)("inlineCode",{parentName:"p"},"runEmulatorTrace")," l\xe0 m\u1ed9t h\xe0m Haskell thu\u1ea7n t\xfay kh\xf4ng c\xf3 t\xe1c d\u1ee5ng ph\u1ee5."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Simulator")," kh\xe1c - b\u1ea1n c\xf3 th\u1ec3 l\xe0m IO. C\xe1ch n\xf3 ho\u1ea1t \u0111\u1ed9ng l\xe0 \u0111ang s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"MonadIO"),", trong \u0111\xf3 c\xf3 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c ",(0,l.kt)("inlineCode",{parentName:"p"},"liftIO"),", th\u1ef1c hi\u1ec7n m\u1ed9t h\xe0nh \u0111\u1ed9ng ",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),"  v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"lifts"),"  n\xf3 tr\u1edf th\xe0nh monad \u0111\u1ec1 c\u1eadp . V\xec v\u1eady, n\u1ebfu b\u1ea1n c\xf3 m\u1ed9t s\u1ed1 h\xe0nh \u0111\u1ed9ng IO t\xf9y \xfd m\xe0 b\u1ea1n c\xf3 th\u1ec3 th\u1ef1c hi\u1ec7n trong Haskell, th\xec b\u1eb1ng c\xe1ch \xe1p d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"liftIO")," cho n\xf3, b\u1ea1n c\xf3 th\u1ec3 chuy\u1ec3n n\xf3 v\xe0o ",(0,l.kt)("inlineCode",{parentName:"p"},"Simulator"),"  monad."),(0,l.kt)("p",null,"Ngo\xe0i ra, n\u1ebfu b\u1ea1n nheo m\u1eaft, n\xf3 tr\xf4ng r\u1ea5t gi\u1ed1ng v\u1edbi m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace"),"."),(0,l.kt)("p",null,"\u0110i\u1ec1u \u0111\u1ea7u ti\xean ch\xfang t\xf4i l\xe0m l\xe0 s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"logString"),"  \u1ec3 ghi l\u1ea1i r\u1eb1ng ch\xfang t\xf4i \u0111ang kh\u1edfi \u0111\u1ed9ng m\xe1y ch\u1ee7 PAB. Sau \u0111\xf3, ch\xfang t\xf4i g\u1ecdi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"startServerDebug"),", \xe0 gi\xe1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a h\xe0m \u0111\xf3 \u0111\u01b0\u1ee3c li\xean k\u1ebft v\u1edbi  ",(0,l.kt)("inlineCode",{parentName:"p"},"shutdown"),"  \xf3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng sau n\xe0y \u0111\u1ec3 t\u1eaft m\xe1y ch\u1ee7."),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang t\xf4i s\u1eed d\u1ee5ng m\u1ed9t c\xe1i g\xec \u0111\xf3 \u0111\u01b0\u1ee3c g\u1ecdi ",(0,l.kt)("inlineCode",{parentName:"p"},"activateContract"),"  l\xe0 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"},"activateContractWallet"),"  t\u1eeb ",(0,l.kt)("inlineCode",{parentName:"p"},"EmulatorTrace"),"  monad."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"cidInit <- Simulator.activateContract (Wallet 1) Init\n")),(0,l.kt)("p",null,"N\xf3 c\u1ea7n m\u1ed9t v\xed m\xe0 ch\xfang ta mu\u1ed1n b\u1eaft \u0111\u1ea7u phi\xean b\u1ea3n \u0111\xf3 v\xe0 sau \u0111\xf3 l\xe0 m\u1ed9t gi\xe1 tr\u1ecb c\u1ee7a lo\u1ea1i h\u1ee3p \u0111\u1ed3ng \u0111\xe3 \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i. H\xe3y nh\u1edb r\u1eb1ng ch\xfang ta \u0111\xe3 li\xean k\u1ebft t\u1ea1o h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"Init"),"\nv\u1edbi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"initContract")," ."),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta c\u1ea7n k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7. \u0110\xe2y l\xe0 m\u1ed9t v\xed d\u1ee5 v\u1ec1 c\xe1ch ch\xfang t\xf4i l\u1ea5y th\xf4ng tin ra kh\u1ecfi h\u1ee3p \u0111\u1ed3ng b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"tell"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"cs <- waitForLast cidInit\n")),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"cidInit"),"  s\u1eed d\u1ee5ng m\u1ed9t h\xe0m t\u1eeb monad ",(0,l.kt)("inlineCode",{parentName:"p"},"Simulator")," \u0111\u01b0\u1ee3c g\u1ecdi l\xe0\n",(0,l.kt)("inlineCode",{parentName:"p"},"waitForState"),", h\xe0m n\xe0y nh\u1eadn m\u1ed9t h\u1ee3p \u0111\u1ed3ng v\xe0 m\u1ed9t v\u1ecb t\u1eeb. V\u1ecb t\u1eeb nh\u1eadn m\u1ed9t bi\u1ec3u th\u1ee9c JSON v\xe0 tr\u1ea3 v\u1ec1  ",(0,l.kt)("inlineCode",{parentName:"p"},"Maybe a"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"waitForLast :: FromJSON a => ContractInstanceId -> Simulator.Simulation t a\nwaitForLast cid =\n    flip Simulator.waitForState cid $ \\json -> case fromJSON json of\n        Success (Last (Just x)) -> Just x\n        _                       -> Nothing\n")),(0,l.kt)("p",null,"\xdd t\u01b0\u1edfng l\xe0 n\xf3 s\u1ebd \u0111\u1ecdc tr\u1ea1ng th\xe1i c\u1ee7a h\u1ee3p \u0111\u1ed3ng m\xe0 ch\xfang t\xf4i \u0111\xe3 vi\u1ebft b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"tell"),". \u0110i\u1ec1u n\xe0y \u0111\u01b0\u1ee3c tu\u1ea7n t\u1ef1 h\xf3a d\u01b0\u1edbi d\u1ea1ng gi\xe1 tr\u1ecb JSON v\xe0 n\xf3 \xe1p d\u1ee5ng gi\xe1 tr\u1ecb JSON n\xe0y cho v\u1ecb t\u1eeb (predicate) \u0111\u01b0\u1ee3c cung c\u1ea5p. N\u1ebfu k\u1ebft qu\u1ea3 l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing"),", n\xf3 ch\u1ec9 c\u1ea7n \u0111\u1ee3i cho \u0111\u1ebfn khi tr\u1ea1ng th\xe1i thay \u0111\u1ed5i m\u1ed9t l\u1ea7n n\u1eefa. Nh\u01b0ng, n\u1ebfu \u0111\xfang nh\u01b0 v\u1eady ",(0,l.kt)("inlineCode",{parentName:"p"},"Just x")," n\xf3 s\u1ebd tr\u1ea3 v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,l.kt)("p",null,"C\xf3 th\u1ec3 c\xf3 hai c\xe1ch ",(0,l.kt)("inlineCode",{parentName:"p"},"Nothing")," - ph\xe2n t\xedch c\xfa ph\xe1p JSON c\xf3 th\u1ec3 kh\xf4ng th\xe0nh c\xf4ng ho\u1eb7c ch\xfang ta c\xf3 th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c ",(0,l.kt)("inlineCode",{parentName:"p"},"Last Nothing"),". V\xec v\u1eady, k\u1ebft qu\u1ea3 cu\u1ed1i c\xf9ng l\xe0 h\xe0m \u0111\u1ee3i cho \u0111\u1ebfn khi tr\u1ea1ng th\xe1i c\u1ee7a h\u1ee3p \u0111\u1ed3ng cho bi\u1ebft m\u1ed9t gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"Just"),"."),(0,l.kt)("p",null,"T\u1ea1i th\u1eddi \u0111i\u1ec3m n\xe0y, ch\xfang t\xf4i c\xf3 k\xfd hi\u1ec7u ti\u1ec1n t\u1ec7 b\u1ecb r\xe0ng bu\u1ed9c ",(0,l.kt)("inlineCode",{parentName:"p"},"cs"),". V\xe0 sau \u0111\xf3 ch\xfang t\xf4i ch\u1edd \u0111\u1ee3i cho \u0111\u1ebfn khi ",(0,l.kt)("inlineCode",{parentName:"p"},"initContract")," k\u1ebft th\xfac."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"_ <- Simulator.waitUntilFinished cidInit\n")),(0,l.kt)("p",null,"B\u01b0\u1edbc ti\u1ebfp theo l\xe0 b\u1eaft \u0111\u1ea7u oracle tr\xean V\xed 1, s\u1eed d\u1ee5ng gi\xe1 tr\u1ecb ",(0,l.kt)("inlineCode",{parentName:"p"},"cs"),"  m\xe0 ch\xfang t\xf4i \u0111\xe3 thu \u0111\u01b0\u1ee3c g\u1ea7n \u0111\xe2y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"cidOracle <- Simulator.activateContract (Wallet 1) $ Oracle cs\n")),(0,l.kt)("p",null,"\u0110\u1ec3 t\u01b0\u01a1ng t\xe1c v\u1edbi h\u1ee3p \u0111\u1ed3ng oracle t\u1eeb th\u1ebf gi\u1edbi b\xean ngo\xe0i, v\xed d\u1ee5 nh\u01b0 t\u1eeb giao di\u1ec7n web, ch\xfang ta c\u1ea7n b\u1eaft tay v\xe0o x\u1eed l\xfd ",(0,l.kt)("inlineCode",{parentName:"p"},"cidOracle")," ."),(0,l.kt)("p",null,"V\xec v\u1eady, nh\u1eefng g\xec ch\xfang t\xf4i l\xe0m l\xe0 ghi \u0111i\u1ec1u n\xe0y v\xe0o m\u1ed9t t\u1ec7p c\xf3 t\xean ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle.cid"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'liftIO $ writeFile "oracle.cid" $ show $ unContractInstanceId cidOracle\n')),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y ch\u1ec9 l\xe0 nhanh ch\xf3ng v\xe0 kh\xf4ng t\u1ed1t \u0111\u1ec3 tr\xecnh di\u1ec5n. Trong m\xe3 s\u1ea3n xu\u1ea5t, b\u1ea1n s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t c\u01a1 ch\u1ebf an to\xe0n h\u01a1n."),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang t\xf4i s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"waitForLast")," m\u1ed9t l\u1ea7n n\u1eefa \u0111\u1ec3 nh\u1eadn gi\xe1 tr\u1ecb oracle, m\xe0 ch\xfang t\xf4i \u0111\xe3 cung c\u1ea5p t\u1eeb h\u1ee3p \u0111\u1ed3ng ",(0,l.kt)("inlineCode",{parentName:"p"},"runOracle"),"  th\xf4ng qua ",(0,l.kt)("inlineCode",{parentName:"p"},"tell"),". Ch\xfang ta c\u1ea7n \u0111i\u1ec1u n\xe0y v\xec h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i \u0111\u01b0\u1ee3c tham s\u1ed1 h\xf3a b\u1edfi gi\xe1 tr\u1ecb n\xe0y."),(0,l.kt)("p",null,"\u1ede giai \u0111o\u1ea1n n\xe0y, NFT \u0111\u01b0\u1ee3c \u0111\xfac v\xe0 ch\xfang ta bi\u1ebft gi\xe1 tr\u1ecb oracle l\xe0 g\xec."),(0,l.kt)("p",null,"Ti\u1ebfp theo, ch\xfang t\xf4i l\u1eb7p qua t\u1ea5t c\u1ea3 c\xe1c v\xed, ngo\u1ea1i tr\u1eeb v\xed 1 ch\u1ea1y oracle v\xe0 ch\xfang t\xf4i k\xedch ho\u1ea1t h\u1ee3p \u0111\u1ed3ng ho\xe1n \u0111\u1ed5i tr\xean m\u1ed7i v\xed. \u1ede \u0111\xe2y ch\xfang t\xf4i s\u1eed d\u1ee5ng m\u1ed9t ph\u01b0\u01a1ng ph\xe1p ghi t\u1ec7p t\u01b0\u01a1ng t\u1ef1 \u0111\u1ec3 n\u1eafm gi\u1eef c\xe1c quy tr\xecnh x\u1eed l\xfd h\u1ee3p \u0111\u1ed3ng"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"forM_ wallets $ \\w ->\n    when (w /= Wallet 1) $ do\n        cid <- Simulator.activateContract w $ Swap oracle\n        liftIO $ writeFile ('W' : show (getWallet w) ++ \".cid\") $ show $ unContractInstanceId cid\n")),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang t\xf4i ch\u1ec9 ch\u1eb7n cho \u0111\u1ebfn khi ng\u01b0\u1eddi d\xf9ng nh\u1ea5n enter, sau \u0111\xf3 ch\xfang t\xf4i t\u1eaft m\xe1y ch\u1ee7."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"void $ liftIO getLine\nshutdown\n")),(0,l.kt)("p",null,"Kh\xf4ng th\u1ef1c s\u1ef1 c\u1ea7n thi\u1ebft ph\u1ea3i l\xe0m t\u1ea5t c\u1ea3 nh\u1eefng \u0111i\u1ec1u n\xe0y, v\xec b\u1ea1n c\u0169ng c\xf3 th\u1ec3 b\u1eaft \u0111\u1ea7u v\xe0 d\u1eebng c\xe1c phi\xean b\u1ea3n h\u1ee3p \u0111\u1ed3ng t\u1eeb giao di\u1ec7n web. \u1ede \u0111\xe2y, ch\xfang t\xf4i d\u1ec5 d\xe0ng th\u1ef1c hi\u1ec7n \u0111i\u1ec1u \u0111\xf3 h\u01a1n theo c\xe1ch c\xf3 k\u1ecbch b\u1ea3n cho b\u1ea3n demo, nh\u01b0ng v\u1ec1 nguy\xean t\u1eafc, b\u1ea1n ch\u1ec9 c\xf3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng tr\xecnh m\xf4 ph\u1ecfng v\xe0 sau \u0111\xf3 \u0111\u1ee3i cho \u0111\u1ebfn khi b\u1ea1n t\u1eaft m\xe1y."),(0,l.kt)("p",null,"N\u1ebfu b\u1ea1n t\xf2 m\xf2 v\u1ec1 API do PAB cung c\u1ea5p, b\u1ea1n c\xf3 th\u1ec3 ki\u1ec3m tra \u0111i\u1ec1u \u0111\xf3 trong g\xf3i ",(0,l.kt)("inlineCode",{parentName:"p"},"plutus-pab")," , trong m\xf4-\u0111un ",(0,l.kt)("inlineCode",{parentName:"p"},"Plutus.PAB.Webserver.API"),". Nh\u01b0ng c\xe1i m\xe0 ch\xfang t\xf4i \u0111ang s\u1eed d\u1ee5ng \u1edf \u0111\xe2y l\xe0:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'-- | PAB client API for contracts of type @t@. Examples of @t@ are\n--   ` Contract executables that reside in the user\'s file system\n--   ` "Builtin" contracts that run in the same process as the PAB (ie. the PAB is compiled & distributed with these contracts)\ntype NewAPI t walletId -- see note [WalletID type in wallet API]\n    = "api" :> "new" :> "contract" :>\n        ("activate" :> ReqBody \'[ JSON] (ContractActivationArgs t) :> Post \'[JSON] ContractInstanceId -- start a new instance\n            :<|> "instance" :>\n                    (Capture "contract-instance-id" Text :>\n                        ( "status" :> Get \'[JSON] (ContractInstanceClientState t) -- Current status of contract instance\n                        :<|> "endpoint" :> Capture "endpoint-name" String :> ReqBody \'[JSON] JSON.Value :> Post \'[JSON] () -- Call an endpoint. Make\n                        :<|> "stop" :> Put \'[JSON] () -- Terminate the instance.\n                        )\n                    )\n            :<|> "instances" :> "wallet" :> Capture "wallet-id" walletId :> Get \'[JSON] [ContractInstanceClientState t]\n            :<|> "instances" :> Get \'[ JSON] [ContractInstanceClientState t] -- list of all active contract instances\n            :<|> "definitions" :> Get \'[JSON] [ContractSignatureResponse t] -- list of available contracts\n        )\n')),(0,l.kt)("p",null,"\u0110i\u1ec1u n\xe0y l\xe0m cho vi\u1ec7c s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n Haskell ph\u1ed5 bi\u1ebfn ",(0,l.kt)("inlineCode",{parentName:"p"},"Servant")," \u0111\u1ec3 vi\u1ebft c\xe1c \u1ee9ng d\u1ee5ng web an to\xe0n, nh\u01b0ng n\xf3 s\u1ebd c\xf3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c \xedt nhi\u1ec1u m\xe0 kh\xf4ng c\u1ea7n bi\u1ebft v\u1ec1 th\u01b0 vi\u1ec7n ",(0,l.kt)("inlineCode",{parentName:"p"},"Servant")," . V\xed d\u1ee5: b\u1ea1n c\xf3 th\u1ec3 th\u1ea5y endpoint ",(0,l.kt)("inlineCode",{parentName:"p"},"/api/new/contract/activate")," \u0111\u01b0\u1ee3c khai b\xe1o m\xe0 b\u1ea1n c\xf3 th\u1ec3 d\xf9ng ",(0,l.kt)("inlineCode",{parentName:"p"},"ContractActivationArgs")," l\xe0m ph\u1ea7n th\xe2n c\u1ee7a n\xf3 v\xe0 tr\u1ea3 v\u1ec1 m\u1ed9t ",(0,l.kt)("inlineCode",{parentName:"p"},"ContractInstanceId"),"."),(0,l.kt)("p",null,"Ngo\xe0i ra c\xf2n c\xf3 m\u1ed9t API \u1ed5 c\u1eafm web, nh\u01b0ng ch\xfang t\xf4i \u0111\xe3 kh\xf4ng s\u1eed d\u1ee5ng n\xf3 trong v\xed d\u1ee5 n\xe0y."),(0,l.kt)("p",null,"V\xec v\u1eady, h\xe3y th\u1eed t\u1ec7p th\u1ef1c thi c\u1ee7a ch\xfang t\xf4i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"cabal run oracle-pab\n")),(0,l.kt)("p",null,"Ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u1ea7u ra nh\u1eadt k\xfd t\u01b0\u01a1ng t\u1ef1 nh\u01b0 nh\u1eefng g\xec ch\xfang t\xf4i th\u1ea5y v\u1edbi ",(0,l.kt)("inlineCode",{parentName:"p"}," EmulatorTrace")," , nh\u01b0ng \u0111\xe2y b\xe2y gi\u1edd l\xe0 m\u1ed9t m\xe1y ch\u1ee7 tr\u1ef1c ti\u1ebfp."),(0,l.kt)("p",null,"\u0110\u1ea7u ra b\xean d\u01b0\u1edbi \u0111\u01b0\u1ee3c gi\u1ea3m b\u1edbt \u0111\u1ec3 tr\xe1nh \u0111\u1ea7y \u0111\u1ee7 chi ti\u1ebft."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'[INFO] Slot 0: TxnValidate af5e6d25b5ecb26185289a03d50786b7ac4425b21849143ed7e18bcd70dc4db8\n[INFO] Starting Oracle PAB webserver. Press enter to exit.\n[INFO] Starting PAB backend server on port: 8080\n[INFO] Activated instance dda39c83-5a0f-484f-b49a-9943b1ff5526 on W1\n[INFO] Slot 1: W1: Balancing an unbalanced transaction:\n                     Tx:\n                       Tx da767478580878690990b3a22387be9c5b27fabed2c0ca7b9991eb682a6781f8:\n                         {inputs:\n                         outputs:\n                           - Value (Map [(,Map [("",1)])]) addressed to\n                             addressed to ScriptCredential: e9827f1a9e43109d1c8d4555913734b8c48a467a31061b312959f270850fc8a0 (no staking credential)\n                         forge: Value (Map [])\n                         fee: Value (Map [(,Map [("",10)])])\n                         mps:\n                         signatures:\n                         validity range: Interval {ivFrom = LowerBound NegInf True, ivTo = UpperBound PosInf True}\n                         data:\n                           <>}\n                     Requires signatures:\n[INFO] Slot 1: TxnValidate b7d6ba18d02898aa5d0814a306e4a05cf153c199aabb175ef9b00328105ab98f\n[INFO] Slot 2: W1: Balancing an unbalanced transaction:\n ...\n[INFO] Slot 6: TxnValidate d690122263521c37f308a0d5ae858aa4807cb1e493c2a3374bf65b934c74782a\n[INFO] Activated instance deceaa52-f117-46bc-b0f1-eb1f2f529b5a on W1\n[INFO] Slot 7: W1: Balancing an unbalanced transaction:\n...\n[INFO] Slot 7: TxnValidate a679948d128735ec1f380e9f733d7f4a5e54c81f39c73a656d61b077111840e1\n[INFO] Slot 8: W1: Balancing an unbalanced transaction:\n...\n[INFO] Slot 8: TxnValidate f0125e685edd6de2d09f9547f53b18d1bad11bd7fad570a057ba74737ab3053e\n[INFO] deceaa52-f117-46bc-b0f1-eb1f2f529b5a: "started oracle Oracle {oSymbol = b8a1d67cd94acf75d7e00f27015ec5e31242adad0967eee473f49c5d1d686169, oOperator = 21fe31dfa154a261626bf854046fd2271b7bed4b6abe45aa58877ef47f9721b9, oFee = 1000000, oAsset = (9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,\\"USDT\\")}"\n[INFO] Activated instance 5bac6e67-f956-45ef-b386-f1d045cf5e37 on W2\n[INFO] Activated instance 2c3a2794-2592-4c2b-9a7d-9c810cedf886 on W3\n[INFO] Activated instance 6f8d611d-a3f6-4794-9048-8ea3201e3c56 on W4\n[INFO] Activated instance 387d9651-6024-48c1-a72d-5b3c6d3a6b53 on W5\n')),(0,l.kt)("p",null,"V\xed d\u1ee5, ch\xfang ta c\xf3 th\u1ec3 th\u1ea5y n\u01a1i ch\xfang ta c\xf3 th\u1ec3 t\xecm th\u1ea5y ID phi\xean b\u1ea3n c\u1ee7a c\xe1c h\u1ee3p \u0111\u1ed3ng n\u1ebfu ch\xfang ta mu\u1ed1n t\u01b0\u01a1ng t\xe1c v\u1edbi ch\xfang th\xf4ng qua API."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"[INFO] Activated instance deceaa52-f117-46bc-b0f1-eb1f2f529b5a on W1\n")),(0,l.kt)("p",null,"N\u1ebfu b\xe2y gi\u1edd ch\xfang ta d\u1eebng m\xe1y ch\u1ee7 v\xe0 t\xecm trong th\u01b0 m\u1ee5c, ch\xfang ta s\u1ebd th\u1ea5y c\xe1c t\u1ec7p m\xe0 ch\xfang ta \u0111\xe3 l\u01b0u tr\u1eef c\xe1c ID phi\xean b\u1ea3n."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"[nix-shell:~/git/ada/pioneer-fork/code/week06]$ ls\napp            dist-newstyle  LICENSE     plutus-pioneer-program-week06.cabal  W2.cid  W4.cid\ncabal.project  hie.yaml       oracle.cid  src                                  W3.cid  W5.cid\n\n[nix-shell:~/git/ada/pioneer-fork/code/week06]$ cat W5.cid \n387d9651-6024-48c1-a72d-5b3c6d3a6b53\n")),(0,l.kt)("p",null,"V\u1edbi th\xf4ng tin n\xe0y - thu \u0111\u01b0\u1ee3c t\u1eeb nh\u1eadt k\xfd m\xe1y ch\u1ee7 web ho\u1eb7c t\u1eeb c\xe1c t\u1ec7p ch\xfang t\xf4i \u0111\xe3 t\u1ea1o, ch\xfang t\xf4i c\xf3 th\u1ec3 s\u1eed d\u1ee5ng b\u1ea5t k\u1ef3 c\xf4ng c\u1ee5 HTTP n\xe0o nh\u01b0 Curl ho\u1eb7c Postman \u0111\u1ec3 t\u01b0\u01a1ng t\xe1c v\u1edbi c\xe1c h\u1ee3p \u0111\u1ed3ng khi m\xe1y ch\u1ee7 web \u0111ang ch\u1ea1y. Theo m\u1eb7c \u0111\u1ecbnh, n\xf3 ch\u1ea1y tr\xean c\u1ed5ng 8080. Ch\xfang t\xf4i c\u0169ng c\xf3 th\u1ec3 vi\u1ebft m\xe3 b\u1eb1ng b\u1ea5t k\u1ef3 ng\xf4n ng\u1eef l\u1eadp tr\xecnh n\xe0o m\xe0 ch\xfang t\xf4i mu\u1ed1n \u0111\u1ec3 t\u01b0\u01a1ng t\xe1c v\u1edbi m\xe1y ch\u1ee7 web b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng c\xe1c endpoints HTTP."),(0,l.kt)("p",null,"B\xe2y gi\u1edd ch\xfang ta s\u1ebd xem x\xe9t ng\u1eafn g\u1ecdn v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle-client")," v\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"swap-client"),". Ch\xfang t\xf4i s\u1ebd kh\xf4ng \u0111i v\xe0o qu\xe1 nhi\u1ec1u chi ti\u1ebft v\xec ch\xfang t\xf4i kh\xf4ng qu\xe1 quan t\xe2m \u0111\u1ebfn c\xe1ch vi\u1ebft giao di\u1ec7n ng\u01b0\u1eddi d\xf9ng \u1edf \u0111\xe2y."),(0,l.kt)("h3",{id:"oracle-client"},"Oracle Client"),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n Haskell ",(0,l.kt)("inlineCode",{parentName:"p"},"Req"),"  \u1ec3 t\u01b0\u01a1ng t\xe1c v\u1edbi m\xe1y ch\u1ee7 web."),(0,l.kt)("p",null,"\u0110\u1ea7u ti\xean ch\xfang t\xf4i \u0111\u1ecdc t\u1ec7p ",(0,l.kt)("inlineCode",{parentName:"p"},"oracle.cid"),"  \u0111\u1ec3 l\u1ea5y ID phi\xean b\u1ea3n oracle. Sau \u0111\xf3, ch\xfang ta c\xf3 m\u1ed9t h\xe0m \u0111\u1ec7 quy ",(0,l.kt)("inlineCode",{parentName:"p"},"go"),"."),(0,l.kt)("p",null,"H\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"go")," tra c\u1ee9u t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i hi\u1ec7n t\u1ea1i tr\xean CoinMarketCap, ki\u1ec3m tra xem \u0111i\u1ec1u \u0111\xf3 \u0111\xe3 thay \u0111\u1ed5i hay ch\u01b0a, v\xe0 n\u1ebfu c\xf3 thay \u0111\u1ed5i, n\xf3 s\u1ebd g\u1ecdi h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle")," n\xe0y g\u1ecdi l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"endpoint updateOracle")," tr\xean h\u1ee3p \u0111\u1ed3ng c\u1ee7a ch\xfang t\xf4i. V\xe0, cho d\xf9 thay \u0111\u1ed5i c\xf3 \u0111\u01b0\u1ee3c ph\xe1t hi\u1ec7n hay kh\xf4ng, n\xf3 s\u1ebd \u0111\u1ee3i trong n\u0103m gi\xe2y (t\xf9y \xfd), r\u1ed3i l\u1ea1i ti\u1ebfp t\u1ee5c."),(0,l.kt)("p",null,"Th\u1eddi gian tr\xec ho\xe3n s\u1ebd ph\u1ee5 thu\u1ed9c v\xe0o nh\u1eefng \u0111i\u1ec1u nh\u01b0 gi\u1edbi h\u1ea1n t\u1ef7 l\u1ec7 do CoinMarketCap \xe1p \u0111\u1eb7t. Tr\xean th\u1ef1c t\u1ebf, v\xec c\xe1c kh\u1ed1i tr\xean Cardano ch\u1ec9 xu\u1ea5t hi\u1ec7n hai m\u01b0\u01a1i gi\xe2y m\u1ed9t l\u1ea7n, n\xean n\u0103m gi\xe2y c\xf3 l\u1ebd l\xe0 qu\xe1 ng\u1eafn."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'main :: IO ()\nmain = do\n    uuid <- read <$> readFile "oracle.cid"\n    putStrLn $ "oracle contract instance id: " ++ show uuid\n    go uuid Nothing\n  where\n    go :: UUID -> Maybe Integer -> IO a\n    go uuid m = do\n        x <- getExchangeRate\n        let y = Just x\n        when (m /= y) $\n            updateOracle uuid x\n        threadDelay 5_000_000\n        go uuid y\n')),(0,l.kt)("p",null,"B\xe2y gi\u1edd, h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"updateOracle"),"  chu\u1ea9n b\u1ecb m\u1ed9t y\xeau c\u1ea7u POST b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ID phi\xean b\u1ea3n oracle v\xe0 m\u1ed9t ph\u1ea7n th\xe2n JSON ch\u1ee9a t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'updateOracle :: UUID -> Integer -> IO ()\nupdateOracle uuid x = runReq defaultHttpConfig $ do\n    v <- req\n        POST\n        (http "127.0.0.1" /: "api"  /: "new" /: "contract" /: "instance" /: pack (show uuid) /: "endpoint" /: "update")\n        (ReqBodyJson x)\n        (Proxy :: Proxy (JsonResponse ()))\n        (port 8080)\n    liftIO $ putStrLn $ if responseStatusCode v == 200\n        then "updated oracle to " ++ show x\n        else "error updating oracle"\n')),(0,l.kt)("p",null,"Vad \u0111\xe2y l\xe0 h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"getExchangeRate")," c\xe1i m\xe0 nhanh ch\xf3ng v\xe0 hi\u1ec7u qu\u1ea3 \u0111\u1ec3 nh\u1eadn t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i t\u1eeb CoinMarketCap. H\u1ecd cung c\u1ea5p m\u1ed9t API th\xedch h\u1ee3p, nh\u01b0ng \u1edf \u0111\xe2y ch\xfang t\xf4i ch\u1ec9 th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 thao t\xe1c qu\xe9t m\xe0n h\xecnh t\u1eeb trang web v\xe0 s\u1eed d\u1ee5ng ",(0,l.kt)("inlineCode",{parentName:"p"},"regex")," \u0111\u1ec3 tr\xedch xu\u1ea5t gi\xe1 tr\u1ecb m\xe0 ch\xfang t\xf4i quan t\xe2m. T\u1ea5t nhi\xean, \u0111i\u1ec1u n\xe0y r\u1ea5t m\u1ecfng manh v\xe0 kh\xf4ng bao gi\u1edd c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\xe0m m\xe3 s\u1ea3n xu\u1ea5t."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'getExchangeRate :: IO Integer\ngetExchangeRate = runReq defaultHttpConfig $ do\n    v <- req\n        GET\n        (https "coinmarketcap.com" /: "currencies" /: "cardano")\n        NoReqBody\n        bsResponse\n        mempty\n    let priceRegex      = "priceValue___11gHJ\\">\\\\$([\\\\.0-9]`)" :: ByteString\n        (_, _, _, [bs]) = responseBody v =~ priceRegex :: (ByteString, ByteString, ByteString, [ByteString])\n        d               = read $ unpack bs :: Double\n        x               = round $ 1_000_000 ` d\n    liftIO $ putStrLn $ "queried exchange rate: " ++ show d\n    return x    \n')),(0,l.kt)("p",null,"H\xe3y \u0111\u1ec3 ch\xfang t\xf4i ch\u1ea1y n\xf3."),(0,l.kt)("p",null,"Tr\u01b0\u1edbc ti\xean, ch\xfang ta c\u1ea7n \u0111\u1ea3m b\u1ea3o r\u1eb1ng PAB \u0111ang ch\u1ea1y."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"cabal run oracle-pab \n")),(0,l.kt)("p",null,"Sau \u0111\xf3, trong m\u1ed9t thi\u1ebft b\u1ecb \u0111\u1ea7u cu\u1ed1i kh\xe1c (terminal)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"cabal run oracle-client\n...\nqueried exchange rate: 1.54\nupdated oracle to 1540000\nqueried exchange rate: 1.54\n")),(0,l.kt)("p",null,"Ch\xfang ta c\xf3 th\u1ec3 th\u1ea5y t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i m\xe0 n\xf3 thu \u0111\u01b0\u1ee3c t\u1eeb CoinMarketCap v\xe0 y\xeau c\u1ea7u c\u1eadp nh\u1eadt oracle."),(0,l.kt)("p",null,"V\xe0 n\u1ebfu ch\xfang ta \u0111\u1ee3i \u0111\u1ee7 l\xe2u, ch\xfang ta s\u1ebd th\u1ea5y"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},"queried exchange rate: 1.55\nupdated oracle to 1550000\nqueried exchange rate: 1.55\n")),(0,l.kt)("p",null,"V\xe0 ch\xfang t\xf4i th\u1ea5y r\u1eb1ng ch\xfang t\xf4i \u0111ang di chuy\u1ec3n."),(0,l.kt)("p",null,"N\u1ebfu b\u1ea1n chuy\u1ec3n tr\u1edf l\u1ea1i PAB, b\u1ea1n c\u0169ng s\u1ebd th\u1ea5y c\xe1c th\xf4ng b\xe1o nh\u1eadt k\xfd b\u1ed5 sung."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'[INFO] Slot 16: W1: Balancing an unbalanced transaction:\n    Tx:\n    Tx c5b384f75f93ebc8f1e6b514237aa70d0d982e9b035eececa27af0b3e72568e4:\n        {inputs:\n        outputs:\n        - Value (Map [(b8a1d67cd94acf75d7e00f27015ec5e31242adad0967eee473f49c5d1d686169,Map [("",1)])]) addressed to\n            addressed to ScriptCredential: 04a718132f7ca493a011c40926e191a76bd84cbf8e7c14b6c99bbea8b8bc0bba (no staking credential)\n        forge: Value (Map [])\n        fee: Value (Map [(,Map [("",10)])])\n        mps:\n        signatures:\n        validity range: Interval {ivFrom = LowerBound NegInf True, ivTo = UpperBound PosInf True}\n        data:\n        1540000}\n    Requires signatures:\n[INFO] Slot 16: TxnValidate 40c5dbb5e7c8de390a6943d8f0a84d218cf86dd81af1fd7cfc62612e6b616c2c\n[INFO] 5d9d778e-55f9-45ab-89a6-2ba9aa18045e: "set initial oracle value to 1540000"\n')),(0,l.kt)("h3",{id:"swap-client"},"Swap Client"),(0,l.kt)("p",null,"The swap client r\u1ea5t \u0111\u01a1n gi\u1ea3n."),(0,l.kt)("p",null,"\u1ede \u0111\xe2y, ch\xfang t\xf4i ch\u1ec9 \u0111\u01b0a ra m\u1ed9t giao di\u1ec7n b\u1ea3ng \u0111i\u1ec1u khi\u1ec3n \u0111\u01a1n gi\u1ea3n, v\xec v\u1eady ch\xfang t\xf4i kh\xf4ng b\u1eadn t\xe2m \u0111\u1ebfn \u0111\u1ed3 h\u1ecda ho\u1eb7c giao di\u1ec7n ng\u01b0\u1eddi d\xf9ng web."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'main :: IO ()\nmain = do\n    [i :: Int] <- map read <$> getArgs\n    uuid       <- read <$> readFile (\'W\' : show i ++ ".cid")\n    hSetBuffering stdout NoBuffering\n    putStrLn $ "swap contract instance id for Wallet " ++ show i ++ ": " ++ show uuid\n    go uuid\n  where\n    go :: UUID -> IO a\n    go uuid = do\n        cmd <- readCommand\n        case cmd of\n            Offer amt -> offer uuid amt\n            Retrieve  -> retrieve uuid\n            Use       -> use uuid\n            Funds     -> getFunds uuid\n        go uuid\n\n    readCommand :: IO Command\n    readCommand = do\n        putStr "enter command (Offer amt, Retrieve, Use or Funds): "\n        s <- getLine\n        maybe readCommand return $ readMaybe s\n')),(0,l.kt)("p",null,"\xdd t\u01b0\u1edfng l\xe0 l\u1ea5y m\u1ed9t l\u1ec7nh t\u1eeb b\u1ea3ng \u0111i\u1ec1u khi\u1ec3n v\xe0 g\u1ecdi endpoint th\xedch h\u1ee3p. ."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},"case cmd of\n    Offer amt -> offer uuid amt\n    Retrieve  -> retrieve uuid\n    Use       -> use uuid\n    Funds     -> getFunds uuid\n")),(0,l.kt)("p",null,"Vi\u1ec7c g\u1ecdi endpoint s\u1eed d\u1ee5ng c\xf9ng m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c cho m\u1ed7i endpoint, t\u1ea1o ra m\u1ed9t cu\u1ed9c g\u1ecdi HTTP gi\u1ed1ng nh\u01b0 c\xe1ch m\xe0 ch\xfang t\xf4i \u0111\xe3 l\xe0m cho \u1ee9ng d\u1ee5ng  Oracle Client."),(0,l.kt)("p",null,"C\xe1c h\xe0m ",(0,l.kt)("inlineCode",{parentName:"p"},"getFunds")," h\u01a1i ph\u1ee9c t\u1ea1p h\u01a1n so v\u1edbi ba h\xe0m kia v\xec n\xf3 c\u1ea7n \u0111\u1ec3 c\xf3 \u0111\u01b0\u1ee3c th\xf4ng tin t\u1eeb m\xe1y ch\u1ee7. \u0110\u1ed1i v\u1edbi \u0111i\u1ec1u n\xe0y, n\xf3 c\u1ea7n ph\u1ea3i th\u1ef1c hi\u1ec7n hai y\xeau c\u1ea7u. Y\xeau c\u1ea7u th\u1ee9 hai l\xe0 \u0111\u1ecdc tr\u1ea1ng th\xe1i ",(0,l.kt)("inlineCode",{parentName:"p"},"told")," c\u1ee7a l\u1ea7n g\u1ecdi \u0111\u1ea7u ti\xean."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.haskell}"},'getFunds :: UUID -> IO ()\ngetFunds uuid = handle h $ runReq defaultHttpConfig $ do\n    v <- req\n        POST\n        (http "127.0.0.1" /: "api"  /: "new" /: "contract" /: "instance" /: pack (show uuid) /: "endpoint" /: "funds")\n        (ReqBodyJson ())\n        (Proxy :: Proxy (JsonResponse ()))\n        (port 8080)\n    if responseStatusCode v /= 200\n        then liftIO $ putStrLn "error getting funds"\n        else do\n            w <- req\n                GET\n                (http "127.0.0.1" /: "api"  /: "new" /: "contract" /: "instance" /: pack (show uuid) /: "status")\n                NoReqBody\n                (Proxy :: Proxy (JsonResponse (ContractInstanceClientState OracleContracts)))\n                (port 8080)\n            liftIO $ putStrLn $ case fromJSON $ observableState $ cicCurrentState $ responseBody w of\n                Success (Last (Just f)) -> "funds: " ++ show (flattenValue f)\n                _                       -> "error decoding state"\n  where\n    h :: HttpException -> IO ()\n    h _ = threadDelay 1_000_000 >> getFunds uuid\n')),(0,l.kt)("p",null,"H\xe3y ch\u1ea1y \u1ee9ng d\u1ee5ng Swap client. Ch\xfang t\xf4i s\u1ebd \u0111\u1ec3 m\xe1y ch\u1ee7 web v\xe0 \u1ee9ng d\u1ee5ng oracle client \u0111ang ch\u1ea1y."),(0,l.kt)("p",null,"Khi s\u1eed d\u1ee5ng cabal, ch\xfang ta truy\u1ec1n c\xe1c tham s\u1ed1 nh\u01b0 sau ",(0,l.kt)("inlineCode",{parentName:"p"},"--"),". \u0110\u1ed1i v\u1edbi \u1ee9ng d\u1ee5ng oracle client, ch\xfang t\xf4i chuy\u1ec3n s\u1ed1 v\xed v\xe0o l\xe0m tham s\u1ed1."),(0,l.kt)("p",null,"Ch\xfang t\xf4i s\u1ebd kh\u1edfi ch\u1ea1y \u1ee9ng d\u1ee5ng Swap client cho v\xed 2 v\xe0 3, m\u1ed7i v\xed trong m\u1ed9t c\u1eeda s\u1ed5 ri\xeang bi\u1ec7t v\xe0 truy v\u1ea5n s\u1ed1 ti\u1ec1n t\u01b0\u01a1ng \u1ee9ng c\u1ee7a ch\xfang."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'cabal run swap-client -- 2\n\nswap contract instance id for Wallet 2: ab65f248-450d-4988-ab2a-651ad5697596\nenter command (Offer amt, Retrieve, Use or Funds): Funds\nfunds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,"USDT",100000000),(,"",100000000)]\nenter command (Offer amt, Retrieve, Use or Funds): \n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'cabal run swap-client -- 3\n\nswap contract instance id for Wallet 3: 2dc4f6f2-142e-40a2-a1b8-c431eb29a3a2\nenter command (Offer amt, Retrieve, Use or Funds): Funds\nfunds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,"USDT",100000000),(,"",100000000)]\nenter command (Offer amt, Retrieve, Use or Funds): \n')),(0,l.kt)("p",null,"V\xed 2 hi\u1ec7n cung c\u1ea5p 10 Ada d\u01b0\u1edbi d\u1ea1ng ho\xe1n \u0111\u1ed5i v\xe0 ch\xfang t\xf4i ki\u1ec3m tra ti\u1ec1n v\xe0 ch\xfang t\xf4i th\u1ea5y r\u1eb1ng s\u1ed1 d\u01b0 Ada \u0111\xe3 gi\u1ea3m xu\u1ed1ng (b\u1eb1ng 10 Ada c\u1ed9ng v\u1edbi ph\xed giao d\u1ecbch), nh\u01b0ng s\u1ed1 d\u01b0 M\xe3 th\xf4ng b\xe1o USD v\u1eabn gi\u1eef nguy\xean."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'enter command (Offer amt, Retrieve, Use or Funds): Offer 10000000\noffered swap of 10000000 lovelace\nenter command (Offer amt, Retrieve, Use or Funds): Funds\nfunds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,"USDT",100000000),(,"",89999990)]\n')),(0,l.kt)("p",null,"Trong khi c\xe1c l\u1ec7nh n\xe0y \u0111ang ch\u1ea1y, b\u1ea1n c\u0169ng c\xf3 th\u1ec3 th\u1ea5y c\xe1c l\u1ec7nh g\u1ecdi \u0111ang \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong \u0111\u1ea7u ra PAB."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'INFO] Slot 1662: TxnValidate 17f640f03e4dc7d0a4c246129454aa19daa8d9d674bfebeeee486d6143c6648e\n[INFO] ab65f248-450d-4988-ab2a-651ad5697596: "offered 10000000 lovelace for swap"\n[INFO] ab65f248-450d-4988-ab2a-651ad5697596: "own funds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,\\"USDT\\",100000000),(,\\"\\",89999990)]"    \n')),(0,l.kt)("p",null,"Now, Wallet 3 is going to take up the offer of the swap.\nB\xe2y gi\u1edd, Wallet 3 s\u1ebd nh\u1eadn offer c\u1ee7a ho\xe1n \u0111\u1ed5i."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'enter command (Offer amt, Retrieve, Use or Funds): Use\nused swap\nenter command (Offer amt, Retrieve, Use or Funds): Funds\nfunds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,"USDT",100000000),(,"",100000000)]\n')),(0,l.kt)("p",null,"S\u1ebd m\u1ea5t m\u1ed9t ch\xfat th\u1eddi gian \u0111\u1ec3 c\u1eadp nh\u1eadt ti\u1ec1n, v\xec v\u1eady h\xe3y th\u1eed l\u1ea1i l\u1ec7nh ",(0,l.kt)("inlineCode",{parentName:"p"},"Funds")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'enter command (Offer amt, Retrieve, Use or Funds): Funds\nfunds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,"USDT",84400000),(,"",108999990)]\n')),(0,l.kt)("p",null,"C\xe1i \u0111\xf3 t\u1ed1t h\u01a1n. V\xe0 ch\xfang ta c\xf3 th\u1ec3 th\u1ea5y r\u1eb1ng v\xed 3 \u0111\xe3 nh\u1eadn \u0111\u01b0\u1ee3c 10 Ada, tr\u1eeb \u0111i ph\xed oracle c\u1ee7a 1 Ada v\xe0 tr\u1eeb \u0111i ph\xed giao d\u1ecbch."),(0,l.kt)("p",null,"Trong \u0111\u1ea7u ra PAB, ch\xfang t\xf4i th\u1ea5y m\u1ed9t c\xe1i g\xec \u0111\xf3 nh\u01b0"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'[INFO] Slot 1868: TxnValidate 00afd25af063d58b4f290e43057f4738483098f26ff0134bc14c9d54b9b94090\n[INFO] 2dc4f6f2-142e-40a2-a1b8-c431eb29a3a2: "made swap with price [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,\\"USDT\\",15600000)]"\n[INFO] 2dc4f6f2-142e-40a2-a1b8-c431eb29a3a2: "own funds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,\\"USDT\\",84400000),(,\\"\\",108999990)]"\n')),(0,l.kt)("p",null,"H\xe3y xem x\xe9t qu\u1ef9 c\u1ee7a v\xed 2."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-{.}"},'enter command (Offer amt, Retrieve, Use or Funds): Funds\nfunds: [(9a91216e55e5369b926acc07c70a11d9ae7fef454e43e3e5c0aa1733f48c798a,"USDT",115600000),(,"",89999990)]\n')),(0,l.kt)("p",null,"V\xe0 ch\xfang t\xf4i th\u1ea5y r\u1eb1ng v\xed 2 \u0111\xe3 m\u1ea5t m\u1ed9t s\u1ed1 Ada, nh\u01b0ng \u0111\xe3 thu \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 Token USD. Vi\u1ec7c ho\xe1n \u0111\u1ed5i \u0111\xe3 ho\xe0n t\u1ea5t, s\u1eed d\u1ee5ng t\u1ef7 gi\xe1 h\u1ed1i \u0111o\xe1i \u0111ang di\u1ec5n ra, ngay b\xe2y gi\u1edd, \u0111\xe3 \u0111\u01b0\u1ee3c \u0111\u01b0a v\xe0o blockchain gi\u1ea3 th\xf4ng qua oracle."),(0,l.kt)("p",null,"V\xec v\u1eady, b\xe2y gi\u1edd ch\xfang ta \u0111\xe3 th\u1ea5y m\u1ed9t v\xed d\u1ee5 end-to-end c\u1ee7a Plutus dApp. N\xf3 c\xf3 giao di\u1ec7n ng\u01b0\u1eddi d\xf9ng, n\xf3 n\xf3i chuy\u1ec7n v\u1edbi th\u1ebf gi\u1edbi b\xean ngo\xe0i, truy c\u1eadp internet, l\u1ea5y th\xf4ng tin v\xe0 t\u01b0\u01a1ng t\xe1c v\u1edbi c\xe1c h\u1ee3p \u0111\u1ed3ng th\xf4ng minh c\u1ee7a Plutus. C\xe1c h\u1ee3p \u0111\u1ed3ng th\xf4ng minh g\u1eedi c\xe1c giao d\u1ecbch t\u1edbi blockchain n\u01a1i logic x\xe1c th\u1ef1c b\u1eaft \u0111\u1ea7u v\xe0 \u0111\u1ea3m b\u1ea3o r\u1eb1ng m\u1ecdi th\u1ee9 tu\xe2n theo c\xe1c quy t\u1eafc kinh doanh."),(0,l.kt)("p",null,"Trong v\xed d\u1ee5 n\xe0y, v\xec ch\xfang ta kh\xf4ng c\xf3 blockchain th\u1ef1c \u0111\u1ec3 ch\u01a1i c\xf9ng, n\xean t\u1ea5t c\u1ea3 c\xe1c v\xed \u0111\u1ec1u s\u1eed d\u1ee5ng c\xf9ng m\u1ed9t m\xe1y ch\u1ee7 PAB, t\u1ea5t nhi\xean, trong cu\u1ed9c s\u1ed1ng th\u1ef1c s\u1ebd l\xe0 ng\u1edb ng\u1ea9n. R\xf5 r\xe0ng, c\xe1c v\xed kh\xe1c nhau s\u1ebd c\xf3 c\xe1c phi\xean b\u1ea3n PAB ch\u1ea1y kh\xe1c nhau."),(0,l.kt)("p",null,"Nh\u01b0ng, ngo\xe0i \u0111i\u1ec1u \u0111\xf3 ra, n\xf3 g\u1ea7n nh\u01b0 ch\xednh x\xe1c l\xe0 end-to-end, c\xe1ch m\u1ed9t h\u1ec7 th\u1ed1ng nh\u01b0 v\u1eady s\u1ebd ho\u1ea1t \u0111\u1ed9ng."))}u.isMDXComponent=!0},4543:function(n,t,e){t.Z=e.p+"assets/images/week06__00000-84dc8472c851f9d498e50158a6db82a3.png"},2499:function(n,t,e){t.Z=e.p+"assets/images/week06__00001-ed7cda335f088c7048ac7c74b7c077a6.png"},3123:function(n,t,e){t.Z=e.p+"assets/images/week06__00002-44ef75fbc3b1e1a1a3e3419b14783066.png"},2198:function(n,t,e){t.Z=e.p+"assets/images/week06__00003-0b5bb3782b21d4bd0fca5389ea01645c.png"},1286:function(n,t,e){t.Z=e.p+"assets/images/week06__00004-789b3973cd4c08a6f70363671d8f7219.png"},7700:function(n,t,e){t.Z=e.p+"assets/images/week06__00005-a367da3cdd4e2bd0cdb39e22365539c5.png"},1586:function(n,t,e){t.Z=e.p+"assets/images/week06__00006-1cf322f6040cefba7bb0781f3f259ff3.png"}}]);